; Hobby Cross-Assembler Processor Test 040b
; W65C816S\Instruction Set
; ok: forced address modes

; generated by MODE65.AWK - Thu Jul 12 12:06:20 2007

; no errors to detect

; -------------------------------

		.listfile
		.errfile

; -------------------------------

        .cpu    "W65C816S"  ; required psop
        .org    $1000       ; required psop

; -------------------------------

; backward reference

bakbyt	.equ	$12
bakwrd	.equ	$1234
bak24	.equ	$123456
bak24b	.equ	$789ABC

		; check:
		; ADC
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

 -
		; ab

		assume	addr:long
		adc		$1234       ; ab -> lab
		assume	addr:long
		adc		bakwrd      ; ab -> lab
		assume	addr:long
		adc		fwdwrd      ; ab -> lab
		assume	addr:absolute
		adc		$1234       ; ab -> ab
		assume	addr:absolute
		adc		bakwrd      ; ab -> ab
		assume	addr:absolute
		adc		fwdwrd      ; ab -> ab
		assume	addr:direct
		adc		$1234       ; ab -> zp
		assume	addr:direct
		adc		bakwrd      ; ab -> zp
		assume	addr:direct
		adc		fwdwrd      ; ab -> zp

		; abi

		assume	addr:long
		adc		($1234)     ; abi -> lzpi
		assume	addr:long
		adc		(bakwrd)    ; abi -> lzpi
		assume	addr:long
		adc		(fwdwrd)    ; abi -> lzpi
		assume	addr:direct
		adc		($1234)     ; abi -> zpi
		assume	addr:direct
		adc		(bakwrd)    ; abi -> zpi
		assume	addr:direct
		adc		(fwdwrd)    ; abi -> zpi

		; abx

		assume	addr:long
		adc		$1234,x     ; abx -> labx
		assume	addr:long
		adc		bakwrd,x    ; abx -> labx
		assume	addr:long
		adc		fwdwrd,x    ; abx -> labx
		assume	addr:absolute
		adc		$1234,x     ; abx -> abx
		assume	addr:absolute
		adc		bakwrd,x    ; abx -> abx
		assume	addr:absolute
		adc		fwdwrd,x    ; abx -> abx
		assume	addr:direct
		adc		$1234,x     ; abx -> zpx
		assume	addr:direct
		adc		bakwrd,x    ; abx -> zpx
		assume	addr:direct
		adc		fwdwrd,x    ; abx -> zpx

		; abxi

		assume	addr:direct
		adc		($1234,x)   ; abxi -> zpxi
		assume	addr:direct
		adc		(bakwrd,x)  ; abxi -> zpxi
		assume	addr:direct
		adc		(fwdwrd,x)  ; abxi -> zpxi

		; aby

		assume	addr:absolute
		adc		$1234,y     ; aby -> aby
		assume	addr:absolute
		adc		bakwrd,y    ; aby -> aby
		assume	addr:absolute
		adc		fwdwrd,y    ; aby -> aby

		; lab

		assume	addr:long
		adc		$123456     ; lab -> lab
		assume	addr:long
		adc		bak24       ; lab -> lab
		assume	addr:long
		adc		fwd24       ; lab -> lab
		assume	addr:absolute
		adc		$123456     ; lab -> ab
		assume	addr:absolute
		adc		bak24       ; lab -> ab
		assume	addr:absolute
		adc		fwd24       ; lab -> ab
		assume	addr:direct
		adc		$123456     ; lab -> zp
		assume	addr:direct
		adc		bak24       ; lab -> zp
		assume	addr:direct
		adc		fwd24       ; lab -> zp

		; labi

		assume	addr:long
		adc		($1234)     ; labi -> lzpi
		assume	addr:long
		adc		(bakwrd)    ; labi -> lzpi
		assume	addr:long
		adc		(fwdwrd)    ; labi -> lzpi
		assume	addr:direct
		adc		($1234)     ; labi -> zpi
		assume	addr:direct
		adc		(bakwrd)    ; labi -> zpi
		assume	addr:direct
		adc		(fwdwrd)    ; labi -> zpi

		; labx

		assume	addr:long
		adc		$123456,x   ; labx -> labx
		assume	addr:long
		adc		bak24,x     ; labx -> labx
		assume	addr:long
		adc		fwd24,x     ; labx -> labx
		assume	addr:absolute
		adc		$123456,x   ; labx -> abx
		assume	addr:absolute
		adc		bak24,x     ; labx -> abx
		assume	addr:absolute
		adc		fwd24,x     ; labx -> abx
		assume	addr:direct
		adc		$123456,x   ; labx -> zpx
		assume	addr:direct
		adc		bak24,x     ; labx -> zpx
		assume	addr:direct
		adc		fwd24,x     ; labx -> zpx

		; lpcr

		assume	addr:long
		adc		+           ; lpcr -> lab
		assume	addr:long
		adc		-           ; lpcr -> lab
		assume	addr:absolute
		adc		+           ; lpcr -> ab
		assume	addr:absolute
		adc		-           ; lpcr -> ab
		assume	addr:direct
		adc		+           ; lpcr -> zp
		assume	addr:direct
		adc		-           ; lpcr -> zp

		; lzpi

		assume	addr:long
		adc		[$12]       ; lzpi -> lzpi
		assume	addr:long
		adc		[bakbyt]    ; lzpi -> lzpi
		assume	addr:long
		adc		[fwdbyt]    ; lzpi -> lzpi
		assume	addr:direct
		adc		[$12]       ; lzpi -> zpi
		assume	addr:direct
		adc		[bakbyt]    ; lzpi -> zpi
		assume	addr:direct
		adc		[fwdbyt]    ; lzpi -> zpi

		; lzpiy

		assume	addr:long
		adc		[$12],y     ; lzpiy -> lzpiy
		assume	addr:long
		adc		[bakbyt],y  ; lzpiy -> lzpiy
		assume	addr:long
		adc		[fwdbyt],y  ; lzpiy -> lzpiy
		assume	addr:direct
		adc		[$12],y     ; lzpiy -> zpiy
		assume	addr:direct
		adc		[bakbyt],y  ; lzpiy -> zpiy
		assume	addr:direct
		adc		[fwdbyt],y  ; lzpiy -> zpiy

		; pcr

		assume	addr:long
		adc		+           ; pcr -> lab
		assume	addr:long
		adc		-           ; pcr -> lab
		assume	addr:absolute
		adc		+           ; pcr -> ab
		assume	addr:absolute
		adc		-           ; pcr -> ab
		assume	addr:direct
		adc		+           ; pcr -> zp
		assume	addr:direct
		adc		-           ; pcr -> zp

		; zp

		assume	addr:long
		adc		$12         ; zp -> lab
		assume	addr:long
		adc		bakbyt      ; zp -> lab
		assume	addr:long
		adc		fwdbyt      ; zp -> lab
		assume	addr:absolute
		adc		$12         ; zp -> ab
		assume	addr:absolute
		adc		bakbyt      ; zp -> ab
		assume	addr:absolute
		adc		fwdbyt      ; zp -> ab
		assume	addr:direct
		adc		$12         ; zp -> zp
		assume	addr:direct
		adc		bakbyt      ; zp -> zp
		assume	addr:direct
		adc		fwdbyt      ; zp -> zp

		; zpi

		assume	addr:long
		adc		($12)       ; zpi -> lzpi
		assume	addr:long
		adc		(bakbyt)    ; zpi -> lzpi
		assume	addr:long
		adc		(fwdbyt)    ; zpi -> lzpi
		assume	addr:direct
		adc		($12)       ; zpi -> zpi
		assume	addr:direct
		adc		(bakbyt)    ; zpi -> zpi
		assume	addr:direct
		adc		(fwdbyt)    ; zpi -> zpi

		; zpiy

		assume	addr:long
		adc		($12),y     ; zpiy -> lzpiy
		assume	addr:long
		adc		(bakbyt),y  ; zpiy -> lzpiy
		assume	addr:long
		adc		(fwdbyt),y  ; zpiy -> lzpiy
		assume	addr:direct
		adc		($12),y     ; zpiy -> zpiy
		assume	addr:direct
		adc		(bakbyt),y  ; zpiy -> zpiy
		assume	addr:direct
		adc		(fwdbyt),y  ; zpiy -> zpiy

		; zpx

		assume	addr:long
		adc		$12,x       ; zpx -> labx
		assume	addr:long
		adc		bakbyt,x    ; zpx -> labx
		assume	addr:long
		adc		fwdbyt,x    ; zpx -> labx
		assume	addr:absolute
		adc		$12,x       ; zpx -> abx
		assume	addr:absolute
		adc		bakbyt,x    ; zpx -> abx
		assume	addr:absolute
		adc		fwdbyt,x    ; zpx -> abx
		assume	addr:direct
		adc		$12,x       ; zpx -> zpx
		assume	addr:direct
		adc		bakbyt,x    ; zpx -> zpx
		assume	addr:direct
		adc		fwdbyt,x    ; zpx -> zpx

		; zpxi

		assume	addr:direct
		adc		($12,x)     ; zpxi -> zpxi
		assume	addr:direct
		adc		(bakbyt,x)  ; zpxi -> zpxi
		assume	addr:direct
		adc		(fwdbyt,x)  ; zpxi -> zpxi

		; zpy

		assume	addr:absolute
		adc		$12,y       ; zpy -> aby
		assume	addr:absolute
		adc		bakbyt,y    ; zpy -> aby
		assume	addr:absolute
		adc		fwdbyt,y    ; zpy -> aby

 +

		; check:
		; ASL
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

 -
		; ab

		assume	addr:absolute
		asl		$1234       ; ab -> ab
		assume	addr:absolute
		asl		bakwrd      ; ab -> ab
		assume	addr:absolute
		asl		fwdwrd      ; ab -> ab
		assume	addr:direct
		asl		$1234       ; ab -> zp
		assume	addr:direct
		asl		bakwrd      ; ab -> zp
		assume	addr:direct
		asl		fwdwrd      ; ab -> zp

		; abx

		assume	addr:absolute
		asl		$1234,x     ; abx -> abx
		assume	addr:absolute
		asl		bakwrd,x    ; abx -> abx
		assume	addr:absolute
		asl		fwdwrd,x    ; abx -> abx
		assume	addr:direct
		asl		$1234,x     ; abx -> zpx
		assume	addr:direct
		asl		bakwrd,x    ; abx -> zpx
		assume	addr:direct
		asl		fwdwrd,x    ; abx -> zpx

		; lab

		assume	addr:absolute
		asl		$123456     ; lab -> ab
		assume	addr:absolute
		asl		bak24       ; lab -> ab
		assume	addr:absolute
		asl		fwd24       ; lab -> ab
		assume	addr:direct
		asl		$123456     ; lab -> zp
		assume	addr:direct
		asl		bak24       ; lab -> zp
		assume	addr:direct
		asl		fwd24       ; lab -> zp

		; labx

		assume	addr:absolute
		asl		$123456,x   ; labx -> abx
		assume	addr:absolute
		asl		bak24,x     ; labx -> abx
		assume	addr:absolute
		asl		fwd24,x     ; labx -> abx
		assume	addr:direct
		asl		$123456,x   ; labx -> zpx
		assume	addr:direct
		asl		bak24,x     ; labx -> zpx
		assume	addr:direct
		asl		fwd24,x     ; labx -> zpx

		; lpcr

		assume	addr:absolute
		asl		+           ; lpcr -> ab
		assume	addr:absolute
		asl		-           ; lpcr -> ab
		assume	addr:direct
		asl		+           ; lpcr -> zp
		assume	addr:direct
		asl		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		asl		+           ; pcr -> ab
		assume	addr:absolute
		asl		-           ; pcr -> ab
		assume	addr:direct
		asl		+           ; pcr -> zp
		assume	addr:direct
		asl		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		asl		$12         ; zp -> ab
		assume	addr:absolute
		asl		bakbyt      ; zp -> ab
		assume	addr:absolute
		asl		fwdbyt      ; zp -> ab
		assume	addr:direct
		asl		$12         ; zp -> zp
		assume	addr:direct
		asl		bakbyt      ; zp -> zp
		assume	addr:direct
		asl		fwdbyt      ; zp -> zp

		; zpx

		assume	addr:absolute
		asl		$12,x       ; zpx -> abx
		assume	addr:absolute
		asl		bakbyt,x    ; zpx -> abx
		assume	addr:absolute
		asl		fwdbyt,x    ; zpx -> abx
		assume	addr:direct
		asl		$12,x       ; zpx -> zpx
		assume	addr:direct
		asl		bakbyt,x    ; zpx -> zpx
		assume	addr:direct
		asl		fwdbyt,x    ; zpx -> zpx

 +

		; check:
		; BCC
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BVC
		; BVS

 -
 +

		; check:
		; BIT
		; LDY

 -
		; ab

		assume	addr:absolute
		bit		$1234       ; ab -> ab
		assume	addr:absolute
		bit		bakwrd      ; ab -> ab
		assume	addr:absolute
		bit		fwdwrd      ; ab -> ab
		assume	addr:direct
		bit		$1234       ; ab -> zp
		assume	addr:direct
		bit		bakwrd      ; ab -> zp
		assume	addr:direct
		bit		fwdwrd      ; ab -> zp

		; abx

		assume	addr:absolute
		bit		$1234,x     ; abx -> abx
		assume	addr:absolute
		bit		bakwrd,x    ; abx -> abx
		assume	addr:absolute
		bit		fwdwrd,x    ; abx -> abx
		assume	addr:direct
		bit		$1234,x     ; abx -> zpx
		assume	addr:direct
		bit		bakwrd,x    ; abx -> zpx
		assume	addr:direct
		bit		fwdwrd,x    ; abx -> zpx

		; lab

		assume	addr:absolute
		bit		$123456     ; lab -> ab
		assume	addr:absolute
		bit		bak24       ; lab -> ab
		assume	addr:absolute
		bit		fwd24       ; lab -> ab
		assume	addr:direct
		bit		$123456     ; lab -> zp
		assume	addr:direct
		bit		bak24       ; lab -> zp
		assume	addr:direct
		bit		fwd24       ; lab -> zp

		; labx

		assume	addr:absolute
		bit		$123456,x   ; labx -> abx
		assume	addr:absolute
		bit		bak24,x     ; labx -> abx
		assume	addr:absolute
		bit		fwd24,x     ; labx -> abx
		assume	addr:direct
		bit		$123456,x   ; labx -> zpx
		assume	addr:direct
		bit		bak24,x     ; labx -> zpx
		assume	addr:direct
		bit		fwd24,x     ; labx -> zpx

		; lpcr

		assume	addr:absolute
		bit		+           ; lpcr -> ab
		assume	addr:absolute
		bit		-           ; lpcr -> ab
		assume	addr:direct
		bit		+           ; lpcr -> zp
		assume	addr:direct
		bit		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		bit		+           ; pcr -> ab
		assume	addr:absolute
		bit		-           ; pcr -> ab
		assume	addr:direct
		bit		+           ; pcr -> zp
		assume	addr:direct
		bit		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		bit		$12         ; zp -> ab
		assume	addr:absolute
		bit		bakbyt      ; zp -> ab
		assume	addr:absolute
		bit		fwdbyt      ; zp -> ab
		assume	addr:direct
		bit		$12         ; zp -> zp
		assume	addr:direct
		bit		bakbyt      ; zp -> zp
		assume	addr:direct
		bit		fwdbyt      ; zp -> zp

		; zpx

		assume	addr:absolute
		bit		$12,x       ; zpx -> abx
		assume	addr:absolute
		bit		bakbyt,x    ; zpx -> abx
		assume	addr:absolute
		bit		fwdbyt,x    ; zpx -> abx
		assume	addr:direct
		bit		$12,x       ; zpx -> zpx
		assume	addr:direct
		bit		bakbyt,x    ; zpx -> zpx
		assume	addr:direct
		bit		fwdbyt,x    ; zpx -> zpx

 +

		; check:
		; BRK
		; WDM

 -
		; ab

		assume	addr:direct
		brk		$1234       ; ab -> zp
		assume	addr:direct
		brk		bakwrd      ; ab -> zp
		assume	addr:direct
		brk		fwdwrd      ; ab -> zp

		; lab

		assume	addr:direct
		brk		$123456     ; lab -> zp
		assume	addr:direct
		brk		bak24       ; lab -> zp
		assume	addr:direct
		brk		fwd24       ; lab -> zp

		; lpcr

		assume	addr:direct
		brk		+           ; lpcr -> zp
		assume	addr:direct
		brk		-           ; lpcr -> zp

		; pcr

		assume	addr:direct
		brk		+           ; pcr -> zp
		assume	addr:direct
		brk		-           ; pcr -> zp

		; zp

		assume	addr:direct
		brk		$12         ; zp -> zp
		assume	addr:direct
		brk		bakbyt      ; zp -> zp
		assume	addr:direct
		brk		fwdbyt      ; zp -> zp

 +

		; check:
		; BRL
		; PER

 -
 +

		; check:
		; CLC
		; CLD
		; CLI
		; CLV
		; DEA
		; DEX
		; DEY
		; INA
		; INX
		; INY
		; NOP
		; PHA
		; PHB
		; PHD
		; PHK
		; PHP
		; PHX
		; PHY
		; PLA
		; PLB
		; PLD
		; PLP
		; PLX
		; PLY
		; RTI
		; RTL
		; RTS
		; SEC
		; SED
		; SEI
		; STP
		; SWA
		; TAD
		; TAS
		; TAX
		; TAY
		; TCD
		; TCS
		; TDA
		; TDC
		; TSA
		; TSC
		; TSX
		; TXA
		; TXS
		; TXY
		; TYA
		; TYX
		; WAI
		; XBA
		; XCE

 -
 +

		; check:
		; COP

 -
		; ab

		assume	addr:direct
		cop		$1234       ; ab -> zp
		assume	addr:direct
		cop		bakwrd      ; ab -> zp
		assume	addr:direct
		cop		fwdwrd      ; ab -> zp

		; lab

		assume	addr:direct
		cop		$123456     ; lab -> zp
		assume	addr:direct
		cop		bak24       ; lab -> zp
		assume	addr:direct
		cop		fwd24       ; lab -> zp

		; lpcr

		assume	addr:direct
		cop		+           ; lpcr -> zp
		assume	addr:direct
		cop		-           ; lpcr -> zp

		; pcr

		assume	addr:direct
		cop		+           ; pcr -> zp
		assume	addr:direct
		cop		-           ; pcr -> zp

		; zp

		assume	addr:direct
		cop		$12         ; zp -> zp
		assume	addr:direct
		cop		bakbyt      ; zp -> zp
		assume	addr:direct
		cop		fwdbyt      ; zp -> zp

 +

		; check:
		; CPX
		; CPY

 -
		; ab

		assume	addr:absolute
		cpx		$1234       ; ab -> ab
		assume	addr:absolute
		cpx		bakwrd      ; ab -> ab
		assume	addr:absolute
		cpx		fwdwrd      ; ab -> ab
		assume	addr:direct
		cpx		$1234       ; ab -> zp
		assume	addr:direct
		cpx		bakwrd      ; ab -> zp
		assume	addr:direct
		cpx		fwdwrd      ; ab -> zp

		; lab

		assume	addr:absolute
		cpx		$123456     ; lab -> ab
		assume	addr:absolute
		cpx		bak24       ; lab -> ab
		assume	addr:absolute
		cpx		fwd24       ; lab -> ab
		assume	addr:direct
		cpx		$123456     ; lab -> zp
		assume	addr:direct
		cpx		bak24       ; lab -> zp
		assume	addr:direct
		cpx		fwd24       ; lab -> zp

		; lpcr

		assume	addr:absolute
		cpx		+           ; lpcr -> ab
		assume	addr:absolute
		cpx		-           ; lpcr -> ab
		assume	addr:direct
		cpx		+           ; lpcr -> zp
		assume	addr:direct
		cpx		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		cpx		+           ; pcr -> ab
		assume	addr:absolute
		cpx		-           ; pcr -> ab
		assume	addr:direct
		cpx		+           ; pcr -> zp
		assume	addr:direct
		cpx		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		cpx		$12         ; zp -> ab
		assume	addr:absolute
		cpx		bakbyt      ; zp -> ab
		assume	addr:absolute
		cpx		fwdbyt      ; zp -> ab
		assume	addr:direct
		cpx		$12         ; zp -> zp
		assume	addr:direct
		cpx		bakbyt      ; zp -> zp
		assume	addr:direct
		cpx		fwdbyt      ; zp -> zp

 +

		; check:
		; JML

 -
		; ab

		assume	addr:long
		jml		$1234       ; ab -> lab
		assume	addr:long
		jml		bakwrd      ; ab -> lab
		assume	addr:long
		jml		fwdwrd      ; ab -> lab

		; abi

		assume	addr:long
		jml		($1234)     ; abi -> labi
		assume	addr:long
		jml		(bakwrd)    ; abi -> labi
		assume	addr:long
		jml		(fwdwrd)    ; abi -> labi
		assume	addr:absolute
		jml		($1234)     ; abi -> abi
		assume	addr:absolute
		jml		(bakwrd)    ; abi -> abi
		assume	addr:absolute
		jml		(fwdwrd)    ; abi -> abi

		; lab

		assume	addr:long
		jml		$123456     ; lab -> lab
		assume	addr:long
		jml		bak24       ; lab -> lab
		assume	addr:long
		jml		fwd24       ; lab -> lab

		; labi

		assume	addr:long
		jml		($1234)     ; labi -> labi
		assume	addr:long
		jml		(bakwrd)    ; labi -> labi
		assume	addr:long
		jml		(fwdwrd)    ; labi -> labi
		assume	addr:absolute
		jml		($1234)     ; labi -> abi
		assume	addr:absolute
		jml		(bakwrd)    ; labi -> abi
		assume	addr:absolute
		jml		(fwdwrd)    ; labi -> abi

		; lpcr

		assume	addr:long
		jml		+           ; lpcr -> lab
		assume	addr:long
		jml		-           ; lpcr -> lab

		; pcr

		assume	addr:long
		jml		+           ; pcr -> lab
		assume	addr:long
		jml		-           ; pcr -> lab

		; zp

		assume	addr:long
		jml		$12         ; zp -> lab
		assume	addr:long
		jml		bakbyt      ; zp -> lab
		assume	addr:long
		jml		fwdbyt      ; zp -> lab

		; zpi

		assume	addr:long
		jml		($12)       ; zpi -> labi
		assume	addr:long
		jml		(bakbyt)    ; zpi -> labi
		assume	addr:long
		jml		(fwdbyt)    ; zpi -> labi
		assume	addr:absolute
		jml		($12)       ; zpi -> abi
		assume	addr:absolute
		jml		(bakbyt)    ; zpi -> abi
		assume	addr:absolute
		jml		(fwdbyt)    ; zpi -> abi

 +

		; check:
		; JMP

 -
		; ab

		assume	addr:long
		jmp		$1234       ; ab -> lab
		assume	addr:long
		jmp		bakwrd      ; ab -> lab
		assume	addr:long
		jmp		fwdwrd      ; ab -> lab
		assume	addr:absolute
		jmp		$1234       ; ab -> ab
		assume	addr:absolute
		jmp		bakwrd      ; ab -> ab
		assume	addr:absolute
		jmp		fwdwrd      ; ab -> ab

		; abi

		assume	addr:long
		jmp		($1234)     ; abi -> labi
		assume	addr:long
		jmp		(bakwrd)    ; abi -> labi
		assume	addr:long
		jmp		(fwdwrd)    ; abi -> labi
		assume	addr:absolute
		jmp		($1234)     ; abi -> abi
		assume	addr:absolute
		jmp		(bakwrd)    ; abi -> abi
		assume	addr:absolute
		jmp		(fwdwrd)    ; abi -> abi

		; abxi

		assume	addr:absolute
		jmp		($1234,x)   ; abxi -> abxi
		assume	addr:absolute
		jmp		(bakwrd,x)  ; abxi -> abxi
		assume	addr:absolute
		jmp		(fwdwrd,x)  ; abxi -> abxi

		; lab

		assume	addr:long
		jmp		$123456     ; lab -> lab
		assume	addr:long
		jmp		bak24       ; lab -> lab
		assume	addr:long
		jmp		fwd24       ; lab -> lab
		assume	addr:absolute
		jmp		$123456     ; lab -> ab
		assume	addr:absolute
		jmp		bak24       ; lab -> ab
		assume	addr:absolute
		jmp		fwd24       ; lab -> ab

		; labi

		assume	addr:long
		jmp		($1234)     ; labi -> labi
		assume	addr:long
		jmp		(bakwrd)    ; labi -> labi
		assume	addr:long
		jmp		(fwdwrd)    ; labi -> labi
		assume	addr:absolute
		jmp		($1234)     ; labi -> abi
		assume	addr:absolute
		jmp		(bakwrd)    ; labi -> abi
		assume	addr:absolute
		jmp		(fwdwrd)    ; labi -> abi

		; lpcr

		assume	addr:long
		jmp		+           ; lpcr -> lab
		assume	addr:long
		jmp		-           ; lpcr -> lab
		assume	addr:absolute
		jmp		+           ; lpcr -> ab
		assume	addr:absolute
		jmp		-           ; lpcr -> ab

		; pcr

		assume	addr:long
		jmp		+           ; pcr -> lab
		assume	addr:long
		jmp		-           ; pcr -> lab
		assume	addr:absolute
		jmp		+           ; pcr -> ab
		assume	addr:absolute
		jmp		-           ; pcr -> ab

		; zp

		assume	addr:long
		jmp		$12         ; zp -> lab
		assume	addr:long
		jmp		bakbyt      ; zp -> lab
		assume	addr:long
		jmp		fwdbyt      ; zp -> lab
		assume	addr:absolute
		jmp		$12         ; zp -> ab
		assume	addr:absolute
		jmp		bakbyt      ; zp -> ab
		assume	addr:absolute
		jmp		fwdbyt      ; zp -> ab

		; zpi

		assume	addr:long
		jmp		($12)       ; zpi -> labi
		assume	addr:long
		jmp		(bakbyt)    ; zpi -> labi
		assume	addr:long
		jmp		(fwdbyt)    ; zpi -> labi
		assume	addr:absolute
		jmp		($12)       ; zpi -> abi
		assume	addr:absolute
		jmp		(bakbyt)    ; zpi -> abi
		assume	addr:absolute
		jmp		(fwdbyt)    ; zpi -> abi

		; zpxi

		assume	addr:absolute
		jmp		($12,x)     ; zpxi -> abxi
		assume	addr:absolute
		jmp		(bakbyt,x)  ; zpxi -> abxi
		assume	addr:absolute
		jmp		(fwdbyt,x)  ; zpxi -> abxi

 +

		; check:
		; JSL

 -
		; ab

		assume	addr:long
		jsl		$1234       ; ab -> lab
		assume	addr:long
		jsl		bakwrd      ; ab -> lab
		assume	addr:long
		jsl		fwdwrd      ; ab -> lab

		; lab

		assume	addr:long
		jsl		$123456     ; lab -> lab
		assume	addr:long
		jsl		bak24       ; lab -> lab
		assume	addr:long
		jsl		fwd24       ; lab -> lab

		; lpcr

		assume	addr:long
		jsl		+           ; lpcr -> lab
		assume	addr:long
		jsl		-           ; lpcr -> lab

		; pcr

		assume	addr:long
		jsl		+           ; pcr -> lab
		assume	addr:long
		jsl		-           ; pcr -> lab

		; zp

		assume	addr:long
		jsl		$12         ; zp -> lab
		assume	addr:long
		jsl		bakbyt      ; zp -> lab
		assume	addr:long
		jsl		fwdbyt      ; zp -> lab

 +

		; check:
		; JSR

 -
		; ab

		assume	addr:long
		jsr		$1234       ; ab -> lab
		assume	addr:long
		jsr		bakwrd      ; ab -> lab
		assume	addr:long
		jsr		fwdwrd      ; ab -> lab
		assume	addr:absolute
		jsr		$1234       ; ab -> ab
		assume	addr:absolute
		jsr		bakwrd      ; ab -> ab
		assume	addr:absolute
		jsr		fwdwrd      ; ab -> ab

		; abxi

		assume	addr:absolute
		jsr		($1234,x)   ; abxi -> abxi
		assume	addr:absolute
		jsr		(bakwrd,x)  ; abxi -> abxi
		assume	addr:absolute
		jsr		(fwdwrd,x)  ; abxi -> abxi

		; lab

		assume	addr:long
		jsr		$123456     ; lab -> lab
		assume	addr:long
		jsr		bak24       ; lab -> lab
		assume	addr:long
		jsr		fwd24       ; lab -> lab
		assume	addr:absolute
		jsr		$123456     ; lab -> ab
		assume	addr:absolute
		jsr		bak24       ; lab -> ab
		assume	addr:absolute
		jsr		fwd24       ; lab -> ab

		; lpcr

		assume	addr:long
		jsr		+           ; lpcr -> lab
		assume	addr:long
		jsr		-           ; lpcr -> lab
		assume	addr:absolute
		jsr		+           ; lpcr -> ab
		assume	addr:absolute
		jsr		-           ; lpcr -> ab

		; pcr

		assume	addr:long
		jsr		+           ; pcr -> lab
		assume	addr:long
		jsr		-           ; pcr -> lab
		assume	addr:absolute
		jsr		+           ; pcr -> ab
		assume	addr:absolute
		jsr		-           ; pcr -> ab

		; zp

		assume	addr:long
		jsr		$12         ; zp -> lab
		assume	addr:long
		jsr		bakbyt      ; zp -> lab
		assume	addr:long
		jsr		fwdbyt      ; zp -> lab
		assume	addr:absolute
		jsr		$12         ; zp -> ab
		assume	addr:absolute
		jsr		bakbyt      ; zp -> ab
		assume	addr:absolute
		jsr		fwdbyt      ; zp -> ab

		; zpxi

		assume	addr:absolute
		jsr		($12,x)     ; zpxi -> abxi
		assume	addr:absolute
		jsr		(bakbyt,x)  ; zpxi -> abxi
		assume	addr:absolute
		jsr		(fwdbyt,x)  ; zpxi -> abxi

 +

		; check:
		; LDX

 -
		; ab

		assume	addr:absolute
		ldx		$1234       ; ab -> ab
		assume	addr:absolute
		ldx		bakwrd      ; ab -> ab
		assume	addr:absolute
		ldx		fwdwrd      ; ab -> ab
		assume	addr:direct
		ldx		$1234       ; ab -> zp
		assume	addr:direct
		ldx		bakwrd      ; ab -> zp
		assume	addr:direct
		ldx		fwdwrd      ; ab -> zp

		; aby

		assume	addr:absolute
		ldx		$1234,y     ; aby -> aby
		assume	addr:absolute
		ldx		bakwrd,y    ; aby -> aby
		assume	addr:absolute
		ldx		fwdwrd,y    ; aby -> aby
		assume	addr:direct
		ldx		$1234,y     ; aby -> zpy
		assume	addr:direct
		ldx		bakwrd,y    ; aby -> zpy
		assume	addr:direct
		ldx		fwdwrd,y    ; aby -> zpy

		; lab

		assume	addr:absolute
		ldx		$123456     ; lab -> ab
		assume	addr:absolute
		ldx		bak24       ; lab -> ab
		assume	addr:absolute
		ldx		fwd24       ; lab -> ab
		assume	addr:direct
		ldx		$123456     ; lab -> zp
		assume	addr:direct
		ldx		bak24       ; lab -> zp
		assume	addr:direct
		ldx		fwd24       ; lab -> zp

		; lpcr

		assume	addr:absolute
		ldx		+           ; lpcr -> ab
		assume	addr:absolute
		ldx		-           ; lpcr -> ab
		assume	addr:direct
		ldx		+           ; lpcr -> zp
		assume	addr:direct
		ldx		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		ldx		+           ; pcr -> ab
		assume	addr:absolute
		ldx		-           ; pcr -> ab
		assume	addr:direct
		ldx		+           ; pcr -> zp
		assume	addr:direct
		ldx		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		ldx		$12         ; zp -> ab
		assume	addr:absolute
		ldx		bakbyt      ; zp -> ab
		assume	addr:absolute
		ldx		fwdbyt      ; zp -> ab
		assume	addr:direct
		ldx		$12         ; zp -> zp
		assume	addr:direct
		ldx		bakbyt      ; zp -> zp
		assume	addr:direct
		ldx		fwdbyt      ; zp -> zp

		; zpy

		assume	addr:absolute
		ldx		$12,y       ; zpy -> aby
		assume	addr:absolute
		ldx		bakbyt,y    ; zpy -> aby
		assume	addr:absolute
		ldx		fwdbyt,y    ; zpy -> aby
		assume	addr:direct
		ldx		$12,y       ; zpy -> zpy
		assume	addr:direct
		ldx		bakbyt,y    ; zpy -> zpy
		assume	addr:direct
		ldx		fwdbyt,y    ; zpy -> zpy

 +

		; check:
		; MVN
		; MVP

 -
 +

		; check:
		; PEA

 -
		; ab

		assume	addr:absolute
		pea		$1234       ; ab -> ab
		assume	addr:absolute
		pea		bakwrd      ; ab -> ab
		assume	addr:absolute
		pea		fwdwrd      ; ab -> ab

		; lab

		assume	addr:absolute
		pea		$123456     ; lab -> ab
		assume	addr:absolute
		pea		bak24       ; lab -> ab
		assume	addr:absolute
		pea		fwd24       ; lab -> ab

		; lpcr

		assume	addr:absolute
		pea		+           ; lpcr -> ab
		assume	addr:absolute
		pea		-           ; lpcr -> ab

		; pcr

		assume	addr:absolute
		pea		+           ; pcr -> ab
		assume	addr:absolute
		pea		-           ; pcr -> ab

		; zp

		assume	addr:absolute
		pea		$12         ; zp -> ab
		assume	addr:absolute
		pea		bakbyt      ; zp -> ab
		assume	addr:absolute
		pea		fwdbyt      ; zp -> ab

 +

		; check:
		; PEI

 -
		; ab

		assume	addr:direct
		pei		$1234       ; ab -> zp
		assume	addr:direct
		pei		bakwrd      ; ab -> zp
		assume	addr:direct
		pei		fwdwrd      ; ab -> zp

		; abi

		assume	addr:direct
		pei		($1234)     ; abi -> zpi
		assume	addr:direct
		pei		(bakwrd)    ; abi -> zpi
		assume	addr:direct
		pei		(fwdwrd)    ; abi -> zpi

		; lab

		assume	addr:direct
		pei		$123456     ; lab -> zp
		assume	addr:direct
		pei		bak24       ; lab -> zp
		assume	addr:direct
		pei		fwd24       ; lab -> zp

		; labi

		assume	addr:direct
		pei		($1234)     ; labi -> zpi
		assume	addr:direct
		pei		(bakwrd)    ; labi -> zpi
		assume	addr:direct
		pei		(fwdwrd)    ; labi -> zpi

		; lpcr

		assume	addr:direct
		pei		+           ; lpcr -> zp
		assume	addr:direct
		pei		-           ; lpcr -> zp

		; pcr

		assume	addr:direct
		pei		+           ; pcr -> zp
		assume	addr:direct
		pei		-           ; pcr -> zp

		; zp

		assume	addr:direct
		pei		$12         ; zp -> zp
		assume	addr:direct
		pei		bakbyt      ; zp -> zp
		assume	addr:direct
		pei		fwdbyt      ; zp -> zp

		; zpi

		assume	addr:direct
		pei		($12)       ; zpi -> zpi
		assume	addr:direct
		pei		(bakbyt)    ; zpi -> zpi
		assume	addr:direct
		pei		(fwdbyt)    ; zpi -> zpi

 +

		; check:
		; REP
		; SEP

 -
 +

		; check:
		; STA

 -
		; ab

		assume	addr:long
		sta		$1234       ; ab -> lab
		assume	addr:long
		sta		bakwrd      ; ab -> lab
		assume	addr:long
		sta		fwdwrd      ; ab -> lab
		assume	addr:absolute
		sta		$1234       ; ab -> ab
		assume	addr:absolute
		sta		bakwrd      ; ab -> ab
		assume	addr:absolute
		sta		fwdwrd      ; ab -> ab
		assume	addr:direct
		sta		$1234       ; ab -> zp
		assume	addr:direct
		sta		bakwrd      ; ab -> zp
		assume	addr:direct
		sta		fwdwrd      ; ab -> zp

		; abi

		assume	addr:long
		sta		($1234)     ; abi -> lzpi
		assume	addr:long
		sta		(bakwrd)    ; abi -> lzpi
		assume	addr:long
		sta		(fwdwrd)    ; abi -> lzpi
		assume	addr:direct
		sta		($1234)     ; abi -> zpi
		assume	addr:direct
		sta		(bakwrd)    ; abi -> zpi
		assume	addr:direct
		sta		(fwdwrd)    ; abi -> zpi

		; abx

		assume	addr:long
		sta		$1234,x     ; abx -> labx
		assume	addr:long
		sta		bakwrd,x    ; abx -> labx
		assume	addr:long
		sta		fwdwrd,x    ; abx -> labx
		assume	addr:absolute
		sta		$1234,x     ; abx -> abx
		assume	addr:absolute
		sta		bakwrd,x    ; abx -> abx
		assume	addr:absolute
		sta		fwdwrd,x    ; abx -> abx
		assume	addr:direct
		sta		$1234,x     ; abx -> zpx
		assume	addr:direct
		sta		bakwrd,x    ; abx -> zpx
		assume	addr:direct
		sta		fwdwrd,x    ; abx -> zpx

		; abxi

		assume	addr:direct
		sta		($1234,x)   ; abxi -> zpxi
		assume	addr:direct
		sta		(bakwrd,x)  ; abxi -> zpxi
		assume	addr:direct
		sta		(fwdwrd,x)  ; abxi -> zpxi

		; aby

		assume	addr:absolute
		sta		$1234,y     ; aby -> aby
		assume	addr:absolute
		sta		bakwrd,y    ; aby -> aby
		assume	addr:absolute
		sta		fwdwrd,y    ; aby -> aby

		; lab

		assume	addr:long
		sta		$123456     ; lab -> lab
		assume	addr:long
		sta		bak24       ; lab -> lab
		assume	addr:long
		sta		fwd24       ; lab -> lab
		assume	addr:absolute
		sta		$123456     ; lab -> ab
		assume	addr:absolute
		sta		bak24       ; lab -> ab
		assume	addr:absolute
		sta		fwd24       ; lab -> ab
		assume	addr:direct
		sta		$123456     ; lab -> zp
		assume	addr:direct
		sta		bak24       ; lab -> zp
		assume	addr:direct
		sta		fwd24       ; lab -> zp

		; labi

		assume	addr:long
		sta		($1234)     ; labi -> lzpi
		assume	addr:long
		sta		(bakwrd)    ; labi -> lzpi
		assume	addr:long
		sta		(fwdwrd)    ; labi -> lzpi
		assume	addr:direct
		sta		($1234)     ; labi -> zpi
		assume	addr:direct
		sta		(bakwrd)    ; labi -> zpi
		assume	addr:direct
		sta		(fwdwrd)    ; labi -> zpi

		; labx

		assume	addr:long
		sta		$123456,x   ; labx -> labx
		assume	addr:long
		sta		bak24,x     ; labx -> labx
		assume	addr:long
		sta		fwd24,x     ; labx -> labx
		assume	addr:absolute
		sta		$123456,x   ; labx -> abx
		assume	addr:absolute
		sta		bak24,x     ; labx -> abx
		assume	addr:absolute
		sta		fwd24,x     ; labx -> abx
		assume	addr:direct
		sta		$123456,x   ; labx -> zpx
		assume	addr:direct
		sta		bak24,x     ; labx -> zpx
		assume	addr:direct
		sta		fwd24,x     ; labx -> zpx

		; lpcr

		assume	addr:long
		sta		+           ; lpcr -> lab
		assume	addr:long
		sta		-           ; lpcr -> lab
		assume	addr:absolute
		sta		+           ; lpcr -> ab
		assume	addr:absolute
		sta		-           ; lpcr -> ab
		assume	addr:direct
		sta		+           ; lpcr -> zp
		assume	addr:direct
		sta		-           ; lpcr -> zp

		; lzpi

		assume	addr:long
		sta		[$12]       ; lzpi -> lzpi
		assume	addr:long
		sta		[bakbyt]    ; lzpi -> lzpi
		assume	addr:long
		sta		[fwdbyt]    ; lzpi -> lzpi
		assume	addr:direct
		sta		[$12]       ; lzpi -> zpi
		assume	addr:direct
		sta		[bakbyt]    ; lzpi -> zpi
		assume	addr:direct
		sta		[fwdbyt]    ; lzpi -> zpi

		; lzpiy

		assume	addr:long
		sta		[$12],y     ; lzpiy -> lzpiy
		assume	addr:long
		sta		[bakbyt],y  ; lzpiy -> lzpiy
		assume	addr:long
		sta		[fwdbyt],y  ; lzpiy -> lzpiy
		assume	addr:direct
		sta		[$12],y     ; lzpiy -> zpiy
		assume	addr:direct
		sta		[bakbyt],y  ; lzpiy -> zpiy
		assume	addr:direct
		sta		[fwdbyt],y  ; lzpiy -> zpiy

		; pcr

		assume	addr:long
		sta		+           ; pcr -> lab
		assume	addr:long
		sta		-           ; pcr -> lab
		assume	addr:absolute
		sta		+           ; pcr -> ab
		assume	addr:absolute
		sta		-           ; pcr -> ab
		assume	addr:direct
		sta		+           ; pcr -> zp
		assume	addr:direct
		sta		-           ; pcr -> zp

		; zp

		assume	addr:long
		sta		$12         ; zp -> lab
		assume	addr:long
		sta		bakbyt      ; zp -> lab
		assume	addr:long
		sta		fwdbyt      ; zp -> lab
		assume	addr:absolute
		sta		$12         ; zp -> ab
		assume	addr:absolute
		sta		bakbyt      ; zp -> ab
		assume	addr:absolute
		sta		fwdbyt      ; zp -> ab
		assume	addr:direct
		sta		$12         ; zp -> zp
		assume	addr:direct
		sta		bakbyt      ; zp -> zp
		assume	addr:direct
		sta		fwdbyt      ; zp -> zp

		; zpi

		assume	addr:long
		sta		($12)       ; zpi -> lzpi
		assume	addr:long
		sta		(bakbyt)    ; zpi -> lzpi
		assume	addr:long
		sta		(fwdbyt)    ; zpi -> lzpi
		assume	addr:direct
		sta		($12)       ; zpi -> zpi
		assume	addr:direct
		sta		(bakbyt)    ; zpi -> zpi
		assume	addr:direct
		sta		(fwdbyt)    ; zpi -> zpi

		; zpiy

		assume	addr:long
		sta		($12),y     ; zpiy -> lzpiy
		assume	addr:long
		sta		(bakbyt),y  ; zpiy -> lzpiy
		assume	addr:long
		sta		(fwdbyt),y  ; zpiy -> lzpiy
		assume	addr:direct
		sta		($12),y     ; zpiy -> zpiy
		assume	addr:direct
		sta		(bakbyt),y  ; zpiy -> zpiy
		assume	addr:direct
		sta		(fwdbyt),y  ; zpiy -> zpiy

		; zpx

		assume	addr:long
		sta		$12,x       ; zpx -> labx
		assume	addr:long
		sta		bakbyt,x    ; zpx -> labx
		assume	addr:long
		sta		fwdbyt,x    ; zpx -> labx
		assume	addr:absolute
		sta		$12,x       ; zpx -> abx
		assume	addr:absolute
		sta		bakbyt,x    ; zpx -> abx
		assume	addr:absolute
		sta		fwdbyt,x    ; zpx -> abx
		assume	addr:direct
		sta		$12,x       ; zpx -> zpx
		assume	addr:direct
		sta		bakbyt,x    ; zpx -> zpx
		assume	addr:direct
		sta		fwdbyt,x    ; zpx -> zpx

		; zpxi

		assume	addr:direct
		sta		($12,x)     ; zpxi -> zpxi
		assume	addr:direct
		sta		(bakbyt,x)  ; zpxi -> zpxi
		assume	addr:direct
		sta		(fwdbyt,x)  ; zpxi -> zpxi

		; zpy

		assume	addr:absolute
		sta		$12,y       ; zpy -> aby
		assume	addr:absolute
		sta		bakbyt,y    ; zpy -> aby
		assume	addr:absolute
		sta		fwdbyt,y    ; zpy -> aby

 +

		; check:
		; STX

 -
		; ab

		assume	addr:absolute
		stx		$1234       ; ab -> ab
		assume	addr:absolute
		stx		bakwrd      ; ab -> ab
		assume	addr:absolute
		stx		fwdwrd      ; ab -> ab
		assume	addr:direct
		stx		$1234       ; ab -> zp
		assume	addr:direct
		stx		bakwrd      ; ab -> zp
		assume	addr:direct
		stx		fwdwrd      ; ab -> zp

		; aby

		assume	addr:direct
		stx		$1234,y     ; aby -> zpy
		assume	addr:direct
		stx		bakwrd,y    ; aby -> zpy
		assume	addr:direct
		stx		fwdwrd,y    ; aby -> zpy

		; lab

		assume	addr:absolute
		stx		$123456     ; lab -> ab
		assume	addr:absolute
		stx		bak24       ; lab -> ab
		assume	addr:absolute
		stx		fwd24       ; lab -> ab
		assume	addr:direct
		stx		$123456     ; lab -> zp
		assume	addr:direct
		stx		bak24       ; lab -> zp
		assume	addr:direct
		stx		fwd24       ; lab -> zp

		; lpcr

		assume	addr:absolute
		stx		+           ; lpcr -> ab
		assume	addr:absolute
		stx		-           ; lpcr -> ab
		assume	addr:direct
		stx		+           ; lpcr -> zp
		assume	addr:direct
		stx		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		stx		+           ; pcr -> ab
		assume	addr:absolute
		stx		-           ; pcr -> ab
		assume	addr:direct
		stx		+           ; pcr -> zp
		assume	addr:direct
		stx		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		stx		$12         ; zp -> ab
		assume	addr:absolute
		stx		bakbyt      ; zp -> ab
		assume	addr:absolute
		stx		fwdbyt      ; zp -> ab
		assume	addr:direct
		stx		$12         ; zp -> zp
		assume	addr:direct
		stx		bakbyt      ; zp -> zp
		assume	addr:direct
		stx		fwdbyt      ; zp -> zp

		; zpy

		assume	addr:direct
		stx		$12,y       ; zpy -> zpy
		assume	addr:direct
		stx		bakbyt,y    ; zpy -> zpy
		assume	addr:direct
		stx		fwdbyt,y    ; zpy -> zpy

 +

		; check:
		; STY

 -
		; ab

		assume	addr:absolute
		sty		$1234       ; ab -> ab
		assume	addr:absolute
		sty		bakwrd      ; ab -> ab
		assume	addr:absolute
		sty		fwdwrd      ; ab -> ab
		assume	addr:direct
		sty		$1234       ; ab -> zp
		assume	addr:direct
		sty		bakwrd      ; ab -> zp
		assume	addr:direct
		sty		fwdwrd      ; ab -> zp

		; abx

		assume	addr:direct
		sty		$1234,x     ; abx -> zpx
		assume	addr:direct
		sty		bakwrd,x    ; abx -> zpx
		assume	addr:direct
		sty		fwdwrd,x    ; abx -> zpx

		; lab

		assume	addr:absolute
		sty		$123456     ; lab -> ab
		assume	addr:absolute
		sty		bak24       ; lab -> ab
		assume	addr:absolute
		sty		fwd24       ; lab -> ab
		assume	addr:direct
		sty		$123456     ; lab -> zp
		assume	addr:direct
		sty		bak24       ; lab -> zp
		assume	addr:direct
		sty		fwd24       ; lab -> zp

		; labx

		assume	addr:direct
		sty		$123456,x   ; labx -> zpx
		assume	addr:direct
		sty		bak24,x     ; labx -> zpx
		assume	addr:direct
		sty		fwd24,x     ; labx -> zpx

		; lpcr

		assume	addr:absolute
		sty		+           ; lpcr -> ab
		assume	addr:absolute
		sty		-           ; lpcr -> ab
		assume	addr:direct
		sty		+           ; lpcr -> zp
		assume	addr:direct
		sty		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		sty		+           ; pcr -> ab
		assume	addr:absolute
		sty		-           ; pcr -> ab
		assume	addr:direct
		sty		+           ; pcr -> zp
		assume	addr:direct
		sty		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		sty		$12         ; zp -> ab
		assume	addr:absolute
		sty		bakbyt      ; zp -> ab
		assume	addr:absolute
		sty		fwdbyt      ; zp -> ab
		assume	addr:direct
		sty		$12         ; zp -> zp
		assume	addr:direct
		sty		bakbyt      ; zp -> zp
		assume	addr:direct
		sty		fwdbyt      ; zp -> zp

		; zpx

		assume	addr:direct
		sty		$12,x       ; zpx -> zpx
		assume	addr:direct
		sty		bakbyt,x    ; zpx -> zpx
		assume	addr:direct
		sty		fwdbyt,x    ; zpx -> zpx

 +

		; check:
		; STZ

 -
		; ab

		assume	addr:absolute
		stz		$1234       ; ab -> ab
		assume	addr:absolute
		stz		bakwrd      ; ab -> ab
		assume	addr:absolute
		stz		fwdwrd      ; ab -> ab
		assume	addr:direct
		stz		$1234       ; ab -> zp
		assume	addr:direct
		stz		bakwrd      ; ab -> zp
		assume	addr:direct
		stz		fwdwrd      ; ab -> zp

		; abx

		assume	addr:absolute
		stz		$1234,x     ; abx -> abx
		assume	addr:absolute
		stz		bakwrd,x    ; abx -> abx
		assume	addr:absolute
		stz		fwdwrd,x    ; abx -> abx
		assume	addr:direct
		stz		$1234,x     ; abx -> zpx
		assume	addr:direct
		stz		bakwrd,x    ; abx -> zpx
		assume	addr:direct
		stz		fwdwrd,x    ; abx -> zpx

		; lab

		assume	addr:absolute
		stz		$123456     ; lab -> ab
		assume	addr:absolute
		stz		bak24       ; lab -> ab
		assume	addr:absolute
		stz		fwd24       ; lab -> ab
		assume	addr:direct
		stz		$123456     ; lab -> zp
		assume	addr:direct
		stz		bak24       ; lab -> zp
		assume	addr:direct
		stz		fwd24       ; lab -> zp

		; labx

		assume	addr:absolute
		stz		$123456,x   ; labx -> abx
		assume	addr:absolute
		stz		bak24,x     ; labx -> abx
		assume	addr:absolute
		stz		fwd24,x     ; labx -> abx
		assume	addr:direct
		stz		$123456,x   ; labx -> zpx
		assume	addr:direct
		stz		bak24,x     ; labx -> zpx
		assume	addr:direct
		stz		fwd24,x     ; labx -> zpx

		; lpcr

		assume	addr:absolute
		stz		+           ; lpcr -> ab
		assume	addr:absolute
		stz		-           ; lpcr -> ab
		assume	addr:direct
		stz		+           ; lpcr -> zp
		assume	addr:direct
		stz		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		stz		+           ; pcr -> ab
		assume	addr:absolute
		stz		-           ; pcr -> ab
		assume	addr:direct
		stz		+           ; pcr -> zp
		assume	addr:direct
		stz		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		stz		$12         ; zp -> ab
		assume	addr:absolute
		stz		bakbyt      ; zp -> ab
		assume	addr:absolute
		stz		fwdbyt      ; zp -> ab
		assume	addr:direct
		stz		$12         ; zp -> zp
		assume	addr:direct
		stz		bakbyt      ; zp -> zp
		assume	addr:direct
		stz		fwdbyt      ; zp -> zp

		; zpx

		assume	addr:absolute
		stz		$12,x       ; zpx -> abx
		assume	addr:absolute
		stz		bakbyt,x    ; zpx -> abx
		assume	addr:absolute
		stz		fwdbyt,x    ; zpx -> abx
		assume	addr:direct
		stz		$12,x       ; zpx -> zpx
		assume	addr:direct
		stz		bakbyt,x    ; zpx -> zpx
		assume	addr:direct
		stz		fwdbyt,x    ; zpx -> zpx

 +

		; check:
		; TRB
		; TSB

 -
		; ab

		assume	addr:absolute
		trb		$1234       ; ab -> ab
		assume	addr:absolute
		trb		bakwrd      ; ab -> ab
		assume	addr:absolute
		trb		fwdwrd      ; ab -> ab
		assume	addr:direct
		trb		$1234       ; ab -> zp
		assume	addr:direct
		trb		bakwrd      ; ab -> zp
		assume	addr:direct
		trb		fwdwrd      ; ab -> zp

		; lab

		assume	addr:absolute
		trb		$123456     ; lab -> ab
		assume	addr:absolute
		trb		bak24       ; lab -> ab
		assume	addr:absolute
		trb		fwd24       ; lab -> ab
		assume	addr:direct
		trb		$123456     ; lab -> zp
		assume	addr:direct
		trb		bak24       ; lab -> zp
		assume	addr:direct
		trb		fwd24       ; lab -> zp

		; lpcr

		assume	addr:absolute
		trb		+           ; lpcr -> ab
		assume	addr:absolute
		trb		-           ; lpcr -> ab
		assume	addr:direct
		trb		+           ; lpcr -> zp
		assume	addr:direct
		trb		-           ; lpcr -> zp

		; pcr

		assume	addr:absolute
		trb		+           ; pcr -> ab
		assume	addr:absolute
		trb		-           ; pcr -> ab
		assume	addr:direct
		trb		+           ; pcr -> zp
		assume	addr:direct
		trb		-           ; pcr -> zp

		; zp

		assume	addr:absolute
		trb		$12         ; zp -> ab
		assume	addr:absolute
		trb		bakbyt      ; zp -> ab
		assume	addr:absolute
		trb		fwdbyt      ; zp -> ab
		assume	addr:direct
		trb		$12         ; zp -> zp
		assume	addr:direct
		trb		bakbyt      ; zp -> zp
		assume	addr:direct
		trb		fwdbyt      ; zp -> zp

 +

; forward reference

fwdbyt	.equ	$12
fwdwrd	.equ	$1234
fwd24	.equ	$123456
fwd24b	.equ	$789ABC

; -------------------------------

		.end
