; Hobby Cross-Assembler Processor Error Test 040g
; W65C816S\Instruction Set
; error: illegal forced address modes

; generated by MODE65.AWK - Thu Jul 12 12:06:21 2007

; warning(s):

; error(s): 4195
; - illegal address mode

; fatal:

; -------------------------------

		.listfile
		.errfile
		.maxerr	5000		; increase default count

; -------------------------------

        .cpu    "W65C816S"  ; required psop
        .org    $1000       ; required psop

; -------------------------------

; backward reference

bakbyt	.equ	$12
bakwrd	.equ	$1234
bak24	.equ	$123456
bak24b	.equ	$789ABC

		; check:
		; ADC
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

 -
		; abi

		assume	addr:absolute
		adc		($1234)     ; abi -> ab*
		assume	addr:absolute
		adc		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		adc		(fwdwrd)    ; abi -> ab*

		; abxi

		assume	addr:long
		adc		($1234,x)   ; abxi -> l*
		assume	addr:long
		adc		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		adc		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		adc		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		adc		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		adc		(fwdwrd,x)  ; abxi -> ab*

		; aby

		assume	addr:long
		adc		$1234,y     ; aby -> l*
		assume	addr:long
		adc		bakwrd,y    ; aby -> l*
		assume	addr:long
		adc		fwdwrd,y    ; aby -> l*
		assume	addr:direct
		adc		$1234,y     ; aby -> zp*
		assume	addr:direct
		adc		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		adc		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		adc		A           ; acc -> l*
		assume	addr:long
		adc		a           ; acc -> l*
		assume	addr:absolute
		adc		A           ; acc -> ab*
		assume	addr:absolute
		adc		a           ; acc -> ab*
		assume	addr:direct
		adc		A           ; acc -> zp*
		assume	addr:direct
		adc		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		adc		            ; acc_i -> l*
		assume	addr:absolute
		adc		            ; acc_i -> ab*
		assume	addr:direct
		adc		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		adc		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		adc		bak24, bak24b ; bmv -> l*
		assume	addr:long
		adc		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		adc		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		adc		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		adc		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		adc		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		adc		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		adc		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		adc		#$12        ; imm -> l*
		assume	addr:long
		adc		#$1234      ; imm -> l*
		assume	addr:long
		adc		#bakbyt     ; imm -> l*
		assume	addr:long
		adc		#bakwrd     ; imm -> l*
		assume	addr:long
		adc		#fwdbyt     ; imm -> l*
		assume	addr:long
		adc		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		adc		#$12        ; imm -> ab*
		assume	addr:absolute
		adc		#$1234      ; imm -> ab*
		assume	addr:absolute
		adc		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		adc		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		adc		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		adc		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		adc		#$12        ; imm -> zp*
		assume	addr:direct
		adc		#$1234      ; imm -> zp*
		assume	addr:direct
		adc		#bakbyt     ; imm -> zp*
		assume	addr:direct
		adc		#bakwrd     ; imm -> zp*
		assume	addr:direct
		adc		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		adc		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		adc		            ; imp -> l*
		assume	addr:absolute
		adc		            ; imp -> ab*
		assume	addr:direct
		adc		            ; imp -> zp*

		; labi

		assume	addr:absolute
		adc		($1234)     ; labi -> ab*
		assume	addr:absolute
		adc		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		adc		(fwdwrd)    ; labi -> ab*

		; lzpi

		assume	addr:absolute
		adc		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		adc		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		adc		[fwdbyt]    ; lzpi -> ab*

		; lzpiy

		assume	addr:absolute
		adc		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		adc		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		adc		[fwdbyt],y  ; lzpiy -> ab*

		; sr

		assume	addr:long
		adc		$12,s       ; sr -> l*
		assume	addr:long
		adc		bakbyt,s    ; sr -> l*
		assume	addr:long
		adc		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		adc		$12,s       ; sr -> ab*
		assume	addr:absolute
		adc		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		adc		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		adc		$12,s       ; sr -> zp*
		assume	addr:direct
		adc		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		adc		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		adc		($12,s),y   ; sriy -> l*
		assume	addr:long
		adc		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		adc		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		adc		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		adc		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		adc		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		adc		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		adc		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		adc		(fwdbyt,s),y ; sriy -> zp*

		; zpi

		assume	addr:absolute
		adc		($12)       ; zpi -> ab*
		assume	addr:absolute
		adc		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		adc		(fwdbyt)    ; zpi -> ab*

		; zpiy

		assume	addr:absolute
		adc		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		adc		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		adc		(fwdbyt),y  ; zpiy -> ab*

		; zpxi

		assume	addr:long
		adc		($12,x)     ; zpxi -> l*
		assume	addr:long
		adc		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		adc		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		adc		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		adc		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		adc		(fwdbyt,x)  ; zpxi -> ab*

		; zpy

		assume	addr:long
		adc		$12,y       ; zpy -> l*
		assume	addr:long
		adc		bakbyt,y    ; zpy -> l*
		assume	addr:long
		adc		fwdbyt,y    ; zpy -> l*
		assume	addr:direct
		adc		$12,y       ; zpy -> zp*
		assume	addr:direct
		adc		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		adc		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; ASL
		; DEC
		; INC
		; LSR
		; ROL
		; ROR

 -
		; ab

		assume	addr:long
		asl		$1234       ; ab -> l*
		assume	addr:long
		asl		bakwrd      ; ab -> l*
		assume	addr:long
		asl		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		asl		($1234)     ; abi -> l*
		assume	addr:long
		asl		(bakwrd)    ; abi -> l*
		assume	addr:long
		asl		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		asl		($1234)     ; abi -> ab*
		assume	addr:absolute
		asl		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		asl		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		asl		($1234)     ; abi -> zp*
		assume	addr:direct
		asl		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		asl		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		asl		$1234,x     ; abx -> l*
		assume	addr:long
		asl		bakwrd,x    ; abx -> l*
		assume	addr:long
		asl		fwdwrd,x    ; abx -> l*

		; abxi

		assume	addr:long
		asl		($1234,x)   ; abxi -> l*
		assume	addr:long
		asl		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		asl		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		asl		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		asl		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		asl		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		asl		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		asl		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		asl		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		asl		$1234,y     ; aby -> l*
		assume	addr:long
		asl		bakwrd,y    ; aby -> l*
		assume	addr:long
		asl		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		asl		$1234,y     ; aby -> ab*
		assume	addr:absolute
		asl		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		asl		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		asl		$1234,y     ; aby -> zp*
		assume	addr:direct
		asl		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		asl		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		asl		A           ; acc -> l*
		assume	addr:long
		asl		a           ; acc -> l*
		assume	addr:absolute
		asl		A           ; acc -> ab*
		assume	addr:absolute
		asl		a           ; acc -> ab*
		assume	addr:direct
		asl		A           ; acc -> zp*
		assume	addr:direct
		asl		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		asl		            ; acc_i -> l*
		assume	addr:absolute
		asl		            ; acc_i -> ab*
		assume	addr:direct
		asl		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		asl		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		asl		bak24, bak24b ; bmv -> l*
		assume	addr:long
		asl		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		asl		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		asl		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		asl		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		asl		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		asl		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		asl		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		asl		#$12        ; imm -> l*
		assume	addr:long
		asl		#$1234      ; imm -> l*
		assume	addr:long
		asl		#bakbyt     ; imm -> l*
		assume	addr:long
		asl		#bakwrd     ; imm -> l*
		assume	addr:long
		asl		#fwdbyt     ; imm -> l*
		assume	addr:long
		asl		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		asl		#$12        ; imm -> ab*
		assume	addr:absolute
		asl		#$1234      ; imm -> ab*
		assume	addr:absolute
		asl		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		asl		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		asl		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		asl		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		asl		#$12        ; imm -> zp*
		assume	addr:direct
		asl		#$1234      ; imm -> zp*
		assume	addr:direct
		asl		#bakbyt     ; imm -> zp*
		assume	addr:direct
		asl		#bakwrd     ; imm -> zp*
		assume	addr:direct
		asl		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		asl		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		asl		            ; imp -> l*
		assume	addr:absolute
		asl		            ; imp -> ab*
		assume	addr:direct
		asl		            ; imp -> zp*

		; lab

		assume	addr:long
		asl		$123456     ; lab -> l*
		assume	addr:long
		asl		bak24       ; lab -> l*
		assume	addr:long
		asl		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		asl		($1234)     ; labi -> l*
		assume	addr:long
		asl		(bakwrd)    ; labi -> l*
		assume	addr:long
		asl		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		asl		($1234)     ; labi -> ab*
		assume	addr:absolute
		asl		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		asl		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		asl		($1234)     ; labi -> zp*
		assume	addr:direct
		asl		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		asl		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		asl		$123456,x   ; labx -> l*
		assume	addr:long
		asl		bak24,x     ; labx -> l*
		assume	addr:long
		asl		fwd24,x     ; labx -> l*

		; lpcr

		assume	addr:long
		asl		+           ; lpcr -> l*
		assume	addr:long
		asl		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		asl		[$12]       ; lzpi -> l*
		assume	addr:long
		asl		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		asl		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		asl		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		asl		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		asl		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		asl		[$12]       ; lzpi -> zp*
		assume	addr:direct
		asl		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		asl		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		asl		[$12],y     ; lzpiy -> l*
		assume	addr:long
		asl		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		asl		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		asl		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		asl		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		asl		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		asl		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		asl		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		asl		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		asl		+           ; pcr -> l*
		assume	addr:long
		asl		-           ; pcr -> l*

		; sr

		assume	addr:long
		asl		$12,s       ; sr -> l*
		assume	addr:long
		asl		bakbyt,s    ; sr -> l*
		assume	addr:long
		asl		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		asl		$12,s       ; sr -> ab*
		assume	addr:absolute
		asl		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		asl		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		asl		$12,s       ; sr -> zp*
		assume	addr:direct
		asl		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		asl		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		asl		($12,s),y   ; sriy -> l*
		assume	addr:long
		asl		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		asl		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		asl		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		asl		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		asl		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		asl		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		asl		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		asl		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		asl		$12         ; zp -> l*
		assume	addr:long
		asl		bakbyt      ; zp -> l*
		assume	addr:long
		asl		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		asl		($12)       ; zpi -> l*
		assume	addr:long
		asl		(bakbyt)    ; zpi -> l*
		assume	addr:long
		asl		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		asl		($12)       ; zpi -> ab*
		assume	addr:absolute
		asl		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		asl		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		asl		($12)       ; zpi -> zp*
		assume	addr:direct
		asl		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		asl		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		asl		($12),y     ; zpiy -> l*
		assume	addr:long
		asl		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		asl		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		asl		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		asl		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		asl		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		asl		($12),y     ; zpiy -> zp*
		assume	addr:direct
		asl		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		asl		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		asl		$12,x       ; zpx -> l*
		assume	addr:long
		asl		bakbyt,x    ; zpx -> l*
		assume	addr:long
		asl		fwdbyt,x    ; zpx -> l*

		; zpxi

		assume	addr:long
		asl		($12,x)     ; zpxi -> l*
		assume	addr:long
		asl		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		asl		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		asl		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		asl		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		asl		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		asl		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		asl		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		asl		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		asl		$12,y       ; zpy -> l*
		assume	addr:long
		asl		bakbyt,y    ; zpy -> l*
		assume	addr:long
		asl		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		asl		$12,y       ; zpy -> ab*
		assume	addr:absolute
		asl		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		asl		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		asl		$12,y       ; zpy -> zp*
		assume	addr:direct
		asl		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		asl		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; BCC
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BRA
		; BVC
		; BVS

 -
		; ab

		assume	addr:long
		bcc		$1234       ; ab -> l*
		assume	addr:long
		bcc		bakwrd      ; ab -> l*
		assume	addr:long
		bcc		fwdwrd      ; ab -> l*
		assume	addr:absolute
		bcc		$1234       ; ab -> ab*
		assume	addr:absolute
		bcc		bakwrd      ; ab -> ab*
		assume	addr:absolute
		bcc		fwdwrd      ; ab -> ab*
		assume	addr:direct
		bcc		$1234       ; ab -> zp*
		assume	addr:direct
		bcc		bakwrd      ; ab -> zp*
		assume	addr:direct
		bcc		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		bcc		($1234)     ; abi -> l*
		assume	addr:long
		bcc		(bakwrd)    ; abi -> l*
		assume	addr:long
		bcc		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		bcc		($1234)     ; abi -> ab*
		assume	addr:absolute
		bcc		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		bcc		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		bcc		($1234)     ; abi -> zp*
		assume	addr:direct
		bcc		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		bcc		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		bcc		$1234,x     ; abx -> l*
		assume	addr:long
		bcc		bakwrd,x    ; abx -> l*
		assume	addr:long
		bcc		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		bcc		$1234,x     ; abx -> ab*
		assume	addr:absolute
		bcc		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		bcc		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		bcc		$1234,x     ; abx -> zp*
		assume	addr:direct
		bcc		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		bcc		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		bcc		($1234,x)   ; abxi -> l*
		assume	addr:long
		bcc		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		bcc		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		bcc		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		bcc		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		bcc		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		bcc		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		bcc		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		bcc		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		bcc		$1234,y     ; aby -> l*
		assume	addr:long
		bcc		bakwrd,y    ; aby -> l*
		assume	addr:long
		bcc		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		bcc		$1234,y     ; aby -> ab*
		assume	addr:absolute
		bcc		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		bcc		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		bcc		$1234,y     ; aby -> zp*
		assume	addr:direct
		bcc		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		bcc		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		bcc		A           ; acc -> l*
		assume	addr:long
		bcc		a           ; acc -> l*
		assume	addr:absolute
		bcc		A           ; acc -> ab*
		assume	addr:absolute
		bcc		a           ; acc -> ab*
		assume	addr:direct
		bcc		A           ; acc -> zp*
		assume	addr:direct
		bcc		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		bcc		            ; acc_i -> l*
		assume	addr:absolute
		bcc		            ; acc_i -> ab*
		assume	addr:direct
		bcc		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		bcc		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		bcc		bak24, bak24b ; bmv -> l*
		assume	addr:long
		bcc		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		bcc		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		bcc		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		bcc		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		bcc		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		bcc		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		bcc		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		bcc		#$12        ; imm -> l*
		assume	addr:long
		bcc		#$1234      ; imm -> l*
		assume	addr:long
		bcc		#bakbyt     ; imm -> l*
		assume	addr:long
		bcc		#bakwrd     ; imm -> l*
		assume	addr:long
		bcc		#fwdbyt     ; imm -> l*
		assume	addr:long
		bcc		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		bcc		#$12        ; imm -> ab*
		assume	addr:absolute
		bcc		#$1234      ; imm -> ab*
		assume	addr:absolute
		bcc		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		bcc		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		bcc		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		bcc		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		bcc		#$12        ; imm -> zp*
		assume	addr:direct
		bcc		#$1234      ; imm -> zp*
		assume	addr:direct
		bcc		#bakbyt     ; imm -> zp*
		assume	addr:direct
		bcc		#bakwrd     ; imm -> zp*
		assume	addr:direct
		bcc		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		bcc		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		bcc		            ; imp -> l*
		assume	addr:absolute
		bcc		            ; imp -> ab*
		assume	addr:direct
		bcc		            ; imp -> zp*

		; lab

		assume	addr:long
		bcc		$123456     ; lab -> l*
		assume	addr:long
		bcc		bak24       ; lab -> l*
		assume	addr:long
		bcc		fwd24       ; lab -> l*
		assume	addr:absolute
		bcc		$123456     ; lab -> ab*
		assume	addr:absolute
		bcc		bak24       ; lab -> ab*
		assume	addr:absolute
		bcc		fwd24       ; lab -> ab*
		assume	addr:direct
		bcc		$123456     ; lab -> zp*
		assume	addr:direct
		bcc		bak24       ; lab -> zp*
		assume	addr:direct
		bcc		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		bcc		($1234)     ; labi -> l*
		assume	addr:long
		bcc		(bakwrd)    ; labi -> l*
		assume	addr:long
		bcc		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		bcc		($1234)     ; labi -> ab*
		assume	addr:absolute
		bcc		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		bcc		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		bcc		($1234)     ; labi -> zp*
		assume	addr:direct
		bcc		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		bcc		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		bcc		$123456,x   ; labx -> l*
		assume	addr:long
		bcc		bak24,x     ; labx -> l*
		assume	addr:long
		bcc		fwd24,x     ; labx -> l*
		assume	addr:absolute
		bcc		$123456,x   ; labx -> ab*
		assume	addr:absolute
		bcc		bak24,x     ; labx -> ab*
		assume	addr:absolute
		bcc		fwd24,x     ; labx -> ab*
		assume	addr:direct
		bcc		$123456,x   ; labx -> zp*
		assume	addr:direct
		bcc		bak24,x     ; labx -> zp*
		assume	addr:direct
		bcc		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		bcc		+           ; lpcr -> l*
		assume	addr:long
		bcc		-           ; lpcr -> l*
		assume	addr:absolute
		bcc		+           ; lpcr -> ab*
		assume	addr:absolute
		bcc		-           ; lpcr -> ab*
		assume	addr:direct
		bcc		+           ; lpcr -> zp*
		assume	addr:direct
		bcc		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		bcc		[$12]       ; lzpi -> l*
		assume	addr:long
		bcc		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		bcc		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		bcc		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		bcc		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		bcc		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		bcc		[$12]       ; lzpi -> zp*
		assume	addr:direct
		bcc		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		bcc		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		bcc		[$12],y     ; lzpiy -> l*
		assume	addr:long
		bcc		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		bcc		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		bcc		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		bcc		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		bcc		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		bcc		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		bcc		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		bcc		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		bcc		+           ; pcr -> l*
		assume	addr:long
		bcc		-           ; pcr -> l*
		assume	addr:absolute
		bcc		+           ; pcr -> ab*
		assume	addr:absolute
		bcc		-           ; pcr -> ab*
		assume	addr:direct
		bcc		+           ; pcr -> zp*
		assume	addr:direct
		bcc		-           ; pcr -> zp*

		; sr

		assume	addr:long
		bcc		$12,s       ; sr -> l*
		assume	addr:long
		bcc		bakbyt,s    ; sr -> l*
		assume	addr:long
		bcc		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		bcc		$12,s       ; sr -> ab*
		assume	addr:absolute
		bcc		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		bcc		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		bcc		$12,s       ; sr -> zp*
		assume	addr:direct
		bcc		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		bcc		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		bcc		($12,s),y   ; sriy -> l*
		assume	addr:long
		bcc		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		bcc		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		bcc		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		bcc		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		bcc		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		bcc		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		bcc		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		bcc		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		bcc		$12         ; zp -> l*
		assume	addr:long
		bcc		bakbyt      ; zp -> l*
		assume	addr:long
		bcc		fwdbyt      ; zp -> l*
		assume	addr:absolute
		bcc		$12         ; zp -> ab*
		assume	addr:absolute
		bcc		bakbyt      ; zp -> ab*
		assume	addr:absolute
		bcc		fwdbyt      ; zp -> ab*
		assume	addr:direct
		bcc		$12         ; zp -> zp*
		assume	addr:direct
		bcc		bakbyt      ; zp -> zp*
		assume	addr:direct
		bcc		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		bcc		($12)       ; zpi -> l*
		assume	addr:long
		bcc		(bakbyt)    ; zpi -> l*
		assume	addr:long
		bcc		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		bcc		($12)       ; zpi -> ab*
		assume	addr:absolute
		bcc		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		bcc		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		bcc		($12)       ; zpi -> zp*
		assume	addr:direct
		bcc		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		bcc		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		bcc		($12),y     ; zpiy -> l*
		assume	addr:long
		bcc		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		bcc		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		bcc		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		bcc		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		bcc		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		bcc		($12),y     ; zpiy -> zp*
		assume	addr:direct
		bcc		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		bcc		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		bcc		$12,x       ; zpx -> l*
		assume	addr:long
		bcc		bakbyt,x    ; zpx -> l*
		assume	addr:long
		bcc		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		bcc		$12,x       ; zpx -> ab*
		assume	addr:absolute
		bcc		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		bcc		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		bcc		$12,x       ; zpx -> zp*
		assume	addr:direct
		bcc		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		bcc		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		bcc		($12,x)     ; zpxi -> l*
		assume	addr:long
		bcc		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		bcc		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		bcc		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		bcc		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		bcc		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		bcc		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		bcc		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		bcc		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		bcc		$12,y       ; zpy -> l*
		assume	addr:long
		bcc		bakbyt,y    ; zpy -> l*
		assume	addr:long
		bcc		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		bcc		$12,y       ; zpy -> ab*
		assume	addr:absolute
		bcc		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		bcc		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		bcc		$12,y       ; zpy -> zp*
		assume	addr:direct
		bcc		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		bcc		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; BIT
		; LDY

 -
		; ab

		assume	addr:long
		bit		$1234       ; ab -> l*
		assume	addr:long
		bit		bakwrd      ; ab -> l*
		assume	addr:long
		bit		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		bit		($1234)     ; abi -> l*
		assume	addr:long
		bit		(bakwrd)    ; abi -> l*
		assume	addr:long
		bit		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		bit		($1234)     ; abi -> ab*
		assume	addr:absolute
		bit		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		bit		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		bit		($1234)     ; abi -> zp*
		assume	addr:direct
		bit		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		bit		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		bit		$1234,x     ; abx -> l*
		assume	addr:long
		bit		bakwrd,x    ; abx -> l*
		assume	addr:long
		bit		fwdwrd,x    ; abx -> l*

		; abxi

		assume	addr:long
		bit		($1234,x)   ; abxi -> l*
		assume	addr:long
		bit		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		bit		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		bit		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		bit		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		bit		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		bit		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		bit		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		bit		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		bit		$1234,y     ; aby -> l*
		assume	addr:long
		bit		bakwrd,y    ; aby -> l*
		assume	addr:long
		bit		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		bit		$1234,y     ; aby -> ab*
		assume	addr:absolute
		bit		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		bit		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		bit		$1234,y     ; aby -> zp*
		assume	addr:direct
		bit		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		bit		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		bit		A           ; acc -> l*
		assume	addr:long
		bit		a           ; acc -> l*
		assume	addr:absolute
		bit		A           ; acc -> ab*
		assume	addr:absolute
		bit		a           ; acc -> ab*
		assume	addr:direct
		bit		A           ; acc -> zp*
		assume	addr:direct
		bit		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		bit		            ; acc_i -> l*
		assume	addr:absolute
		bit		            ; acc_i -> ab*
		assume	addr:direct
		bit		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		bit		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		bit		bak24, bak24b ; bmv -> l*
		assume	addr:long
		bit		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		bit		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		bit		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		bit		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		bit		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		bit		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		bit		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		bit		#$12        ; imm -> l*
		assume	addr:long
		bit		#$1234      ; imm -> l*
		assume	addr:long
		bit		#bakbyt     ; imm -> l*
		assume	addr:long
		bit		#bakwrd     ; imm -> l*
		assume	addr:long
		bit		#fwdbyt     ; imm -> l*
		assume	addr:long
		bit		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		bit		#$12        ; imm -> ab*
		assume	addr:absolute
		bit		#$1234      ; imm -> ab*
		assume	addr:absolute
		bit		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		bit		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		bit		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		bit		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		bit		#$12        ; imm -> zp*
		assume	addr:direct
		bit		#$1234      ; imm -> zp*
		assume	addr:direct
		bit		#bakbyt     ; imm -> zp*
		assume	addr:direct
		bit		#bakwrd     ; imm -> zp*
		assume	addr:direct
		bit		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		bit		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		bit		            ; imp -> l*
		assume	addr:absolute
		bit		            ; imp -> ab*
		assume	addr:direct
		bit		            ; imp -> zp*

		; lab

		assume	addr:long
		bit		$123456     ; lab -> l*
		assume	addr:long
		bit		bak24       ; lab -> l*
		assume	addr:long
		bit		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		bit		($1234)     ; labi -> l*
		assume	addr:long
		bit		(bakwrd)    ; labi -> l*
		assume	addr:long
		bit		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		bit		($1234)     ; labi -> ab*
		assume	addr:absolute
		bit		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		bit		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		bit		($1234)     ; labi -> zp*
		assume	addr:direct
		bit		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		bit		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		bit		$123456,x   ; labx -> l*
		assume	addr:long
		bit		bak24,x     ; labx -> l*
		assume	addr:long
		bit		fwd24,x     ; labx -> l*

		; lpcr

		assume	addr:long
		bit		+           ; lpcr -> l*
		assume	addr:long
		bit		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		bit		[$12]       ; lzpi -> l*
		assume	addr:long
		bit		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		bit		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		bit		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		bit		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		bit		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		bit		[$12]       ; lzpi -> zp*
		assume	addr:direct
		bit		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		bit		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		bit		[$12],y     ; lzpiy -> l*
		assume	addr:long
		bit		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		bit		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		bit		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		bit		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		bit		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		bit		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		bit		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		bit		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		bit		+           ; pcr -> l*
		assume	addr:long
		bit		-           ; pcr -> l*

		; sr

		assume	addr:long
		bit		$12,s       ; sr -> l*
		assume	addr:long
		bit		bakbyt,s    ; sr -> l*
		assume	addr:long
		bit		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		bit		$12,s       ; sr -> ab*
		assume	addr:absolute
		bit		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		bit		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		bit		$12,s       ; sr -> zp*
		assume	addr:direct
		bit		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		bit		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		bit		($12,s),y   ; sriy -> l*
		assume	addr:long
		bit		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		bit		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		bit		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		bit		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		bit		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		bit		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		bit		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		bit		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		bit		$12         ; zp -> l*
		assume	addr:long
		bit		bakbyt      ; zp -> l*
		assume	addr:long
		bit		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		bit		($12)       ; zpi -> l*
		assume	addr:long
		bit		(bakbyt)    ; zpi -> l*
		assume	addr:long
		bit		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		bit		($12)       ; zpi -> ab*
		assume	addr:absolute
		bit		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		bit		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		bit		($12)       ; zpi -> zp*
		assume	addr:direct
		bit		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		bit		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		bit		($12),y     ; zpiy -> l*
		assume	addr:long
		bit		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		bit		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		bit		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		bit		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		bit		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		bit		($12),y     ; zpiy -> zp*
		assume	addr:direct
		bit		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		bit		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		bit		$12,x       ; zpx -> l*
		assume	addr:long
		bit		bakbyt,x    ; zpx -> l*
		assume	addr:long
		bit		fwdbyt,x    ; zpx -> l*

		; zpxi

		assume	addr:long
		bit		($12,x)     ; zpxi -> l*
		assume	addr:long
		bit		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		bit		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		bit		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		bit		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		bit		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		bit		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		bit		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		bit		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		bit		$12,y       ; zpy -> l*
		assume	addr:long
		bit		bakbyt,y    ; zpy -> l*
		assume	addr:long
		bit		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		bit		$12,y       ; zpy -> ab*
		assume	addr:absolute
		bit		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		bit		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		bit		$12,y       ; zpy -> zp*
		assume	addr:direct
		bit		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		bit		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; BRK
		; WDM

 -
		; ab

		assume	addr:long
		brk		$1234       ; ab -> l*
		assume	addr:long
		brk		bakwrd      ; ab -> l*
		assume	addr:long
		brk		fwdwrd      ; ab -> l*
		assume	addr:absolute
		brk		$1234       ; ab -> ab*
		assume	addr:absolute
		brk		bakwrd      ; ab -> ab*
		assume	addr:absolute
		brk		fwdwrd      ; ab -> ab*

		; abi

		assume	addr:long
		brk		($1234)     ; abi -> l*
		assume	addr:long
		brk		(bakwrd)    ; abi -> l*
		assume	addr:long
		brk		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		brk		($1234)     ; abi -> ab*
		assume	addr:absolute
		brk		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		brk		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		brk		($1234)     ; abi -> zp*
		assume	addr:direct
		brk		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		brk		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		brk		$1234,x     ; abx -> l*
		assume	addr:long
		brk		bakwrd,x    ; abx -> l*
		assume	addr:long
		brk		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		brk		$1234,x     ; abx -> ab*
		assume	addr:absolute
		brk		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		brk		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		brk		$1234,x     ; abx -> zp*
		assume	addr:direct
		brk		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		brk		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		brk		($1234,x)   ; abxi -> l*
		assume	addr:long
		brk		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		brk		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		brk		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		brk		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		brk		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		brk		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		brk		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		brk		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		brk		$1234,y     ; aby -> l*
		assume	addr:long
		brk		bakwrd,y    ; aby -> l*
		assume	addr:long
		brk		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		brk		$1234,y     ; aby -> ab*
		assume	addr:absolute
		brk		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		brk		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		brk		$1234,y     ; aby -> zp*
		assume	addr:direct
		brk		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		brk		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		brk		A           ; acc -> l*
		assume	addr:long
		brk		a           ; acc -> l*
		assume	addr:absolute
		brk		A           ; acc -> ab*
		assume	addr:absolute
		brk		a           ; acc -> ab*
		assume	addr:direct
		brk		A           ; acc -> zp*
		assume	addr:direct
		brk		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		brk		            ; acc_i -> l*
		assume	addr:absolute
		brk		            ; acc_i -> ab*
		assume	addr:direct
		brk		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		brk		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		brk		bak24, bak24b ; bmv -> l*
		assume	addr:long
		brk		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		brk		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		brk		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		brk		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		brk		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		brk		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		brk		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		brk		#$12        ; imm -> l*
		assume	addr:long
		brk		#$1234      ; imm -> l*
		assume	addr:long
		brk		#bakbyt     ; imm -> l*
		assume	addr:long
		brk		#bakwrd     ; imm -> l*
		assume	addr:long
		brk		#fwdbyt     ; imm -> l*
		assume	addr:long
		brk		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		brk		#$12        ; imm -> ab*
		assume	addr:absolute
		brk		#$1234      ; imm -> ab*
		assume	addr:absolute
		brk		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		brk		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		brk		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		brk		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		brk		#$12        ; imm -> zp*
		assume	addr:direct
		brk		#$1234      ; imm -> zp*
		assume	addr:direct
		brk		#bakbyt     ; imm -> zp*
		assume	addr:direct
		brk		#bakwrd     ; imm -> zp*
		assume	addr:direct
		brk		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		brk		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		brk		            ; imp -> l*
		assume	addr:absolute
		brk		            ; imp -> ab*
		assume	addr:direct
		brk		            ; imp -> zp*

		; lab

		assume	addr:long
		brk		$123456     ; lab -> l*
		assume	addr:long
		brk		bak24       ; lab -> l*
		assume	addr:long
		brk		fwd24       ; lab -> l*
		assume	addr:absolute
		brk		$123456     ; lab -> ab*
		assume	addr:absolute
		brk		bak24       ; lab -> ab*
		assume	addr:absolute
		brk		fwd24       ; lab -> ab*

		; labi

		assume	addr:long
		brk		($1234)     ; labi -> l*
		assume	addr:long
		brk		(bakwrd)    ; labi -> l*
		assume	addr:long
		brk		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		brk		($1234)     ; labi -> ab*
		assume	addr:absolute
		brk		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		brk		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		brk		($1234)     ; labi -> zp*
		assume	addr:direct
		brk		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		brk		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		brk		$123456,x   ; labx -> l*
		assume	addr:long
		brk		bak24,x     ; labx -> l*
		assume	addr:long
		brk		fwd24,x     ; labx -> l*
		assume	addr:absolute
		brk		$123456,x   ; labx -> ab*
		assume	addr:absolute
		brk		bak24,x     ; labx -> ab*
		assume	addr:absolute
		brk		fwd24,x     ; labx -> ab*
		assume	addr:direct
		brk		$123456,x   ; labx -> zp*
		assume	addr:direct
		brk		bak24,x     ; labx -> zp*
		assume	addr:direct
		brk		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		brk		+           ; lpcr -> l*
		assume	addr:long
		brk		-           ; lpcr -> l*
		assume	addr:absolute
		brk		+           ; lpcr -> ab*
		assume	addr:absolute
		brk		-           ; lpcr -> ab*

		; lzpi

		assume	addr:long
		brk		[$12]       ; lzpi -> l*
		assume	addr:long
		brk		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		brk		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		brk		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		brk		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		brk		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		brk		[$12]       ; lzpi -> zp*
		assume	addr:direct
		brk		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		brk		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		brk		[$12],y     ; lzpiy -> l*
		assume	addr:long
		brk		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		brk		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		brk		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		brk		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		brk		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		brk		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		brk		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		brk		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		brk		+           ; pcr -> l*
		assume	addr:long
		brk		-           ; pcr -> l*
		assume	addr:absolute
		brk		+           ; pcr -> ab*
		assume	addr:absolute
		brk		-           ; pcr -> ab*

		; sr

		assume	addr:long
		brk		$12,s       ; sr -> l*
		assume	addr:long
		brk		bakbyt,s    ; sr -> l*
		assume	addr:long
		brk		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		brk		$12,s       ; sr -> ab*
		assume	addr:absolute
		brk		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		brk		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		brk		$12,s       ; sr -> zp*
		assume	addr:direct
		brk		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		brk		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		brk		($12,s),y   ; sriy -> l*
		assume	addr:long
		brk		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		brk		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		brk		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		brk		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		brk		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		brk		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		brk		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		brk		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		brk		$12         ; zp -> l*
		assume	addr:long
		brk		bakbyt      ; zp -> l*
		assume	addr:long
		brk		fwdbyt      ; zp -> l*
		assume	addr:absolute
		brk		$12         ; zp -> ab*
		assume	addr:absolute
		brk		bakbyt      ; zp -> ab*
		assume	addr:absolute
		brk		fwdbyt      ; zp -> ab*

		; zpi

		assume	addr:long
		brk		($12)       ; zpi -> l*
		assume	addr:long
		brk		(bakbyt)    ; zpi -> l*
		assume	addr:long
		brk		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		brk		($12)       ; zpi -> ab*
		assume	addr:absolute
		brk		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		brk		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		brk		($12)       ; zpi -> zp*
		assume	addr:direct
		brk		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		brk		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		brk		($12),y     ; zpiy -> l*
		assume	addr:long
		brk		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		brk		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		brk		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		brk		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		brk		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		brk		($12),y     ; zpiy -> zp*
		assume	addr:direct
		brk		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		brk		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		brk		$12,x       ; zpx -> l*
		assume	addr:long
		brk		bakbyt,x    ; zpx -> l*
		assume	addr:long
		brk		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		brk		$12,x       ; zpx -> ab*
		assume	addr:absolute
		brk		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		brk		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		brk		$12,x       ; zpx -> zp*
		assume	addr:direct
		brk		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		brk		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		brk		($12,x)     ; zpxi -> l*
		assume	addr:long
		brk		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		brk		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		brk		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		brk		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		brk		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		brk		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		brk		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		brk		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		brk		$12,y       ; zpy -> l*
		assume	addr:long
		brk		bakbyt,y    ; zpy -> l*
		assume	addr:long
		brk		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		brk		$12,y       ; zpy -> ab*
		assume	addr:absolute
		brk		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		brk		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		brk		$12,y       ; zpy -> zp*
		assume	addr:direct
		brk		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		brk		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; BRL
		; PER

 -
		; ab

		assume	addr:long
		brl		$1234       ; ab -> l*
		assume	addr:long
		brl		bakwrd      ; ab -> l*
		assume	addr:long
		brl		fwdwrd      ; ab -> l*
		assume	addr:absolute
		brl		$1234       ; ab -> ab*
		assume	addr:absolute
		brl		bakwrd      ; ab -> ab*
		assume	addr:absolute
		brl		fwdwrd      ; ab -> ab*
		assume	addr:direct
		brl		$1234       ; ab -> zp*
		assume	addr:direct
		brl		bakwrd      ; ab -> zp*
		assume	addr:direct
		brl		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		brl		($1234)     ; abi -> l*
		assume	addr:long
		brl		(bakwrd)    ; abi -> l*
		assume	addr:long
		brl		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		brl		($1234)     ; abi -> ab*
		assume	addr:absolute
		brl		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		brl		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		brl		($1234)     ; abi -> zp*
		assume	addr:direct
		brl		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		brl		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		brl		$1234,x     ; abx -> l*
		assume	addr:long
		brl		bakwrd,x    ; abx -> l*
		assume	addr:long
		brl		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		brl		$1234,x     ; abx -> ab*
		assume	addr:absolute
		brl		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		brl		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		brl		$1234,x     ; abx -> zp*
		assume	addr:direct
		brl		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		brl		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		brl		($1234,x)   ; abxi -> l*
		assume	addr:long
		brl		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		brl		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		brl		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		brl		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		brl		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		brl		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		brl		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		brl		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		brl		$1234,y     ; aby -> l*
		assume	addr:long
		brl		bakwrd,y    ; aby -> l*
		assume	addr:long
		brl		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		brl		$1234,y     ; aby -> ab*
		assume	addr:absolute
		brl		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		brl		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		brl		$1234,y     ; aby -> zp*
		assume	addr:direct
		brl		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		brl		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		brl		A           ; acc -> l*
		assume	addr:long
		brl		a           ; acc -> l*
		assume	addr:absolute
		brl		A           ; acc -> ab*
		assume	addr:absolute
		brl		a           ; acc -> ab*
		assume	addr:direct
		brl		A           ; acc -> zp*
		assume	addr:direct
		brl		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		brl		            ; acc_i -> l*
		assume	addr:absolute
		brl		            ; acc_i -> ab*
		assume	addr:direct
		brl		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		brl		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		brl		bak24, bak24b ; bmv -> l*
		assume	addr:long
		brl		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		brl		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		brl		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		brl		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		brl		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		brl		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		brl		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		brl		#$12        ; imm -> l*
		assume	addr:long
		brl		#$1234      ; imm -> l*
		assume	addr:long
		brl		#bakbyt     ; imm -> l*
		assume	addr:long
		brl		#bakwrd     ; imm -> l*
		assume	addr:long
		brl		#fwdbyt     ; imm -> l*
		assume	addr:long
		brl		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		brl		#$12        ; imm -> ab*
		assume	addr:absolute
		brl		#$1234      ; imm -> ab*
		assume	addr:absolute
		brl		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		brl		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		brl		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		brl		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		brl		#$12        ; imm -> zp*
		assume	addr:direct
		brl		#$1234      ; imm -> zp*
		assume	addr:direct
		brl		#bakbyt     ; imm -> zp*
		assume	addr:direct
		brl		#bakwrd     ; imm -> zp*
		assume	addr:direct
		brl		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		brl		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		brl		            ; imp -> l*
		assume	addr:absolute
		brl		            ; imp -> ab*
		assume	addr:direct
		brl		            ; imp -> zp*

		; lab

		assume	addr:long
		brl		$123456     ; lab -> l*
		assume	addr:long
		brl		bak24       ; lab -> l*
		assume	addr:long
		brl		fwd24       ; lab -> l*
		assume	addr:absolute
		brl		$123456     ; lab -> ab*
		assume	addr:absolute
		brl		bak24       ; lab -> ab*
		assume	addr:absolute
		brl		fwd24       ; lab -> ab*
		assume	addr:direct
		brl		$123456     ; lab -> zp*
		assume	addr:direct
		brl		bak24       ; lab -> zp*
		assume	addr:direct
		brl		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		brl		($1234)     ; labi -> l*
		assume	addr:long
		brl		(bakwrd)    ; labi -> l*
		assume	addr:long
		brl		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		brl		($1234)     ; labi -> ab*
		assume	addr:absolute
		brl		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		brl		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		brl		($1234)     ; labi -> zp*
		assume	addr:direct
		brl		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		brl		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		brl		$123456,x   ; labx -> l*
		assume	addr:long
		brl		bak24,x     ; labx -> l*
		assume	addr:long
		brl		fwd24,x     ; labx -> l*
		assume	addr:absolute
		brl		$123456,x   ; labx -> ab*
		assume	addr:absolute
		brl		bak24,x     ; labx -> ab*
		assume	addr:absolute
		brl		fwd24,x     ; labx -> ab*
		assume	addr:direct
		brl		$123456,x   ; labx -> zp*
		assume	addr:direct
		brl		bak24,x     ; labx -> zp*
		assume	addr:direct
		brl		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		brl		+           ; lpcr -> l*
		assume	addr:long
		brl		-           ; lpcr -> l*
		assume	addr:absolute
		brl		+           ; lpcr -> ab*
		assume	addr:absolute
		brl		-           ; lpcr -> ab*
		assume	addr:direct
		brl		+           ; lpcr -> zp*
		assume	addr:direct
		brl		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		brl		[$12]       ; lzpi -> l*
		assume	addr:long
		brl		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		brl		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		brl		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		brl		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		brl		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		brl		[$12]       ; lzpi -> zp*
		assume	addr:direct
		brl		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		brl		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		brl		[$12],y     ; lzpiy -> l*
		assume	addr:long
		brl		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		brl		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		brl		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		brl		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		brl		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		brl		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		brl		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		brl		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		brl		+           ; pcr -> l*
		assume	addr:long
		brl		-           ; pcr -> l*
		assume	addr:absolute
		brl		+           ; pcr -> ab*
		assume	addr:absolute
		brl		-           ; pcr -> ab*
		assume	addr:direct
		brl		+           ; pcr -> zp*
		assume	addr:direct
		brl		-           ; pcr -> zp*

		; sr

		assume	addr:long
		brl		$12,s       ; sr -> l*
		assume	addr:long
		brl		bakbyt,s    ; sr -> l*
		assume	addr:long
		brl		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		brl		$12,s       ; sr -> ab*
		assume	addr:absolute
		brl		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		brl		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		brl		$12,s       ; sr -> zp*
		assume	addr:direct
		brl		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		brl		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		brl		($12,s),y   ; sriy -> l*
		assume	addr:long
		brl		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		brl		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		brl		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		brl		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		brl		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		brl		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		brl		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		brl		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		brl		$12         ; zp -> l*
		assume	addr:long
		brl		bakbyt      ; zp -> l*
		assume	addr:long
		brl		fwdbyt      ; zp -> l*
		assume	addr:absolute
		brl		$12         ; zp -> ab*
		assume	addr:absolute
		brl		bakbyt      ; zp -> ab*
		assume	addr:absolute
		brl		fwdbyt      ; zp -> ab*
		assume	addr:direct
		brl		$12         ; zp -> zp*
		assume	addr:direct
		brl		bakbyt      ; zp -> zp*
		assume	addr:direct
		brl		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		brl		($12)       ; zpi -> l*
		assume	addr:long
		brl		(bakbyt)    ; zpi -> l*
		assume	addr:long
		brl		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		brl		($12)       ; zpi -> ab*
		assume	addr:absolute
		brl		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		brl		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		brl		($12)       ; zpi -> zp*
		assume	addr:direct
		brl		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		brl		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		brl		($12),y     ; zpiy -> l*
		assume	addr:long
		brl		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		brl		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		brl		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		brl		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		brl		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		brl		($12),y     ; zpiy -> zp*
		assume	addr:direct
		brl		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		brl		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		brl		$12,x       ; zpx -> l*
		assume	addr:long
		brl		bakbyt,x    ; zpx -> l*
		assume	addr:long
		brl		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		brl		$12,x       ; zpx -> ab*
		assume	addr:absolute
		brl		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		brl		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		brl		$12,x       ; zpx -> zp*
		assume	addr:direct
		brl		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		brl		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		brl		($12,x)     ; zpxi -> l*
		assume	addr:long
		brl		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		brl		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		brl		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		brl		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		brl		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		brl		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		brl		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		brl		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		brl		$12,y       ; zpy -> l*
		assume	addr:long
		brl		bakbyt,y    ; zpy -> l*
		assume	addr:long
		brl		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		brl		$12,y       ; zpy -> ab*
		assume	addr:absolute
		brl		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		brl		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		brl		$12,y       ; zpy -> zp*
		assume	addr:direct
		brl		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		brl		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; CLC
		; CLD
		; CLI
		; CLV
		; DEA
		; DEX
		; DEY
		; INA
		; INX
		; INY
		; NOP
		; PHA
		; PHB
		; PHD
		; PHK
		; PHP
		; PHX
		; PHY
		; PLA
		; PLB
		; PLD
		; PLP
		; PLX
		; PLY
		; RTI
		; RTL
		; RTS
		; SEC
		; SED
		; SEI
		; STP
		; SWA
		; TAD
		; TAS
		; TAX
		; TAY
		; TCD
		; TCS
		; TDA
		; TDC
		; TSA
		; TSC
		; TSX
		; TXA
		; TXS
		; TXY
		; TYA
		; TYX
		; WAI
		; XBA
		; XCE

 -
		; ab

		assume	addr:long
		clc		$1234       ; ab -> l*
		assume	addr:long
		clc		bakwrd      ; ab -> l*
		assume	addr:long
		clc		fwdwrd      ; ab -> l*
		assume	addr:absolute
		clc		$1234       ; ab -> ab*
		assume	addr:absolute
		clc		bakwrd      ; ab -> ab*
		assume	addr:absolute
		clc		fwdwrd      ; ab -> ab*
		assume	addr:direct
		clc		$1234       ; ab -> zp*
		assume	addr:direct
		clc		bakwrd      ; ab -> zp*
		assume	addr:direct
		clc		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		clc		($1234)     ; abi -> l*
		assume	addr:long
		clc		(bakwrd)    ; abi -> l*
		assume	addr:long
		clc		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		clc		($1234)     ; abi -> ab*
		assume	addr:absolute
		clc		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		clc		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		clc		($1234)     ; abi -> zp*
		assume	addr:direct
		clc		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		clc		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		clc		$1234,x     ; abx -> l*
		assume	addr:long
		clc		bakwrd,x    ; abx -> l*
		assume	addr:long
		clc		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		clc		$1234,x     ; abx -> ab*
		assume	addr:absolute
		clc		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		clc		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		clc		$1234,x     ; abx -> zp*
		assume	addr:direct
		clc		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		clc		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		clc		($1234,x)   ; abxi -> l*
		assume	addr:long
		clc		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		clc		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		clc		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		clc		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		clc		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		clc		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		clc		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		clc		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		clc		$1234,y     ; aby -> l*
		assume	addr:long
		clc		bakwrd,y    ; aby -> l*
		assume	addr:long
		clc		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		clc		$1234,y     ; aby -> ab*
		assume	addr:absolute
		clc		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		clc		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		clc		$1234,y     ; aby -> zp*
		assume	addr:direct
		clc		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		clc		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		clc		A           ; acc -> l*
		assume	addr:long
		clc		a           ; acc -> l*
		assume	addr:absolute
		clc		A           ; acc -> ab*
		assume	addr:absolute
		clc		a           ; acc -> ab*
		assume	addr:direct
		clc		A           ; acc -> zp*
		assume	addr:direct
		clc		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		clc		            ; acc_i -> l*
		assume	addr:absolute
		clc		            ; acc_i -> ab*
		assume	addr:direct
		clc		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		clc		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		clc		bak24, bak24b ; bmv -> l*
		assume	addr:long
		clc		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		clc		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		clc		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		clc		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		clc		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		clc		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		clc		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		clc		#$12        ; imm -> l*
		assume	addr:long
		clc		#$1234      ; imm -> l*
		assume	addr:long
		clc		#bakbyt     ; imm -> l*
		assume	addr:long
		clc		#bakwrd     ; imm -> l*
		assume	addr:long
		clc		#fwdbyt     ; imm -> l*
		assume	addr:long
		clc		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		clc		#$12        ; imm -> ab*
		assume	addr:absolute
		clc		#$1234      ; imm -> ab*
		assume	addr:absolute
		clc		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		clc		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		clc		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		clc		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		clc		#$12        ; imm -> zp*
		assume	addr:direct
		clc		#$1234      ; imm -> zp*
		assume	addr:direct
		clc		#bakbyt     ; imm -> zp*
		assume	addr:direct
		clc		#bakwrd     ; imm -> zp*
		assume	addr:direct
		clc		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		clc		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		clc		            ; imp -> l*
		assume	addr:absolute
		clc		            ; imp -> ab*
		assume	addr:direct
		clc		            ; imp -> zp*

		; lab

		assume	addr:long
		clc		$123456     ; lab -> l*
		assume	addr:long
		clc		bak24       ; lab -> l*
		assume	addr:long
		clc		fwd24       ; lab -> l*
		assume	addr:absolute
		clc		$123456     ; lab -> ab*
		assume	addr:absolute
		clc		bak24       ; lab -> ab*
		assume	addr:absolute
		clc		fwd24       ; lab -> ab*
		assume	addr:direct
		clc		$123456     ; lab -> zp*
		assume	addr:direct
		clc		bak24       ; lab -> zp*
		assume	addr:direct
		clc		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		clc		($1234)     ; labi -> l*
		assume	addr:long
		clc		(bakwrd)    ; labi -> l*
		assume	addr:long
		clc		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		clc		($1234)     ; labi -> ab*
		assume	addr:absolute
		clc		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		clc		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		clc		($1234)     ; labi -> zp*
		assume	addr:direct
		clc		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		clc		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		clc		$123456,x   ; labx -> l*
		assume	addr:long
		clc		bak24,x     ; labx -> l*
		assume	addr:long
		clc		fwd24,x     ; labx -> l*
		assume	addr:absolute
		clc		$123456,x   ; labx -> ab*
		assume	addr:absolute
		clc		bak24,x     ; labx -> ab*
		assume	addr:absolute
		clc		fwd24,x     ; labx -> ab*
		assume	addr:direct
		clc		$123456,x   ; labx -> zp*
		assume	addr:direct
		clc		bak24,x     ; labx -> zp*
		assume	addr:direct
		clc		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		clc		+           ; lpcr -> l*
		assume	addr:long
		clc		-           ; lpcr -> l*
		assume	addr:absolute
		clc		+           ; lpcr -> ab*
		assume	addr:absolute
		clc		-           ; lpcr -> ab*
		assume	addr:direct
		clc		+           ; lpcr -> zp*
		assume	addr:direct
		clc		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		clc		[$12]       ; lzpi -> l*
		assume	addr:long
		clc		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		clc		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		clc		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		clc		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		clc		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		clc		[$12]       ; lzpi -> zp*
		assume	addr:direct
		clc		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		clc		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		clc		[$12],y     ; lzpiy -> l*
		assume	addr:long
		clc		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		clc		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		clc		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		clc		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		clc		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		clc		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		clc		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		clc		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		clc		+           ; pcr -> l*
		assume	addr:long
		clc		-           ; pcr -> l*
		assume	addr:absolute
		clc		+           ; pcr -> ab*
		assume	addr:absolute
		clc		-           ; pcr -> ab*
		assume	addr:direct
		clc		+           ; pcr -> zp*
		assume	addr:direct
		clc		-           ; pcr -> zp*

		; sr

		assume	addr:long
		clc		$12,s       ; sr -> l*
		assume	addr:long
		clc		bakbyt,s    ; sr -> l*
		assume	addr:long
		clc		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		clc		$12,s       ; sr -> ab*
		assume	addr:absolute
		clc		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		clc		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		clc		$12,s       ; sr -> zp*
		assume	addr:direct
		clc		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		clc		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		clc		($12,s),y   ; sriy -> l*
		assume	addr:long
		clc		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		clc		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		clc		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		clc		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		clc		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		clc		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		clc		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		clc		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		clc		$12         ; zp -> l*
		assume	addr:long
		clc		bakbyt      ; zp -> l*
		assume	addr:long
		clc		fwdbyt      ; zp -> l*
		assume	addr:absolute
		clc		$12         ; zp -> ab*
		assume	addr:absolute
		clc		bakbyt      ; zp -> ab*
		assume	addr:absolute
		clc		fwdbyt      ; zp -> ab*
		assume	addr:direct
		clc		$12         ; zp -> zp*
		assume	addr:direct
		clc		bakbyt      ; zp -> zp*
		assume	addr:direct
		clc		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		clc		($12)       ; zpi -> l*
		assume	addr:long
		clc		(bakbyt)    ; zpi -> l*
		assume	addr:long
		clc		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		clc		($12)       ; zpi -> ab*
		assume	addr:absolute
		clc		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		clc		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		clc		($12)       ; zpi -> zp*
		assume	addr:direct
		clc		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		clc		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		clc		($12),y     ; zpiy -> l*
		assume	addr:long
		clc		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		clc		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		clc		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		clc		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		clc		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		clc		($12),y     ; zpiy -> zp*
		assume	addr:direct
		clc		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		clc		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		clc		$12,x       ; zpx -> l*
		assume	addr:long
		clc		bakbyt,x    ; zpx -> l*
		assume	addr:long
		clc		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		clc		$12,x       ; zpx -> ab*
		assume	addr:absolute
		clc		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		clc		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		clc		$12,x       ; zpx -> zp*
		assume	addr:direct
		clc		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		clc		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		clc		($12,x)     ; zpxi -> l*
		assume	addr:long
		clc		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		clc		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		clc		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		clc		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		clc		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		clc		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		clc		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		clc		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		clc		$12,y       ; zpy -> l*
		assume	addr:long
		clc		bakbyt,y    ; zpy -> l*
		assume	addr:long
		clc		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		clc		$12,y       ; zpy -> ab*
		assume	addr:absolute
		clc		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		clc		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		clc		$12,y       ; zpy -> zp*
		assume	addr:direct
		clc		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		clc		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; COP

 -
		; ab

		assume	addr:long
		cop		$1234       ; ab -> l*
		assume	addr:long
		cop		bakwrd      ; ab -> l*
		assume	addr:long
		cop		fwdwrd      ; ab -> l*
		assume	addr:absolute
		cop		$1234       ; ab -> ab*
		assume	addr:absolute
		cop		bakwrd      ; ab -> ab*
		assume	addr:absolute
		cop		fwdwrd      ; ab -> ab*

		; abi

		assume	addr:long
		cop		($1234)     ; abi -> l*
		assume	addr:long
		cop		(bakwrd)    ; abi -> l*
		assume	addr:long
		cop		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		cop		($1234)     ; abi -> ab*
		assume	addr:absolute
		cop		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		cop		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		cop		($1234)     ; abi -> zp*
		assume	addr:direct
		cop		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		cop		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		cop		$1234,x     ; abx -> l*
		assume	addr:long
		cop		bakwrd,x    ; abx -> l*
		assume	addr:long
		cop		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		cop		$1234,x     ; abx -> ab*
		assume	addr:absolute
		cop		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		cop		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		cop		$1234,x     ; abx -> zp*
		assume	addr:direct
		cop		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		cop		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		cop		($1234,x)   ; abxi -> l*
		assume	addr:long
		cop		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		cop		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		cop		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		cop		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		cop		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		cop		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		cop		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		cop		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		cop		$1234,y     ; aby -> l*
		assume	addr:long
		cop		bakwrd,y    ; aby -> l*
		assume	addr:long
		cop		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		cop		$1234,y     ; aby -> ab*
		assume	addr:absolute
		cop		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		cop		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		cop		$1234,y     ; aby -> zp*
		assume	addr:direct
		cop		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		cop		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		cop		A           ; acc -> l*
		assume	addr:long
		cop		a           ; acc -> l*
		assume	addr:absolute
		cop		A           ; acc -> ab*
		assume	addr:absolute
		cop		a           ; acc -> ab*
		assume	addr:direct
		cop		A           ; acc -> zp*
		assume	addr:direct
		cop		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		cop		            ; acc_i -> l*
		assume	addr:absolute
		cop		            ; acc_i -> ab*
		assume	addr:direct
		cop		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		cop		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		cop		bak24, bak24b ; bmv -> l*
		assume	addr:long
		cop		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		cop		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		cop		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		cop		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		cop		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		cop		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		cop		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		cop		#$12        ; imm -> l*
		assume	addr:long
		cop		#$1234      ; imm -> l*
		assume	addr:long
		cop		#bakbyt     ; imm -> l*
		assume	addr:long
		cop		#bakwrd     ; imm -> l*
		assume	addr:long
		cop		#fwdbyt     ; imm -> l*
		assume	addr:long
		cop		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		cop		#$12        ; imm -> ab*
		assume	addr:absolute
		cop		#$1234      ; imm -> ab*
		assume	addr:absolute
		cop		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		cop		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		cop		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		cop		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		cop		#$12        ; imm -> zp*
		assume	addr:direct
		cop		#$1234      ; imm -> zp*
		assume	addr:direct
		cop		#bakbyt     ; imm -> zp*
		assume	addr:direct
		cop		#bakwrd     ; imm -> zp*
		assume	addr:direct
		cop		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		cop		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		cop		            ; imp -> l*
		assume	addr:absolute
		cop		            ; imp -> ab*
		assume	addr:direct
		cop		            ; imp -> zp*

		; lab

		assume	addr:long
		cop		$123456     ; lab -> l*
		assume	addr:long
		cop		bak24       ; lab -> l*
		assume	addr:long
		cop		fwd24       ; lab -> l*
		assume	addr:absolute
		cop		$123456     ; lab -> ab*
		assume	addr:absolute
		cop		bak24       ; lab -> ab*
		assume	addr:absolute
		cop		fwd24       ; lab -> ab*

		; labi

		assume	addr:long
		cop		($1234)     ; labi -> l*
		assume	addr:long
		cop		(bakwrd)    ; labi -> l*
		assume	addr:long
		cop		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		cop		($1234)     ; labi -> ab*
		assume	addr:absolute
		cop		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		cop		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		cop		($1234)     ; labi -> zp*
		assume	addr:direct
		cop		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		cop		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		cop		$123456,x   ; labx -> l*
		assume	addr:long
		cop		bak24,x     ; labx -> l*
		assume	addr:long
		cop		fwd24,x     ; labx -> l*
		assume	addr:absolute
		cop		$123456,x   ; labx -> ab*
		assume	addr:absolute
		cop		bak24,x     ; labx -> ab*
		assume	addr:absolute
		cop		fwd24,x     ; labx -> ab*
		assume	addr:direct
		cop		$123456,x   ; labx -> zp*
		assume	addr:direct
		cop		bak24,x     ; labx -> zp*
		assume	addr:direct
		cop		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		cop		+           ; lpcr -> l*
		assume	addr:long
		cop		-           ; lpcr -> l*
		assume	addr:absolute
		cop		+           ; lpcr -> ab*
		assume	addr:absolute
		cop		-           ; lpcr -> ab*

		; lzpi

		assume	addr:long
		cop		[$12]       ; lzpi -> l*
		assume	addr:long
		cop		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		cop		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		cop		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		cop		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		cop		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		cop		[$12]       ; lzpi -> zp*
		assume	addr:direct
		cop		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		cop		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		cop		[$12],y     ; lzpiy -> l*
		assume	addr:long
		cop		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		cop		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		cop		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		cop		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		cop		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		cop		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		cop		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		cop		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		cop		+           ; pcr -> l*
		assume	addr:long
		cop		-           ; pcr -> l*
		assume	addr:absolute
		cop		+           ; pcr -> ab*
		assume	addr:absolute
		cop		-           ; pcr -> ab*

		; sr

		assume	addr:long
		cop		$12,s       ; sr -> l*
		assume	addr:long
		cop		bakbyt,s    ; sr -> l*
		assume	addr:long
		cop		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		cop		$12,s       ; sr -> ab*
		assume	addr:absolute
		cop		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		cop		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		cop		$12,s       ; sr -> zp*
		assume	addr:direct
		cop		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		cop		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		cop		($12,s),y   ; sriy -> l*
		assume	addr:long
		cop		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		cop		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		cop		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		cop		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		cop		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		cop		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		cop		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		cop		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		cop		$12         ; zp -> l*
		assume	addr:long
		cop		bakbyt      ; zp -> l*
		assume	addr:long
		cop		fwdbyt      ; zp -> l*
		assume	addr:absolute
		cop		$12         ; zp -> ab*
		assume	addr:absolute
		cop		bakbyt      ; zp -> ab*
		assume	addr:absolute
		cop		fwdbyt      ; zp -> ab*

		; zpi

		assume	addr:long
		cop		($12)       ; zpi -> l*
		assume	addr:long
		cop		(bakbyt)    ; zpi -> l*
		assume	addr:long
		cop		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		cop		($12)       ; zpi -> ab*
		assume	addr:absolute
		cop		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		cop		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		cop		($12)       ; zpi -> zp*
		assume	addr:direct
		cop		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		cop		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		cop		($12),y     ; zpiy -> l*
		assume	addr:long
		cop		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		cop		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		cop		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		cop		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		cop		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		cop		($12),y     ; zpiy -> zp*
		assume	addr:direct
		cop		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		cop		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		cop		$12,x       ; zpx -> l*
		assume	addr:long
		cop		bakbyt,x    ; zpx -> l*
		assume	addr:long
		cop		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		cop		$12,x       ; zpx -> ab*
		assume	addr:absolute
		cop		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		cop		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		cop		$12,x       ; zpx -> zp*
		assume	addr:direct
		cop		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		cop		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		cop		($12,x)     ; zpxi -> l*
		assume	addr:long
		cop		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		cop		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		cop		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		cop		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		cop		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		cop		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		cop		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		cop		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		cop		$12,y       ; zpy -> l*
		assume	addr:long
		cop		bakbyt,y    ; zpy -> l*
		assume	addr:long
		cop		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		cop		$12,y       ; zpy -> ab*
		assume	addr:absolute
		cop		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		cop		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		cop		$12,y       ; zpy -> zp*
		assume	addr:direct
		cop		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		cop		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; CPX
		; CPY

 -
		; ab

		assume	addr:long
		cpx		$1234       ; ab -> l*
		assume	addr:long
		cpx		bakwrd      ; ab -> l*
		assume	addr:long
		cpx		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		cpx		($1234)     ; abi -> l*
		assume	addr:long
		cpx		(bakwrd)    ; abi -> l*
		assume	addr:long
		cpx		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		cpx		($1234)     ; abi -> ab*
		assume	addr:absolute
		cpx		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		cpx		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		cpx		($1234)     ; abi -> zp*
		assume	addr:direct
		cpx		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		cpx		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		cpx		$1234,x     ; abx -> l*
		assume	addr:long
		cpx		bakwrd,x    ; abx -> l*
		assume	addr:long
		cpx		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		cpx		$1234,x     ; abx -> ab*
		assume	addr:absolute
		cpx		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		cpx		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		cpx		$1234,x     ; abx -> zp*
		assume	addr:direct
		cpx		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		cpx		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		cpx		($1234,x)   ; abxi -> l*
		assume	addr:long
		cpx		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		cpx		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		cpx		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		cpx		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		cpx		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		cpx		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		cpx		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		cpx		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		cpx		$1234,y     ; aby -> l*
		assume	addr:long
		cpx		bakwrd,y    ; aby -> l*
		assume	addr:long
		cpx		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		cpx		$1234,y     ; aby -> ab*
		assume	addr:absolute
		cpx		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		cpx		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		cpx		$1234,y     ; aby -> zp*
		assume	addr:direct
		cpx		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		cpx		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		cpx		A           ; acc -> l*
		assume	addr:long
		cpx		a           ; acc -> l*
		assume	addr:absolute
		cpx		A           ; acc -> ab*
		assume	addr:absolute
		cpx		a           ; acc -> ab*
		assume	addr:direct
		cpx		A           ; acc -> zp*
		assume	addr:direct
		cpx		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		cpx		            ; acc_i -> l*
		assume	addr:absolute
		cpx		            ; acc_i -> ab*
		assume	addr:direct
		cpx		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		cpx		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		cpx		bak24, bak24b ; bmv -> l*
		assume	addr:long
		cpx		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		cpx		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		cpx		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		cpx		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		cpx		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		cpx		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		cpx		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		cpx		#$12        ; imm -> l*
		assume	addr:long
		cpx		#$1234      ; imm -> l*
		assume	addr:long
		cpx		#bakbyt     ; imm -> l*
		assume	addr:long
		cpx		#bakwrd     ; imm -> l*
		assume	addr:long
		cpx		#fwdbyt     ; imm -> l*
		assume	addr:long
		cpx		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		cpx		#$12        ; imm -> ab*
		assume	addr:absolute
		cpx		#$1234      ; imm -> ab*
		assume	addr:absolute
		cpx		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		cpx		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		cpx		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		cpx		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		cpx		#$12        ; imm -> zp*
		assume	addr:direct
		cpx		#$1234      ; imm -> zp*
		assume	addr:direct
		cpx		#bakbyt     ; imm -> zp*
		assume	addr:direct
		cpx		#bakwrd     ; imm -> zp*
		assume	addr:direct
		cpx		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		cpx		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		cpx		            ; imp -> l*
		assume	addr:absolute
		cpx		            ; imp -> ab*
		assume	addr:direct
		cpx		            ; imp -> zp*

		; lab

		assume	addr:long
		cpx		$123456     ; lab -> l*
		assume	addr:long
		cpx		bak24       ; lab -> l*
		assume	addr:long
		cpx		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		cpx		($1234)     ; labi -> l*
		assume	addr:long
		cpx		(bakwrd)    ; labi -> l*
		assume	addr:long
		cpx		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		cpx		($1234)     ; labi -> ab*
		assume	addr:absolute
		cpx		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		cpx		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		cpx		($1234)     ; labi -> zp*
		assume	addr:direct
		cpx		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		cpx		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		cpx		$123456,x   ; labx -> l*
		assume	addr:long
		cpx		bak24,x     ; labx -> l*
		assume	addr:long
		cpx		fwd24,x     ; labx -> l*
		assume	addr:absolute
		cpx		$123456,x   ; labx -> ab*
		assume	addr:absolute
		cpx		bak24,x     ; labx -> ab*
		assume	addr:absolute
		cpx		fwd24,x     ; labx -> ab*
		assume	addr:direct
		cpx		$123456,x   ; labx -> zp*
		assume	addr:direct
		cpx		bak24,x     ; labx -> zp*
		assume	addr:direct
		cpx		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		cpx		+           ; lpcr -> l*
		assume	addr:long
		cpx		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		cpx		[$12]       ; lzpi -> l*
		assume	addr:long
		cpx		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		cpx		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		cpx		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		cpx		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		cpx		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		cpx		[$12]       ; lzpi -> zp*
		assume	addr:direct
		cpx		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		cpx		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		cpx		[$12],y     ; lzpiy -> l*
		assume	addr:long
		cpx		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		cpx		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		cpx		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		cpx		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		cpx		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		cpx		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		cpx		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		cpx		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		cpx		+           ; pcr -> l*
		assume	addr:long
		cpx		-           ; pcr -> l*

		; sr

		assume	addr:long
		cpx		$12,s       ; sr -> l*
		assume	addr:long
		cpx		bakbyt,s    ; sr -> l*
		assume	addr:long
		cpx		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		cpx		$12,s       ; sr -> ab*
		assume	addr:absolute
		cpx		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		cpx		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		cpx		$12,s       ; sr -> zp*
		assume	addr:direct
		cpx		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		cpx		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		cpx		($12,s),y   ; sriy -> l*
		assume	addr:long
		cpx		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		cpx		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		cpx		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		cpx		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		cpx		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		cpx		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		cpx		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		cpx		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		cpx		$12         ; zp -> l*
		assume	addr:long
		cpx		bakbyt      ; zp -> l*
		assume	addr:long
		cpx		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		cpx		($12)       ; zpi -> l*
		assume	addr:long
		cpx		(bakbyt)    ; zpi -> l*
		assume	addr:long
		cpx		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		cpx		($12)       ; zpi -> ab*
		assume	addr:absolute
		cpx		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		cpx		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		cpx		($12)       ; zpi -> zp*
		assume	addr:direct
		cpx		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		cpx		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		cpx		($12),y     ; zpiy -> l*
		assume	addr:long
		cpx		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		cpx		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		cpx		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		cpx		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		cpx		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		cpx		($12),y     ; zpiy -> zp*
		assume	addr:direct
		cpx		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		cpx		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		cpx		$12,x       ; zpx -> l*
		assume	addr:long
		cpx		bakbyt,x    ; zpx -> l*
		assume	addr:long
		cpx		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		cpx		$12,x       ; zpx -> ab*
		assume	addr:absolute
		cpx		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		cpx		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		cpx		$12,x       ; zpx -> zp*
		assume	addr:direct
		cpx		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		cpx		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		cpx		($12,x)     ; zpxi -> l*
		assume	addr:long
		cpx		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		cpx		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		cpx		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		cpx		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		cpx		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		cpx		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		cpx		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		cpx		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		cpx		$12,y       ; zpy -> l*
		assume	addr:long
		cpx		bakbyt,y    ; zpy -> l*
		assume	addr:long
		cpx		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		cpx		$12,y       ; zpy -> ab*
		assume	addr:absolute
		cpx		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		cpx		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		cpx		$12,y       ; zpy -> zp*
		assume	addr:direct
		cpx		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		cpx		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; JML

 -
		; ab

		assume	addr:absolute
		jml		$1234       ; ab -> ab*
		assume	addr:absolute
		jml		bakwrd      ; ab -> ab*
		assume	addr:absolute
		jml		fwdwrd      ; ab -> ab*
		assume	addr:direct
		jml		$1234       ; ab -> zp*
		assume	addr:direct
		jml		bakwrd      ; ab -> zp*
		assume	addr:direct
		jml		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:direct
		jml		($1234)     ; abi -> zp*
		assume	addr:direct
		jml		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		jml		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		jml		$1234,x     ; abx -> l*
		assume	addr:long
		jml		bakwrd,x    ; abx -> l*
		assume	addr:long
		jml		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		jml		$1234,x     ; abx -> ab*
		assume	addr:absolute
		jml		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		jml		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		jml		$1234,x     ; abx -> zp*
		assume	addr:direct
		jml		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		jml		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		jml		($1234,x)   ; abxi -> l*
		assume	addr:long
		jml		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		jml		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		jml		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		jml		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		jml		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		jml		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		jml		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		jml		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		jml		$1234,y     ; aby -> l*
		assume	addr:long
		jml		bakwrd,y    ; aby -> l*
		assume	addr:long
		jml		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		jml		$1234,y     ; aby -> ab*
		assume	addr:absolute
		jml		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		jml		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		jml		$1234,y     ; aby -> zp*
		assume	addr:direct
		jml		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		jml		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		jml		A           ; acc -> l*
		assume	addr:long
		jml		a           ; acc -> l*
		assume	addr:absolute
		jml		A           ; acc -> ab*
		assume	addr:absolute
		jml		a           ; acc -> ab*
		assume	addr:direct
		jml		A           ; acc -> zp*
		assume	addr:direct
		jml		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		jml		            ; acc_i -> l*
		assume	addr:absolute
		jml		            ; acc_i -> ab*
		assume	addr:direct
		jml		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		jml		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		jml		bak24, bak24b ; bmv -> l*
		assume	addr:long
		jml		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		jml		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		jml		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		jml		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		jml		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		jml		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		jml		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		jml		#$12        ; imm -> l*
		assume	addr:long
		jml		#$1234      ; imm -> l*
		assume	addr:long
		jml		#bakbyt     ; imm -> l*
		assume	addr:long
		jml		#bakwrd     ; imm -> l*
		assume	addr:long
		jml		#fwdbyt     ; imm -> l*
		assume	addr:long
		jml		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		jml		#$12        ; imm -> ab*
		assume	addr:absolute
		jml		#$1234      ; imm -> ab*
		assume	addr:absolute
		jml		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		jml		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		jml		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		jml		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		jml		#$12        ; imm -> zp*
		assume	addr:direct
		jml		#$1234      ; imm -> zp*
		assume	addr:direct
		jml		#bakbyt     ; imm -> zp*
		assume	addr:direct
		jml		#bakwrd     ; imm -> zp*
		assume	addr:direct
		jml		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		jml		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		jml		            ; imp -> l*
		assume	addr:absolute
		jml		            ; imp -> ab*
		assume	addr:direct
		jml		            ; imp -> zp*

		; lab

		assume	addr:absolute
		jml		$123456     ; lab -> ab*
		assume	addr:absolute
		jml		bak24       ; lab -> ab*
		assume	addr:absolute
		jml		fwd24       ; lab -> ab*
		assume	addr:direct
		jml		$123456     ; lab -> zp*
		assume	addr:direct
		jml		bak24       ; lab -> zp*
		assume	addr:direct
		jml		fwd24       ; lab -> zp*

		; labi

		assume	addr:direct
		jml		($1234)     ; labi -> zp*
		assume	addr:direct
		jml		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		jml		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		jml		$123456,x   ; labx -> l*
		assume	addr:long
		jml		bak24,x     ; labx -> l*
		assume	addr:long
		jml		fwd24,x     ; labx -> l*
		assume	addr:absolute
		jml		$123456,x   ; labx -> ab*
		assume	addr:absolute
		jml		bak24,x     ; labx -> ab*
		assume	addr:absolute
		jml		fwd24,x     ; labx -> ab*
		assume	addr:direct
		jml		$123456,x   ; labx -> zp*
		assume	addr:direct
		jml		bak24,x     ; labx -> zp*
		assume	addr:direct
		jml		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:absolute
		jml		+           ; lpcr -> ab*
		assume	addr:absolute
		jml		-           ; lpcr -> ab*
		assume	addr:direct
		jml		+           ; lpcr -> zp*
		assume	addr:direct
		jml		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		jml		[$12]       ; lzpi -> l*
		assume	addr:long
		jml		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		jml		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		jml		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		jml		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		jml		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		jml		[$12]       ; lzpi -> zp*
		assume	addr:direct
		jml		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		jml		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		jml		[$12],y     ; lzpiy -> l*
		assume	addr:long
		jml		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		jml		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		jml		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		jml		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		jml		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		jml		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		jml		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		jml		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:absolute
		jml		+           ; pcr -> ab*
		assume	addr:absolute
		jml		-           ; pcr -> ab*
		assume	addr:direct
		jml		+           ; pcr -> zp*
		assume	addr:direct
		jml		-           ; pcr -> zp*

		; sr

		assume	addr:long
		jml		$12,s       ; sr -> l*
		assume	addr:long
		jml		bakbyt,s    ; sr -> l*
		assume	addr:long
		jml		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		jml		$12,s       ; sr -> ab*
		assume	addr:absolute
		jml		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		jml		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		jml		$12,s       ; sr -> zp*
		assume	addr:direct
		jml		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		jml		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		jml		($12,s),y   ; sriy -> l*
		assume	addr:long
		jml		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		jml		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		jml		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		jml		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		jml		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		jml		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		jml		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		jml		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:absolute
		jml		$12         ; zp -> ab*
		assume	addr:absolute
		jml		bakbyt      ; zp -> ab*
		assume	addr:absolute
		jml		fwdbyt      ; zp -> ab*
		assume	addr:direct
		jml		$12         ; zp -> zp*
		assume	addr:direct
		jml		bakbyt      ; zp -> zp*
		assume	addr:direct
		jml		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:direct
		jml		($12)       ; zpi -> zp*
		assume	addr:direct
		jml		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		jml		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		jml		($12),y     ; zpiy -> l*
		assume	addr:long
		jml		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		jml		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		jml		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		jml		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		jml		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		jml		($12),y     ; zpiy -> zp*
		assume	addr:direct
		jml		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		jml		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		jml		$12,x       ; zpx -> l*
		assume	addr:long
		jml		bakbyt,x    ; zpx -> l*
		assume	addr:long
		jml		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		jml		$12,x       ; zpx -> ab*
		assume	addr:absolute
		jml		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		jml		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		jml		$12,x       ; zpx -> zp*
		assume	addr:direct
		jml		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		jml		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		jml		($12,x)     ; zpxi -> l*
		assume	addr:long
		jml		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		jml		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		jml		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		jml		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		jml		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		jml		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		jml		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		jml		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		jml		$12,y       ; zpy -> l*
		assume	addr:long
		jml		bakbyt,y    ; zpy -> l*
		assume	addr:long
		jml		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		jml		$12,y       ; zpy -> ab*
		assume	addr:absolute
		jml		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		jml		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		jml		$12,y       ; zpy -> zp*
		assume	addr:direct
		jml		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		jml		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; JMP

 -
		; ab

		assume	addr:direct
		jmp		$1234       ; ab -> zp*
		assume	addr:direct
		jmp		bakwrd      ; ab -> zp*
		assume	addr:direct
		jmp		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:direct
		jmp		($1234)     ; abi -> zp*
		assume	addr:direct
		jmp		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		jmp		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		jmp		$1234,x     ; abx -> l*
		assume	addr:long
		jmp		bakwrd,x    ; abx -> l*
		assume	addr:long
		jmp		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		jmp		$1234,x     ; abx -> ab*
		assume	addr:absolute
		jmp		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		jmp		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		jmp		$1234,x     ; abx -> zp*
		assume	addr:direct
		jmp		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		jmp		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		jmp		($1234,x)   ; abxi -> l*
		assume	addr:long
		jmp		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		jmp		(fwdwrd,x)  ; abxi -> l*
		assume	addr:direct
		jmp		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		jmp		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		jmp		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		jmp		$1234,y     ; aby -> l*
		assume	addr:long
		jmp		bakwrd,y    ; aby -> l*
		assume	addr:long
		jmp		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		jmp		$1234,y     ; aby -> ab*
		assume	addr:absolute
		jmp		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		jmp		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		jmp		$1234,y     ; aby -> zp*
		assume	addr:direct
		jmp		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		jmp		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		jmp		A           ; acc -> l*
		assume	addr:long
		jmp		a           ; acc -> l*
		assume	addr:absolute
		jmp		A           ; acc -> ab*
		assume	addr:absolute
		jmp		a           ; acc -> ab*
		assume	addr:direct
		jmp		A           ; acc -> zp*
		assume	addr:direct
		jmp		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		jmp		            ; acc_i -> l*
		assume	addr:absolute
		jmp		            ; acc_i -> ab*
		assume	addr:direct
		jmp		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		jmp		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		jmp		bak24, bak24b ; bmv -> l*
		assume	addr:long
		jmp		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		jmp		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		jmp		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		jmp		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		jmp		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		jmp		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		jmp		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		jmp		#$12        ; imm -> l*
		assume	addr:long
		jmp		#$1234      ; imm -> l*
		assume	addr:long
		jmp		#bakbyt     ; imm -> l*
		assume	addr:long
		jmp		#bakwrd     ; imm -> l*
		assume	addr:long
		jmp		#fwdbyt     ; imm -> l*
		assume	addr:long
		jmp		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		jmp		#$12        ; imm -> ab*
		assume	addr:absolute
		jmp		#$1234      ; imm -> ab*
		assume	addr:absolute
		jmp		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		jmp		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		jmp		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		jmp		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		jmp		#$12        ; imm -> zp*
		assume	addr:direct
		jmp		#$1234      ; imm -> zp*
		assume	addr:direct
		jmp		#bakbyt     ; imm -> zp*
		assume	addr:direct
		jmp		#bakwrd     ; imm -> zp*
		assume	addr:direct
		jmp		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		jmp		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		jmp		            ; imp -> l*
		assume	addr:absolute
		jmp		            ; imp -> ab*
		assume	addr:direct
		jmp		            ; imp -> zp*

		; lab

		assume	addr:direct
		jmp		$123456     ; lab -> zp*
		assume	addr:direct
		jmp		bak24       ; lab -> zp*
		assume	addr:direct
		jmp		fwd24       ; lab -> zp*

		; labi

		assume	addr:direct
		jmp		($1234)     ; labi -> zp*
		assume	addr:direct
		jmp		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		jmp		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		jmp		$123456,x   ; labx -> l*
		assume	addr:long
		jmp		bak24,x     ; labx -> l*
		assume	addr:long
		jmp		fwd24,x     ; labx -> l*
		assume	addr:absolute
		jmp		$123456,x   ; labx -> ab*
		assume	addr:absolute
		jmp		bak24,x     ; labx -> ab*
		assume	addr:absolute
		jmp		fwd24,x     ; labx -> ab*
		assume	addr:direct
		jmp		$123456,x   ; labx -> zp*
		assume	addr:direct
		jmp		bak24,x     ; labx -> zp*
		assume	addr:direct
		jmp		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:direct
		jmp		+           ; lpcr -> zp*
		assume	addr:direct
		jmp		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		jmp		[$12]       ; lzpi -> l*
		assume	addr:long
		jmp		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		jmp		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		jmp		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		jmp		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		jmp		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		jmp		[$12]       ; lzpi -> zp*
		assume	addr:direct
		jmp		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		jmp		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		jmp		[$12],y     ; lzpiy -> l*
		assume	addr:long
		jmp		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		jmp		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		jmp		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		jmp		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		jmp		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		jmp		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		jmp		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		jmp		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:direct
		jmp		+           ; pcr -> zp*
		assume	addr:direct
		jmp		-           ; pcr -> zp*

		; sr

		assume	addr:long
		jmp		$12,s       ; sr -> l*
		assume	addr:long
		jmp		bakbyt,s    ; sr -> l*
		assume	addr:long
		jmp		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		jmp		$12,s       ; sr -> ab*
		assume	addr:absolute
		jmp		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		jmp		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		jmp		$12,s       ; sr -> zp*
		assume	addr:direct
		jmp		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		jmp		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		jmp		($12,s),y   ; sriy -> l*
		assume	addr:long
		jmp		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		jmp		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		jmp		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		jmp		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		jmp		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		jmp		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		jmp		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		jmp		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:direct
		jmp		$12         ; zp -> zp*
		assume	addr:direct
		jmp		bakbyt      ; zp -> zp*
		assume	addr:direct
		jmp		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:direct
		jmp		($12)       ; zpi -> zp*
		assume	addr:direct
		jmp		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		jmp		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		jmp		($12),y     ; zpiy -> l*
		assume	addr:long
		jmp		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		jmp		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		jmp		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		jmp		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		jmp		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		jmp		($12),y     ; zpiy -> zp*
		assume	addr:direct
		jmp		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		jmp		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		jmp		$12,x       ; zpx -> l*
		assume	addr:long
		jmp		bakbyt,x    ; zpx -> l*
		assume	addr:long
		jmp		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		jmp		$12,x       ; zpx -> ab*
		assume	addr:absolute
		jmp		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		jmp		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		jmp		$12,x       ; zpx -> zp*
		assume	addr:direct
		jmp		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		jmp		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		jmp		($12,x)     ; zpxi -> l*
		assume	addr:long
		jmp		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		jmp		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:direct
		jmp		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		jmp		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		jmp		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		jmp		$12,y       ; zpy -> l*
		assume	addr:long
		jmp		bakbyt,y    ; zpy -> l*
		assume	addr:long
		jmp		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		jmp		$12,y       ; zpy -> ab*
		assume	addr:absolute
		jmp		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		jmp		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		jmp		$12,y       ; zpy -> zp*
		assume	addr:direct
		jmp		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		jmp		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; JSL

 -
		; ab

		assume	addr:absolute
		jsl		$1234       ; ab -> ab*
		assume	addr:absolute
		jsl		bakwrd      ; ab -> ab*
		assume	addr:absolute
		jsl		fwdwrd      ; ab -> ab*
		assume	addr:direct
		jsl		$1234       ; ab -> zp*
		assume	addr:direct
		jsl		bakwrd      ; ab -> zp*
		assume	addr:direct
		jsl		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		jsl		($1234)     ; abi -> l*
		assume	addr:long
		jsl		(bakwrd)    ; abi -> l*
		assume	addr:long
		jsl		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		jsl		($1234)     ; abi -> ab*
		assume	addr:absolute
		jsl		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		jsl		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		jsl		($1234)     ; abi -> zp*
		assume	addr:direct
		jsl		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		jsl		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		jsl		$1234,x     ; abx -> l*
		assume	addr:long
		jsl		bakwrd,x    ; abx -> l*
		assume	addr:long
		jsl		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		jsl		$1234,x     ; abx -> ab*
		assume	addr:absolute
		jsl		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		jsl		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		jsl		$1234,x     ; abx -> zp*
		assume	addr:direct
		jsl		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		jsl		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		jsl		($1234,x)   ; abxi -> l*
		assume	addr:long
		jsl		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		jsl		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		jsl		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		jsl		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		jsl		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		jsl		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		jsl		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		jsl		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		jsl		$1234,y     ; aby -> l*
		assume	addr:long
		jsl		bakwrd,y    ; aby -> l*
		assume	addr:long
		jsl		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		jsl		$1234,y     ; aby -> ab*
		assume	addr:absolute
		jsl		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		jsl		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		jsl		$1234,y     ; aby -> zp*
		assume	addr:direct
		jsl		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		jsl		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		jsl		A           ; acc -> l*
		assume	addr:long
		jsl		a           ; acc -> l*
		assume	addr:absolute
		jsl		A           ; acc -> ab*
		assume	addr:absolute
		jsl		a           ; acc -> ab*
		assume	addr:direct
		jsl		A           ; acc -> zp*
		assume	addr:direct
		jsl		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		jsl		            ; acc_i -> l*
		assume	addr:absolute
		jsl		            ; acc_i -> ab*
		assume	addr:direct
		jsl		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		jsl		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		jsl		bak24, bak24b ; bmv -> l*
		assume	addr:long
		jsl		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		jsl		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		jsl		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		jsl		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		jsl		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		jsl		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		jsl		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		jsl		#$12        ; imm -> l*
		assume	addr:long
		jsl		#$1234      ; imm -> l*
		assume	addr:long
		jsl		#bakbyt     ; imm -> l*
		assume	addr:long
		jsl		#bakwrd     ; imm -> l*
		assume	addr:long
		jsl		#fwdbyt     ; imm -> l*
		assume	addr:long
		jsl		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		jsl		#$12        ; imm -> ab*
		assume	addr:absolute
		jsl		#$1234      ; imm -> ab*
		assume	addr:absolute
		jsl		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		jsl		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		jsl		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		jsl		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		jsl		#$12        ; imm -> zp*
		assume	addr:direct
		jsl		#$1234      ; imm -> zp*
		assume	addr:direct
		jsl		#bakbyt     ; imm -> zp*
		assume	addr:direct
		jsl		#bakwrd     ; imm -> zp*
		assume	addr:direct
		jsl		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		jsl		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		jsl		            ; imp -> l*
		assume	addr:absolute
		jsl		            ; imp -> ab*
		assume	addr:direct
		jsl		            ; imp -> zp*

		; lab

		assume	addr:absolute
		jsl		$123456     ; lab -> ab*
		assume	addr:absolute
		jsl		bak24       ; lab -> ab*
		assume	addr:absolute
		jsl		fwd24       ; lab -> ab*
		assume	addr:direct
		jsl		$123456     ; lab -> zp*
		assume	addr:direct
		jsl		bak24       ; lab -> zp*
		assume	addr:direct
		jsl		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		jsl		($1234)     ; labi -> l*
		assume	addr:long
		jsl		(bakwrd)    ; labi -> l*
		assume	addr:long
		jsl		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		jsl		($1234)     ; labi -> ab*
		assume	addr:absolute
		jsl		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		jsl		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		jsl		($1234)     ; labi -> zp*
		assume	addr:direct
		jsl		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		jsl		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		jsl		$123456,x   ; labx -> l*
		assume	addr:long
		jsl		bak24,x     ; labx -> l*
		assume	addr:long
		jsl		fwd24,x     ; labx -> l*
		assume	addr:absolute
		jsl		$123456,x   ; labx -> ab*
		assume	addr:absolute
		jsl		bak24,x     ; labx -> ab*
		assume	addr:absolute
		jsl		fwd24,x     ; labx -> ab*
		assume	addr:direct
		jsl		$123456,x   ; labx -> zp*
		assume	addr:direct
		jsl		bak24,x     ; labx -> zp*
		assume	addr:direct
		jsl		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:absolute
		jsl		+           ; lpcr -> ab*
		assume	addr:absolute
		jsl		-           ; lpcr -> ab*
		assume	addr:direct
		jsl		+           ; lpcr -> zp*
		assume	addr:direct
		jsl		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		jsl		[$12]       ; lzpi -> l*
		assume	addr:long
		jsl		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		jsl		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		jsl		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		jsl		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		jsl		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		jsl		[$12]       ; lzpi -> zp*
		assume	addr:direct
		jsl		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		jsl		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		jsl		[$12],y     ; lzpiy -> l*
		assume	addr:long
		jsl		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		jsl		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		jsl		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		jsl		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		jsl		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		jsl		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		jsl		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		jsl		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:absolute
		jsl		+           ; pcr -> ab*
		assume	addr:absolute
		jsl		-           ; pcr -> ab*
		assume	addr:direct
		jsl		+           ; pcr -> zp*
		assume	addr:direct
		jsl		-           ; pcr -> zp*

		; sr

		assume	addr:long
		jsl		$12,s       ; sr -> l*
		assume	addr:long
		jsl		bakbyt,s    ; sr -> l*
		assume	addr:long
		jsl		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		jsl		$12,s       ; sr -> ab*
		assume	addr:absolute
		jsl		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		jsl		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		jsl		$12,s       ; sr -> zp*
		assume	addr:direct
		jsl		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		jsl		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		jsl		($12,s),y   ; sriy -> l*
		assume	addr:long
		jsl		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		jsl		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		jsl		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		jsl		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		jsl		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		jsl		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		jsl		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		jsl		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:absolute
		jsl		$12         ; zp -> ab*
		assume	addr:absolute
		jsl		bakbyt      ; zp -> ab*
		assume	addr:absolute
		jsl		fwdbyt      ; zp -> ab*
		assume	addr:direct
		jsl		$12         ; zp -> zp*
		assume	addr:direct
		jsl		bakbyt      ; zp -> zp*
		assume	addr:direct
		jsl		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		jsl		($12)       ; zpi -> l*
		assume	addr:long
		jsl		(bakbyt)    ; zpi -> l*
		assume	addr:long
		jsl		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		jsl		($12)       ; zpi -> ab*
		assume	addr:absolute
		jsl		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		jsl		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		jsl		($12)       ; zpi -> zp*
		assume	addr:direct
		jsl		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		jsl		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		jsl		($12),y     ; zpiy -> l*
		assume	addr:long
		jsl		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		jsl		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		jsl		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		jsl		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		jsl		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		jsl		($12),y     ; zpiy -> zp*
		assume	addr:direct
		jsl		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		jsl		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		jsl		$12,x       ; zpx -> l*
		assume	addr:long
		jsl		bakbyt,x    ; zpx -> l*
		assume	addr:long
		jsl		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		jsl		$12,x       ; zpx -> ab*
		assume	addr:absolute
		jsl		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		jsl		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		jsl		$12,x       ; zpx -> zp*
		assume	addr:direct
		jsl		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		jsl		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		jsl		($12,x)     ; zpxi -> l*
		assume	addr:long
		jsl		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		jsl		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		jsl		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		jsl		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		jsl		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		jsl		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		jsl		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		jsl		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		jsl		$12,y       ; zpy -> l*
		assume	addr:long
		jsl		bakbyt,y    ; zpy -> l*
		assume	addr:long
		jsl		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		jsl		$12,y       ; zpy -> ab*
		assume	addr:absolute
		jsl		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		jsl		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		jsl		$12,y       ; zpy -> zp*
		assume	addr:direct
		jsl		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		jsl		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; JSR

 -
		; ab

		assume	addr:direct
		jsr		$1234       ; ab -> zp*
		assume	addr:direct
		jsr		bakwrd      ; ab -> zp*
		assume	addr:direct
		jsr		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		jsr		($1234)     ; abi -> l*
		assume	addr:long
		jsr		(bakwrd)    ; abi -> l*
		assume	addr:long
		jsr		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		jsr		($1234)     ; abi -> ab*
		assume	addr:absolute
		jsr		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		jsr		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		jsr		($1234)     ; abi -> zp*
		assume	addr:direct
		jsr		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		jsr		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		jsr		$1234,x     ; abx -> l*
		assume	addr:long
		jsr		bakwrd,x    ; abx -> l*
		assume	addr:long
		jsr		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		jsr		$1234,x     ; abx -> ab*
		assume	addr:absolute
		jsr		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		jsr		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		jsr		$1234,x     ; abx -> zp*
		assume	addr:direct
		jsr		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		jsr		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		jsr		($1234,x)   ; abxi -> l*
		assume	addr:long
		jsr		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		jsr		(fwdwrd,x)  ; abxi -> l*
		assume	addr:direct
		jsr		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		jsr		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		jsr		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		jsr		$1234,y     ; aby -> l*
		assume	addr:long
		jsr		bakwrd,y    ; aby -> l*
		assume	addr:long
		jsr		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		jsr		$1234,y     ; aby -> ab*
		assume	addr:absolute
		jsr		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		jsr		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		jsr		$1234,y     ; aby -> zp*
		assume	addr:direct
		jsr		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		jsr		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		jsr		A           ; acc -> l*
		assume	addr:long
		jsr		a           ; acc -> l*
		assume	addr:absolute
		jsr		A           ; acc -> ab*
		assume	addr:absolute
		jsr		a           ; acc -> ab*
		assume	addr:direct
		jsr		A           ; acc -> zp*
		assume	addr:direct
		jsr		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		jsr		            ; acc_i -> l*
		assume	addr:absolute
		jsr		            ; acc_i -> ab*
		assume	addr:direct
		jsr		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		jsr		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		jsr		bak24, bak24b ; bmv -> l*
		assume	addr:long
		jsr		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		jsr		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		jsr		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		jsr		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		jsr		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		jsr		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		jsr		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		jsr		#$12        ; imm -> l*
		assume	addr:long
		jsr		#$1234      ; imm -> l*
		assume	addr:long
		jsr		#bakbyt     ; imm -> l*
		assume	addr:long
		jsr		#bakwrd     ; imm -> l*
		assume	addr:long
		jsr		#fwdbyt     ; imm -> l*
		assume	addr:long
		jsr		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		jsr		#$12        ; imm -> ab*
		assume	addr:absolute
		jsr		#$1234      ; imm -> ab*
		assume	addr:absolute
		jsr		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		jsr		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		jsr		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		jsr		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		jsr		#$12        ; imm -> zp*
		assume	addr:direct
		jsr		#$1234      ; imm -> zp*
		assume	addr:direct
		jsr		#bakbyt     ; imm -> zp*
		assume	addr:direct
		jsr		#bakwrd     ; imm -> zp*
		assume	addr:direct
		jsr		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		jsr		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		jsr		            ; imp -> l*
		assume	addr:absolute
		jsr		            ; imp -> ab*
		assume	addr:direct
		jsr		            ; imp -> zp*

		; lab

		assume	addr:direct
		jsr		$123456     ; lab -> zp*
		assume	addr:direct
		jsr		bak24       ; lab -> zp*
		assume	addr:direct
		jsr		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		jsr		($1234)     ; labi -> l*
		assume	addr:long
		jsr		(bakwrd)    ; labi -> l*
		assume	addr:long
		jsr		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		jsr		($1234)     ; labi -> ab*
		assume	addr:absolute
		jsr		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		jsr		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		jsr		($1234)     ; labi -> zp*
		assume	addr:direct
		jsr		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		jsr		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		jsr		$123456,x   ; labx -> l*
		assume	addr:long
		jsr		bak24,x     ; labx -> l*
		assume	addr:long
		jsr		fwd24,x     ; labx -> l*
		assume	addr:absolute
		jsr		$123456,x   ; labx -> ab*
		assume	addr:absolute
		jsr		bak24,x     ; labx -> ab*
		assume	addr:absolute
		jsr		fwd24,x     ; labx -> ab*
		assume	addr:direct
		jsr		$123456,x   ; labx -> zp*
		assume	addr:direct
		jsr		bak24,x     ; labx -> zp*
		assume	addr:direct
		jsr		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:direct
		jsr		+           ; lpcr -> zp*
		assume	addr:direct
		jsr		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		jsr		[$12]       ; lzpi -> l*
		assume	addr:long
		jsr		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		jsr		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		jsr		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		jsr		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		jsr		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		jsr		[$12]       ; lzpi -> zp*
		assume	addr:direct
		jsr		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		jsr		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		jsr		[$12],y     ; lzpiy -> l*
		assume	addr:long
		jsr		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		jsr		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		jsr		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		jsr		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		jsr		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		jsr		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		jsr		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		jsr		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:direct
		jsr		+           ; pcr -> zp*
		assume	addr:direct
		jsr		-           ; pcr -> zp*

		; sr

		assume	addr:long
		jsr		$12,s       ; sr -> l*
		assume	addr:long
		jsr		bakbyt,s    ; sr -> l*
		assume	addr:long
		jsr		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		jsr		$12,s       ; sr -> ab*
		assume	addr:absolute
		jsr		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		jsr		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		jsr		$12,s       ; sr -> zp*
		assume	addr:direct
		jsr		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		jsr		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		jsr		($12,s),y   ; sriy -> l*
		assume	addr:long
		jsr		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		jsr		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		jsr		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		jsr		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		jsr		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		jsr		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		jsr		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		jsr		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:direct
		jsr		$12         ; zp -> zp*
		assume	addr:direct
		jsr		bakbyt      ; zp -> zp*
		assume	addr:direct
		jsr		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		jsr		($12)       ; zpi -> l*
		assume	addr:long
		jsr		(bakbyt)    ; zpi -> l*
		assume	addr:long
		jsr		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		jsr		($12)       ; zpi -> ab*
		assume	addr:absolute
		jsr		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		jsr		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		jsr		($12)       ; zpi -> zp*
		assume	addr:direct
		jsr		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		jsr		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		jsr		($12),y     ; zpiy -> l*
		assume	addr:long
		jsr		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		jsr		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		jsr		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		jsr		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		jsr		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		jsr		($12),y     ; zpiy -> zp*
		assume	addr:direct
		jsr		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		jsr		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		jsr		$12,x       ; zpx -> l*
		assume	addr:long
		jsr		bakbyt,x    ; zpx -> l*
		assume	addr:long
		jsr		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		jsr		$12,x       ; zpx -> ab*
		assume	addr:absolute
		jsr		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		jsr		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		jsr		$12,x       ; zpx -> zp*
		assume	addr:direct
		jsr		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		jsr		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		jsr		($12,x)     ; zpxi -> l*
		assume	addr:long
		jsr		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		jsr		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:direct
		jsr		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		jsr		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		jsr		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		jsr		$12,y       ; zpy -> l*
		assume	addr:long
		jsr		bakbyt,y    ; zpy -> l*
		assume	addr:long
		jsr		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		jsr		$12,y       ; zpy -> ab*
		assume	addr:absolute
		jsr		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		jsr		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		jsr		$12,y       ; zpy -> zp*
		assume	addr:direct
		jsr		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		jsr		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; LDX

 -
		; ab

		assume	addr:long
		ldx		$1234       ; ab -> l*
		assume	addr:long
		ldx		bakwrd      ; ab -> l*
		assume	addr:long
		ldx		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		ldx		($1234)     ; abi -> l*
		assume	addr:long
		ldx		(bakwrd)    ; abi -> l*
		assume	addr:long
		ldx		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		ldx		($1234)     ; abi -> ab*
		assume	addr:absolute
		ldx		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		ldx		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		ldx		($1234)     ; abi -> zp*
		assume	addr:direct
		ldx		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		ldx		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		ldx		$1234,x     ; abx -> l*
		assume	addr:long
		ldx		bakwrd,x    ; abx -> l*
		assume	addr:long
		ldx		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		ldx		$1234,x     ; abx -> ab*
		assume	addr:absolute
		ldx		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		ldx		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		ldx		$1234,x     ; abx -> zp*
		assume	addr:direct
		ldx		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		ldx		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		ldx		($1234,x)   ; abxi -> l*
		assume	addr:long
		ldx		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		ldx		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		ldx		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		ldx		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		ldx		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		ldx		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		ldx		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		ldx		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		ldx		$1234,y     ; aby -> l*
		assume	addr:long
		ldx		bakwrd,y    ; aby -> l*
		assume	addr:long
		ldx		fwdwrd,y    ; aby -> l*

		; acc

		assume	addr:long
		ldx		A           ; acc -> l*
		assume	addr:long
		ldx		a           ; acc -> l*
		assume	addr:absolute
		ldx		A           ; acc -> ab*
		assume	addr:absolute
		ldx		a           ; acc -> ab*
		assume	addr:direct
		ldx		A           ; acc -> zp*
		assume	addr:direct
		ldx		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		ldx		            ; acc_i -> l*
		assume	addr:absolute
		ldx		            ; acc_i -> ab*
		assume	addr:direct
		ldx		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		ldx		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		ldx		bak24, bak24b ; bmv -> l*
		assume	addr:long
		ldx		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		ldx		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		ldx		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		ldx		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		ldx		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		ldx		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		ldx		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		ldx		#$12        ; imm -> l*
		assume	addr:long
		ldx		#$1234      ; imm -> l*
		assume	addr:long
		ldx		#bakbyt     ; imm -> l*
		assume	addr:long
		ldx		#bakwrd     ; imm -> l*
		assume	addr:long
		ldx		#fwdbyt     ; imm -> l*
		assume	addr:long
		ldx		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		ldx		#$12        ; imm -> ab*
		assume	addr:absolute
		ldx		#$1234      ; imm -> ab*
		assume	addr:absolute
		ldx		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		ldx		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		ldx		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		ldx		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		ldx		#$12        ; imm -> zp*
		assume	addr:direct
		ldx		#$1234      ; imm -> zp*
		assume	addr:direct
		ldx		#bakbyt     ; imm -> zp*
		assume	addr:direct
		ldx		#bakwrd     ; imm -> zp*
		assume	addr:direct
		ldx		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		ldx		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		ldx		            ; imp -> l*
		assume	addr:absolute
		ldx		            ; imp -> ab*
		assume	addr:direct
		ldx		            ; imp -> zp*

		; lab

		assume	addr:long
		ldx		$123456     ; lab -> l*
		assume	addr:long
		ldx		bak24       ; lab -> l*
		assume	addr:long
		ldx		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		ldx		($1234)     ; labi -> l*
		assume	addr:long
		ldx		(bakwrd)    ; labi -> l*
		assume	addr:long
		ldx		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		ldx		($1234)     ; labi -> ab*
		assume	addr:absolute
		ldx		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		ldx		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		ldx		($1234)     ; labi -> zp*
		assume	addr:direct
		ldx		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		ldx		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		ldx		$123456,x   ; labx -> l*
		assume	addr:long
		ldx		bak24,x     ; labx -> l*
		assume	addr:long
		ldx		fwd24,x     ; labx -> l*
		assume	addr:absolute
		ldx		$123456,x   ; labx -> ab*
		assume	addr:absolute
		ldx		bak24,x     ; labx -> ab*
		assume	addr:absolute
		ldx		fwd24,x     ; labx -> ab*
		assume	addr:direct
		ldx		$123456,x   ; labx -> zp*
		assume	addr:direct
		ldx		bak24,x     ; labx -> zp*
		assume	addr:direct
		ldx		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		ldx		+           ; lpcr -> l*
		assume	addr:long
		ldx		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		ldx		[$12]       ; lzpi -> l*
		assume	addr:long
		ldx		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		ldx		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		ldx		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		ldx		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		ldx		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		ldx		[$12]       ; lzpi -> zp*
		assume	addr:direct
		ldx		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		ldx		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		ldx		[$12],y     ; lzpiy -> l*
		assume	addr:long
		ldx		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		ldx		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		ldx		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		ldx		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		ldx		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		ldx		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		ldx		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		ldx		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		ldx		+           ; pcr -> l*
		assume	addr:long
		ldx		-           ; pcr -> l*

		; sr

		assume	addr:long
		ldx		$12,s       ; sr -> l*
		assume	addr:long
		ldx		bakbyt,s    ; sr -> l*
		assume	addr:long
		ldx		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		ldx		$12,s       ; sr -> ab*
		assume	addr:absolute
		ldx		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		ldx		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		ldx		$12,s       ; sr -> zp*
		assume	addr:direct
		ldx		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		ldx		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		ldx		($12,s),y   ; sriy -> l*
		assume	addr:long
		ldx		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		ldx		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		ldx		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		ldx		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		ldx		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		ldx		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		ldx		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		ldx		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		ldx		$12         ; zp -> l*
		assume	addr:long
		ldx		bakbyt      ; zp -> l*
		assume	addr:long
		ldx		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		ldx		($12)       ; zpi -> l*
		assume	addr:long
		ldx		(bakbyt)    ; zpi -> l*
		assume	addr:long
		ldx		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		ldx		($12)       ; zpi -> ab*
		assume	addr:absolute
		ldx		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		ldx		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		ldx		($12)       ; zpi -> zp*
		assume	addr:direct
		ldx		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		ldx		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		ldx		($12),y     ; zpiy -> l*
		assume	addr:long
		ldx		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		ldx		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		ldx		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		ldx		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		ldx		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		ldx		($12),y     ; zpiy -> zp*
		assume	addr:direct
		ldx		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		ldx		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		ldx		$12,x       ; zpx -> l*
		assume	addr:long
		ldx		bakbyt,x    ; zpx -> l*
		assume	addr:long
		ldx		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		ldx		$12,x       ; zpx -> ab*
		assume	addr:absolute
		ldx		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		ldx		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		ldx		$12,x       ; zpx -> zp*
		assume	addr:direct
		ldx		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		ldx		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		ldx		($12,x)     ; zpxi -> l*
		assume	addr:long
		ldx		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		ldx		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		ldx		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		ldx		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		ldx		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		ldx		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		ldx		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		ldx		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		ldx		$12,y       ; zpy -> l*
		assume	addr:long
		ldx		bakbyt,y    ; zpy -> l*
		assume	addr:long
		ldx		fwdbyt,y    ; zpy -> l*

 +

		; check:
		; MVN
		; MVP

 -
		; ab

		assume	addr:long
		mvn		$1234       ; ab -> l*
		assume	addr:long
		mvn		bakwrd      ; ab -> l*
		assume	addr:long
		mvn		fwdwrd      ; ab -> l*
		assume	addr:absolute
		mvn		$1234       ; ab -> ab*
		assume	addr:absolute
		mvn		bakwrd      ; ab -> ab*
		assume	addr:absolute
		mvn		fwdwrd      ; ab -> ab*
		assume	addr:direct
		mvn		$1234       ; ab -> zp*
		assume	addr:direct
		mvn		bakwrd      ; ab -> zp*
		assume	addr:direct
		mvn		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		mvn		($1234)     ; abi -> l*
		assume	addr:long
		mvn		(bakwrd)    ; abi -> l*
		assume	addr:long
		mvn		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		mvn		($1234)     ; abi -> ab*
		assume	addr:absolute
		mvn		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		mvn		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		mvn		($1234)     ; abi -> zp*
		assume	addr:direct
		mvn		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		mvn		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		mvn		$1234,x     ; abx -> l*
		assume	addr:long
		mvn		bakwrd,x    ; abx -> l*
		assume	addr:long
		mvn		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		mvn		$1234,x     ; abx -> ab*
		assume	addr:absolute
		mvn		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		mvn		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		mvn		$1234,x     ; abx -> zp*
		assume	addr:direct
		mvn		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		mvn		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		mvn		($1234,x)   ; abxi -> l*
		assume	addr:long
		mvn		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		mvn		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		mvn		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		mvn		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		mvn		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		mvn		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		mvn		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		mvn		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		mvn		$1234,y     ; aby -> l*
		assume	addr:long
		mvn		bakwrd,y    ; aby -> l*
		assume	addr:long
		mvn		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		mvn		$1234,y     ; aby -> ab*
		assume	addr:absolute
		mvn		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		mvn		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		mvn		$1234,y     ; aby -> zp*
		assume	addr:direct
		mvn		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		mvn		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		mvn		A           ; acc -> l*
		assume	addr:long
		mvn		a           ; acc -> l*
		assume	addr:absolute
		mvn		A           ; acc -> ab*
		assume	addr:absolute
		mvn		a           ; acc -> ab*
		assume	addr:direct
		mvn		A           ; acc -> zp*
		assume	addr:direct
		mvn		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		mvn		            ; acc_i -> l*
		assume	addr:absolute
		mvn		            ; acc_i -> ab*
		assume	addr:direct
		mvn		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		mvn		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		mvn		bak24, bak24b ; bmv -> l*
		assume	addr:long
		mvn		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		mvn		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		mvn		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		mvn		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		mvn		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		mvn		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		mvn		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		mvn		#$12        ; imm -> l*
		assume	addr:long
		mvn		#$1234      ; imm -> l*
		assume	addr:long
		mvn		#bakbyt     ; imm -> l*
		assume	addr:long
		mvn		#bakwrd     ; imm -> l*
		assume	addr:long
		mvn		#fwdbyt     ; imm -> l*
		assume	addr:long
		mvn		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		mvn		#$12        ; imm -> ab*
		assume	addr:absolute
		mvn		#$1234      ; imm -> ab*
		assume	addr:absolute
		mvn		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		mvn		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		mvn		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		mvn		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		mvn		#$12        ; imm -> zp*
		assume	addr:direct
		mvn		#$1234      ; imm -> zp*
		assume	addr:direct
		mvn		#bakbyt     ; imm -> zp*
		assume	addr:direct
		mvn		#bakwrd     ; imm -> zp*
		assume	addr:direct
		mvn		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		mvn		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		mvn		            ; imp -> l*
		assume	addr:absolute
		mvn		            ; imp -> ab*
		assume	addr:direct
		mvn		            ; imp -> zp*

		; lab

		assume	addr:long
		mvn		$123456     ; lab -> l*
		assume	addr:long
		mvn		bak24       ; lab -> l*
		assume	addr:long
		mvn		fwd24       ; lab -> l*
		assume	addr:absolute
		mvn		$123456     ; lab -> ab*
		assume	addr:absolute
		mvn		bak24       ; lab -> ab*
		assume	addr:absolute
		mvn		fwd24       ; lab -> ab*
		assume	addr:direct
		mvn		$123456     ; lab -> zp*
		assume	addr:direct
		mvn		bak24       ; lab -> zp*
		assume	addr:direct
		mvn		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		mvn		($1234)     ; labi -> l*
		assume	addr:long
		mvn		(bakwrd)    ; labi -> l*
		assume	addr:long
		mvn		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		mvn		($1234)     ; labi -> ab*
		assume	addr:absolute
		mvn		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		mvn		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		mvn		($1234)     ; labi -> zp*
		assume	addr:direct
		mvn		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		mvn		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		mvn		$123456,x   ; labx -> l*
		assume	addr:long
		mvn		bak24,x     ; labx -> l*
		assume	addr:long
		mvn		fwd24,x     ; labx -> l*
		assume	addr:absolute
		mvn		$123456,x   ; labx -> ab*
		assume	addr:absolute
		mvn		bak24,x     ; labx -> ab*
		assume	addr:absolute
		mvn		fwd24,x     ; labx -> ab*
		assume	addr:direct
		mvn		$123456,x   ; labx -> zp*
		assume	addr:direct
		mvn		bak24,x     ; labx -> zp*
		assume	addr:direct
		mvn		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		mvn		+           ; lpcr -> l*
		assume	addr:long
		mvn		-           ; lpcr -> l*
		assume	addr:absolute
		mvn		+           ; lpcr -> ab*
		assume	addr:absolute
		mvn		-           ; lpcr -> ab*
		assume	addr:direct
		mvn		+           ; lpcr -> zp*
		assume	addr:direct
		mvn		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		mvn		[$12]       ; lzpi -> l*
		assume	addr:long
		mvn		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		mvn		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		mvn		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		mvn		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		mvn		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		mvn		[$12]       ; lzpi -> zp*
		assume	addr:direct
		mvn		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		mvn		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		mvn		[$12],y     ; lzpiy -> l*
		assume	addr:long
		mvn		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		mvn		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		mvn		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		mvn		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		mvn		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		mvn		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		mvn		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		mvn		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		mvn		+           ; pcr -> l*
		assume	addr:long
		mvn		-           ; pcr -> l*
		assume	addr:absolute
		mvn		+           ; pcr -> ab*
		assume	addr:absolute
		mvn		-           ; pcr -> ab*
		assume	addr:direct
		mvn		+           ; pcr -> zp*
		assume	addr:direct
		mvn		-           ; pcr -> zp*

		; sr

		assume	addr:long
		mvn		$12,s       ; sr -> l*
		assume	addr:long
		mvn		bakbyt,s    ; sr -> l*
		assume	addr:long
		mvn		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		mvn		$12,s       ; sr -> ab*
		assume	addr:absolute
		mvn		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		mvn		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		mvn		$12,s       ; sr -> zp*
		assume	addr:direct
		mvn		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		mvn		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		mvn		($12,s),y   ; sriy -> l*
		assume	addr:long
		mvn		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		mvn		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		mvn		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		mvn		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		mvn		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		mvn		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		mvn		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		mvn		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		mvn		$12         ; zp -> l*
		assume	addr:long
		mvn		bakbyt      ; zp -> l*
		assume	addr:long
		mvn		fwdbyt      ; zp -> l*
		assume	addr:absolute
		mvn		$12         ; zp -> ab*
		assume	addr:absolute
		mvn		bakbyt      ; zp -> ab*
		assume	addr:absolute
		mvn		fwdbyt      ; zp -> ab*
		assume	addr:direct
		mvn		$12         ; zp -> zp*
		assume	addr:direct
		mvn		bakbyt      ; zp -> zp*
		assume	addr:direct
		mvn		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		mvn		($12)       ; zpi -> l*
		assume	addr:long
		mvn		(bakbyt)    ; zpi -> l*
		assume	addr:long
		mvn		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		mvn		($12)       ; zpi -> ab*
		assume	addr:absolute
		mvn		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		mvn		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		mvn		($12)       ; zpi -> zp*
		assume	addr:direct
		mvn		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		mvn		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		mvn		($12),y     ; zpiy -> l*
		assume	addr:long
		mvn		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		mvn		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		mvn		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		mvn		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		mvn		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		mvn		($12),y     ; zpiy -> zp*
		assume	addr:direct
		mvn		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		mvn		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		mvn		$12,x       ; zpx -> l*
		assume	addr:long
		mvn		bakbyt,x    ; zpx -> l*
		assume	addr:long
		mvn		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		mvn		$12,x       ; zpx -> ab*
		assume	addr:absolute
		mvn		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		mvn		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		mvn		$12,x       ; zpx -> zp*
		assume	addr:direct
		mvn		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		mvn		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		mvn		($12,x)     ; zpxi -> l*
		assume	addr:long
		mvn		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		mvn		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		mvn		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		mvn		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		mvn		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		mvn		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		mvn		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		mvn		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		mvn		$12,y       ; zpy -> l*
		assume	addr:long
		mvn		bakbyt,y    ; zpy -> l*
		assume	addr:long
		mvn		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		mvn		$12,y       ; zpy -> ab*
		assume	addr:absolute
		mvn		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		mvn		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		mvn		$12,y       ; zpy -> zp*
		assume	addr:direct
		mvn		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		mvn		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; PEA

 -
		; ab

		assume	addr:long
		pea		$1234       ; ab -> l*
		assume	addr:long
		pea		bakwrd      ; ab -> l*
		assume	addr:long
		pea		fwdwrd      ; ab -> l*
		assume	addr:direct
		pea		$1234       ; ab -> zp*
		assume	addr:direct
		pea		bakwrd      ; ab -> zp*
		assume	addr:direct
		pea		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		pea		($1234)     ; abi -> l*
		assume	addr:long
		pea		(bakwrd)    ; abi -> l*
		assume	addr:long
		pea		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		pea		($1234)     ; abi -> ab*
		assume	addr:absolute
		pea		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		pea		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		pea		($1234)     ; abi -> zp*
		assume	addr:direct
		pea		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		pea		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		pea		$1234,x     ; abx -> l*
		assume	addr:long
		pea		bakwrd,x    ; abx -> l*
		assume	addr:long
		pea		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		pea		$1234,x     ; abx -> ab*
		assume	addr:absolute
		pea		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		pea		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		pea		$1234,x     ; abx -> zp*
		assume	addr:direct
		pea		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		pea		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		pea		($1234,x)   ; abxi -> l*
		assume	addr:long
		pea		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		pea		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		pea		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		pea		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		pea		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		pea		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		pea		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		pea		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		pea		$1234,y     ; aby -> l*
		assume	addr:long
		pea		bakwrd,y    ; aby -> l*
		assume	addr:long
		pea		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		pea		$1234,y     ; aby -> ab*
		assume	addr:absolute
		pea		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		pea		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		pea		$1234,y     ; aby -> zp*
		assume	addr:direct
		pea		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		pea		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		pea		A           ; acc -> l*
		assume	addr:long
		pea		a           ; acc -> l*
		assume	addr:absolute
		pea		A           ; acc -> ab*
		assume	addr:absolute
		pea		a           ; acc -> ab*
		assume	addr:direct
		pea		A           ; acc -> zp*
		assume	addr:direct
		pea		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		pea		            ; acc_i -> l*
		assume	addr:absolute
		pea		            ; acc_i -> ab*
		assume	addr:direct
		pea		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		pea		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		pea		bak24, bak24b ; bmv -> l*
		assume	addr:long
		pea		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		pea		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		pea		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		pea		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		pea		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		pea		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		pea		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		pea		#$12        ; imm -> l*
		assume	addr:long
		pea		#$1234      ; imm -> l*
		assume	addr:long
		pea		#bakbyt     ; imm -> l*
		assume	addr:long
		pea		#bakwrd     ; imm -> l*
		assume	addr:long
		pea		#fwdbyt     ; imm -> l*
		assume	addr:long
		pea		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		pea		#$12        ; imm -> ab*
		assume	addr:absolute
		pea		#$1234      ; imm -> ab*
		assume	addr:absolute
		pea		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		pea		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		pea		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		pea		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		pea		#$12        ; imm -> zp*
		assume	addr:direct
		pea		#$1234      ; imm -> zp*
		assume	addr:direct
		pea		#bakbyt     ; imm -> zp*
		assume	addr:direct
		pea		#bakwrd     ; imm -> zp*
		assume	addr:direct
		pea		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		pea		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		pea		            ; imp -> l*
		assume	addr:absolute
		pea		            ; imp -> ab*
		assume	addr:direct
		pea		            ; imp -> zp*

		; lab

		assume	addr:long
		pea		$123456     ; lab -> l*
		assume	addr:long
		pea		bak24       ; lab -> l*
		assume	addr:long
		pea		fwd24       ; lab -> l*
		assume	addr:direct
		pea		$123456     ; lab -> zp*
		assume	addr:direct
		pea		bak24       ; lab -> zp*
		assume	addr:direct
		pea		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		pea		($1234)     ; labi -> l*
		assume	addr:long
		pea		(bakwrd)    ; labi -> l*
		assume	addr:long
		pea		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		pea		($1234)     ; labi -> ab*
		assume	addr:absolute
		pea		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		pea		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		pea		($1234)     ; labi -> zp*
		assume	addr:direct
		pea		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		pea		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		pea		$123456,x   ; labx -> l*
		assume	addr:long
		pea		bak24,x     ; labx -> l*
		assume	addr:long
		pea		fwd24,x     ; labx -> l*
		assume	addr:absolute
		pea		$123456,x   ; labx -> ab*
		assume	addr:absolute
		pea		bak24,x     ; labx -> ab*
		assume	addr:absolute
		pea		fwd24,x     ; labx -> ab*
		assume	addr:direct
		pea		$123456,x   ; labx -> zp*
		assume	addr:direct
		pea		bak24,x     ; labx -> zp*
		assume	addr:direct
		pea		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		pea		+           ; lpcr -> l*
		assume	addr:long
		pea		-           ; lpcr -> l*
		assume	addr:direct
		pea		+           ; lpcr -> zp*
		assume	addr:direct
		pea		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		pea		[$12]       ; lzpi -> l*
		assume	addr:long
		pea		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		pea		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		pea		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		pea		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		pea		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		pea		[$12]       ; lzpi -> zp*
		assume	addr:direct
		pea		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		pea		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		pea		[$12],y     ; lzpiy -> l*
		assume	addr:long
		pea		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		pea		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		pea		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		pea		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		pea		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		pea		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		pea		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		pea		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		pea		+           ; pcr -> l*
		assume	addr:long
		pea		-           ; pcr -> l*
		assume	addr:direct
		pea		+           ; pcr -> zp*
		assume	addr:direct
		pea		-           ; pcr -> zp*

		; sr

		assume	addr:long
		pea		$12,s       ; sr -> l*
		assume	addr:long
		pea		bakbyt,s    ; sr -> l*
		assume	addr:long
		pea		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		pea		$12,s       ; sr -> ab*
		assume	addr:absolute
		pea		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		pea		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		pea		$12,s       ; sr -> zp*
		assume	addr:direct
		pea		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		pea		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		pea		($12,s),y   ; sriy -> l*
		assume	addr:long
		pea		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		pea		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		pea		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		pea		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		pea		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		pea		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		pea		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		pea		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		pea		$12         ; zp -> l*
		assume	addr:long
		pea		bakbyt      ; zp -> l*
		assume	addr:long
		pea		fwdbyt      ; zp -> l*
		assume	addr:direct
		pea		$12         ; zp -> zp*
		assume	addr:direct
		pea		bakbyt      ; zp -> zp*
		assume	addr:direct
		pea		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		pea		($12)       ; zpi -> l*
		assume	addr:long
		pea		(bakbyt)    ; zpi -> l*
		assume	addr:long
		pea		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		pea		($12)       ; zpi -> ab*
		assume	addr:absolute
		pea		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		pea		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		pea		($12)       ; zpi -> zp*
		assume	addr:direct
		pea		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		pea		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		pea		($12),y     ; zpiy -> l*
		assume	addr:long
		pea		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		pea		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		pea		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		pea		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		pea		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		pea		($12),y     ; zpiy -> zp*
		assume	addr:direct
		pea		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		pea		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		pea		$12,x       ; zpx -> l*
		assume	addr:long
		pea		bakbyt,x    ; zpx -> l*
		assume	addr:long
		pea		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		pea		$12,x       ; zpx -> ab*
		assume	addr:absolute
		pea		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		pea		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		pea		$12,x       ; zpx -> zp*
		assume	addr:direct
		pea		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		pea		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		pea		($12,x)     ; zpxi -> l*
		assume	addr:long
		pea		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		pea		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		pea		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		pea		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		pea		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		pea		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		pea		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		pea		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		pea		$12,y       ; zpy -> l*
		assume	addr:long
		pea		bakbyt,y    ; zpy -> l*
		assume	addr:long
		pea		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		pea		$12,y       ; zpy -> ab*
		assume	addr:absolute
		pea		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		pea		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		pea		$12,y       ; zpy -> zp*
		assume	addr:direct
		pea		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		pea		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; PEI

 -
		; ab

		assume	addr:long
		pei		$1234       ; ab -> l*
		assume	addr:long
		pei		bakwrd      ; ab -> l*
		assume	addr:long
		pei		fwdwrd      ; ab -> l*
		assume	addr:absolute
		pei		$1234       ; ab -> ab*
		assume	addr:absolute
		pei		bakwrd      ; ab -> ab*
		assume	addr:absolute
		pei		fwdwrd      ; ab -> ab*

		; abi

		assume	addr:long
		pei		($1234)     ; abi -> l*
		assume	addr:long
		pei		(bakwrd)    ; abi -> l*
		assume	addr:long
		pei		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		pei		($1234)     ; abi -> ab*
		assume	addr:absolute
		pei		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		pei		(fwdwrd)    ; abi -> ab*

		; abx

		assume	addr:long
		pei		$1234,x     ; abx -> l*
		assume	addr:long
		pei		bakwrd,x    ; abx -> l*
		assume	addr:long
		pei		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		pei		$1234,x     ; abx -> ab*
		assume	addr:absolute
		pei		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		pei		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		pei		$1234,x     ; abx -> zp*
		assume	addr:direct
		pei		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		pei		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		pei		($1234,x)   ; abxi -> l*
		assume	addr:long
		pei		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		pei		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		pei		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		pei		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		pei		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		pei		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		pei		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		pei		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		pei		$1234,y     ; aby -> l*
		assume	addr:long
		pei		bakwrd,y    ; aby -> l*
		assume	addr:long
		pei		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		pei		$1234,y     ; aby -> ab*
		assume	addr:absolute
		pei		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		pei		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		pei		$1234,y     ; aby -> zp*
		assume	addr:direct
		pei		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		pei		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		pei		A           ; acc -> l*
		assume	addr:long
		pei		a           ; acc -> l*
		assume	addr:absolute
		pei		A           ; acc -> ab*
		assume	addr:absolute
		pei		a           ; acc -> ab*
		assume	addr:direct
		pei		A           ; acc -> zp*
		assume	addr:direct
		pei		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		pei		            ; acc_i -> l*
		assume	addr:absolute
		pei		            ; acc_i -> ab*
		assume	addr:direct
		pei		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		pei		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		pei		bak24, bak24b ; bmv -> l*
		assume	addr:long
		pei		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		pei		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		pei		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		pei		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		pei		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		pei		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		pei		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		pei		#$12        ; imm -> l*
		assume	addr:long
		pei		#$1234      ; imm -> l*
		assume	addr:long
		pei		#bakbyt     ; imm -> l*
		assume	addr:long
		pei		#bakwrd     ; imm -> l*
		assume	addr:long
		pei		#fwdbyt     ; imm -> l*
		assume	addr:long
		pei		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		pei		#$12        ; imm -> ab*
		assume	addr:absolute
		pei		#$1234      ; imm -> ab*
		assume	addr:absolute
		pei		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		pei		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		pei		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		pei		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		pei		#$12        ; imm -> zp*
		assume	addr:direct
		pei		#$1234      ; imm -> zp*
		assume	addr:direct
		pei		#bakbyt     ; imm -> zp*
		assume	addr:direct
		pei		#bakwrd     ; imm -> zp*
		assume	addr:direct
		pei		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		pei		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		pei		            ; imp -> l*
		assume	addr:absolute
		pei		            ; imp -> ab*
		assume	addr:direct
		pei		            ; imp -> zp*

		; lab

		assume	addr:long
		pei		$123456     ; lab -> l*
		assume	addr:long
		pei		bak24       ; lab -> l*
		assume	addr:long
		pei		fwd24       ; lab -> l*
		assume	addr:absolute
		pei		$123456     ; lab -> ab*
		assume	addr:absolute
		pei		bak24       ; lab -> ab*
		assume	addr:absolute
		pei		fwd24       ; lab -> ab*

		; labi

		assume	addr:long
		pei		($1234)     ; labi -> l*
		assume	addr:long
		pei		(bakwrd)    ; labi -> l*
		assume	addr:long
		pei		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		pei		($1234)     ; labi -> ab*
		assume	addr:absolute
		pei		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		pei		(fwdwrd)    ; labi -> ab*

		; labx

		assume	addr:long
		pei		$123456,x   ; labx -> l*
		assume	addr:long
		pei		bak24,x     ; labx -> l*
		assume	addr:long
		pei		fwd24,x     ; labx -> l*
		assume	addr:absolute
		pei		$123456,x   ; labx -> ab*
		assume	addr:absolute
		pei		bak24,x     ; labx -> ab*
		assume	addr:absolute
		pei		fwd24,x     ; labx -> ab*
		assume	addr:direct
		pei		$123456,x   ; labx -> zp*
		assume	addr:direct
		pei		bak24,x     ; labx -> zp*
		assume	addr:direct
		pei		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		pei		+           ; lpcr -> l*
		assume	addr:long
		pei		-           ; lpcr -> l*
		assume	addr:absolute
		pei		+           ; lpcr -> ab*
		assume	addr:absolute
		pei		-           ; lpcr -> ab*

		; lzpi

		assume	addr:long
		pei		[$12]       ; lzpi -> l*
		assume	addr:long
		pei		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		pei		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		pei		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		pei		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		pei		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		pei		[$12]       ; lzpi -> zp*
		assume	addr:direct
		pei		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		pei		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		pei		[$12],y     ; lzpiy -> l*
		assume	addr:long
		pei		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		pei		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		pei		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		pei		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		pei		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		pei		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		pei		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		pei		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		pei		+           ; pcr -> l*
		assume	addr:long
		pei		-           ; pcr -> l*
		assume	addr:absolute
		pei		+           ; pcr -> ab*
		assume	addr:absolute
		pei		-           ; pcr -> ab*

		; sr

		assume	addr:long
		pei		$12,s       ; sr -> l*
		assume	addr:long
		pei		bakbyt,s    ; sr -> l*
		assume	addr:long
		pei		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		pei		$12,s       ; sr -> ab*
		assume	addr:absolute
		pei		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		pei		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		pei		$12,s       ; sr -> zp*
		assume	addr:direct
		pei		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		pei		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		pei		($12,s),y   ; sriy -> l*
		assume	addr:long
		pei		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		pei		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		pei		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		pei		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		pei		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		pei		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		pei		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		pei		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		pei		$12         ; zp -> l*
		assume	addr:long
		pei		bakbyt      ; zp -> l*
		assume	addr:long
		pei		fwdbyt      ; zp -> l*
		assume	addr:absolute
		pei		$12         ; zp -> ab*
		assume	addr:absolute
		pei		bakbyt      ; zp -> ab*
		assume	addr:absolute
		pei		fwdbyt      ; zp -> ab*

		; zpi

		assume	addr:long
		pei		($12)       ; zpi -> l*
		assume	addr:long
		pei		(bakbyt)    ; zpi -> l*
		assume	addr:long
		pei		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		pei		($12)       ; zpi -> ab*
		assume	addr:absolute
		pei		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		pei		(fwdbyt)    ; zpi -> ab*

		; zpiy

		assume	addr:long
		pei		($12),y     ; zpiy -> l*
		assume	addr:long
		pei		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		pei		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		pei		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		pei		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		pei		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		pei		($12),y     ; zpiy -> zp*
		assume	addr:direct
		pei		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		pei		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		pei		$12,x       ; zpx -> l*
		assume	addr:long
		pei		bakbyt,x    ; zpx -> l*
		assume	addr:long
		pei		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		pei		$12,x       ; zpx -> ab*
		assume	addr:absolute
		pei		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		pei		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		pei		$12,x       ; zpx -> zp*
		assume	addr:direct
		pei		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		pei		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		pei		($12,x)     ; zpxi -> l*
		assume	addr:long
		pei		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		pei		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		pei		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		pei		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		pei		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		pei		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		pei		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		pei		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		pei		$12,y       ; zpy -> l*
		assume	addr:long
		pei		bakbyt,y    ; zpy -> l*
		assume	addr:long
		pei		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		pei		$12,y       ; zpy -> ab*
		assume	addr:absolute
		pei		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		pei		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		pei		$12,y       ; zpy -> zp*
		assume	addr:direct
		pei		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		pei		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; REP
		; SEP

 -
		; ab

		assume	addr:long
		rep		$1234       ; ab -> l*
		assume	addr:long
		rep		bakwrd      ; ab -> l*
		assume	addr:long
		rep		fwdwrd      ; ab -> l*
		assume	addr:absolute
		rep		$1234       ; ab -> ab*
		assume	addr:absolute
		rep		bakwrd      ; ab -> ab*
		assume	addr:absolute
		rep		fwdwrd      ; ab -> ab*
		assume	addr:direct
		rep		$1234       ; ab -> zp*
		assume	addr:direct
		rep		bakwrd      ; ab -> zp*
		assume	addr:direct
		rep		fwdwrd      ; ab -> zp*

		; abi

		assume	addr:long
		rep		($1234)     ; abi -> l*
		assume	addr:long
		rep		(bakwrd)    ; abi -> l*
		assume	addr:long
		rep		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		rep		($1234)     ; abi -> ab*
		assume	addr:absolute
		rep		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		rep		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		rep		($1234)     ; abi -> zp*
		assume	addr:direct
		rep		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		rep		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		rep		$1234,x     ; abx -> l*
		assume	addr:long
		rep		bakwrd,x    ; abx -> l*
		assume	addr:long
		rep		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		rep		$1234,x     ; abx -> ab*
		assume	addr:absolute
		rep		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		rep		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		rep		$1234,x     ; abx -> zp*
		assume	addr:direct
		rep		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		rep		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		rep		($1234,x)   ; abxi -> l*
		assume	addr:long
		rep		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		rep		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		rep		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		rep		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		rep		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		rep		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		rep		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		rep		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		rep		$1234,y     ; aby -> l*
		assume	addr:long
		rep		bakwrd,y    ; aby -> l*
		assume	addr:long
		rep		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		rep		$1234,y     ; aby -> ab*
		assume	addr:absolute
		rep		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		rep		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		rep		$1234,y     ; aby -> zp*
		assume	addr:direct
		rep		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		rep		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		rep		A           ; acc -> l*
		assume	addr:long
		rep		a           ; acc -> l*
		assume	addr:absolute
		rep		A           ; acc -> ab*
		assume	addr:absolute
		rep		a           ; acc -> ab*
		assume	addr:direct
		rep		A           ; acc -> zp*
		assume	addr:direct
		rep		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		rep		            ; acc_i -> l*
		assume	addr:absolute
		rep		            ; acc_i -> ab*
		assume	addr:direct
		rep		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		rep		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		rep		bak24, bak24b ; bmv -> l*
		assume	addr:long
		rep		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		rep		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		rep		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		rep		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		rep		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		rep		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		rep		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		rep		#$12        ; imm -> l*
		assume	addr:long
		rep		#$1234      ; imm -> l*
		assume	addr:long
		rep		#bakbyt     ; imm -> l*
		assume	addr:long
		rep		#bakwrd     ; imm -> l*
		assume	addr:long
		rep		#fwdbyt     ; imm -> l*
		assume	addr:long
		rep		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		rep		#$12        ; imm -> ab*
		assume	addr:absolute
		rep		#$1234      ; imm -> ab*
		assume	addr:absolute
		rep		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		rep		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		rep		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		rep		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		rep		#$12        ; imm -> zp*
		assume	addr:direct
		rep		#$1234      ; imm -> zp*
		assume	addr:direct
		rep		#bakbyt     ; imm -> zp*
		assume	addr:direct
		rep		#bakwrd     ; imm -> zp*
		assume	addr:direct
		rep		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		rep		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		rep		            ; imp -> l*
		assume	addr:absolute
		rep		            ; imp -> ab*
		assume	addr:direct
		rep		            ; imp -> zp*

		; lab

		assume	addr:long
		rep		$123456     ; lab -> l*
		assume	addr:long
		rep		bak24       ; lab -> l*
		assume	addr:long
		rep		fwd24       ; lab -> l*
		assume	addr:absolute
		rep		$123456     ; lab -> ab*
		assume	addr:absolute
		rep		bak24       ; lab -> ab*
		assume	addr:absolute
		rep		fwd24       ; lab -> ab*
		assume	addr:direct
		rep		$123456     ; lab -> zp*
		assume	addr:direct
		rep		bak24       ; lab -> zp*
		assume	addr:direct
		rep		fwd24       ; lab -> zp*

		; labi

		assume	addr:long
		rep		($1234)     ; labi -> l*
		assume	addr:long
		rep		(bakwrd)    ; labi -> l*
		assume	addr:long
		rep		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		rep		($1234)     ; labi -> ab*
		assume	addr:absolute
		rep		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		rep		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		rep		($1234)     ; labi -> zp*
		assume	addr:direct
		rep		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		rep		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		rep		$123456,x   ; labx -> l*
		assume	addr:long
		rep		bak24,x     ; labx -> l*
		assume	addr:long
		rep		fwd24,x     ; labx -> l*
		assume	addr:absolute
		rep		$123456,x   ; labx -> ab*
		assume	addr:absolute
		rep		bak24,x     ; labx -> ab*
		assume	addr:absolute
		rep		fwd24,x     ; labx -> ab*
		assume	addr:direct
		rep		$123456,x   ; labx -> zp*
		assume	addr:direct
		rep		bak24,x     ; labx -> zp*
		assume	addr:direct
		rep		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		rep		+           ; lpcr -> l*
		assume	addr:long
		rep		-           ; lpcr -> l*
		assume	addr:absolute
		rep		+           ; lpcr -> ab*
		assume	addr:absolute
		rep		-           ; lpcr -> ab*
		assume	addr:direct
		rep		+           ; lpcr -> zp*
		assume	addr:direct
		rep		-           ; lpcr -> zp*

		; lzpi

		assume	addr:long
		rep		[$12]       ; lzpi -> l*
		assume	addr:long
		rep		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		rep		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		rep		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		rep		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		rep		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		rep		[$12]       ; lzpi -> zp*
		assume	addr:direct
		rep		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		rep		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		rep		[$12],y     ; lzpiy -> l*
		assume	addr:long
		rep		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		rep		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		rep		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		rep		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		rep		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		rep		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		rep		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		rep		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		rep		+           ; pcr -> l*
		assume	addr:long
		rep		-           ; pcr -> l*
		assume	addr:absolute
		rep		+           ; pcr -> ab*
		assume	addr:absolute
		rep		-           ; pcr -> ab*
		assume	addr:direct
		rep		+           ; pcr -> zp*
		assume	addr:direct
		rep		-           ; pcr -> zp*

		; sr

		assume	addr:long
		rep		$12,s       ; sr -> l*
		assume	addr:long
		rep		bakbyt,s    ; sr -> l*
		assume	addr:long
		rep		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		rep		$12,s       ; sr -> ab*
		assume	addr:absolute
		rep		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		rep		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		rep		$12,s       ; sr -> zp*
		assume	addr:direct
		rep		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		rep		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		rep		($12,s),y   ; sriy -> l*
		assume	addr:long
		rep		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		rep		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		rep		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		rep		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		rep		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		rep		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		rep		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		rep		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		rep		$12         ; zp -> l*
		assume	addr:long
		rep		bakbyt      ; zp -> l*
		assume	addr:long
		rep		fwdbyt      ; zp -> l*
		assume	addr:absolute
		rep		$12         ; zp -> ab*
		assume	addr:absolute
		rep		bakbyt      ; zp -> ab*
		assume	addr:absolute
		rep		fwdbyt      ; zp -> ab*
		assume	addr:direct
		rep		$12         ; zp -> zp*
		assume	addr:direct
		rep		bakbyt      ; zp -> zp*
		assume	addr:direct
		rep		fwdbyt      ; zp -> zp*

		; zpi

		assume	addr:long
		rep		($12)       ; zpi -> l*
		assume	addr:long
		rep		(bakbyt)    ; zpi -> l*
		assume	addr:long
		rep		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		rep		($12)       ; zpi -> ab*
		assume	addr:absolute
		rep		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		rep		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		rep		($12)       ; zpi -> zp*
		assume	addr:direct
		rep		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		rep		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		rep		($12),y     ; zpiy -> l*
		assume	addr:long
		rep		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		rep		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		rep		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		rep		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		rep		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		rep		($12),y     ; zpiy -> zp*
		assume	addr:direct
		rep		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		rep		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		rep		$12,x       ; zpx -> l*
		assume	addr:long
		rep		bakbyt,x    ; zpx -> l*
		assume	addr:long
		rep		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		rep		$12,x       ; zpx -> ab*
		assume	addr:absolute
		rep		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		rep		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		rep		$12,x       ; zpx -> zp*
		assume	addr:direct
		rep		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		rep		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		rep		($12,x)     ; zpxi -> l*
		assume	addr:long
		rep		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		rep		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		rep		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		rep		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		rep		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		rep		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		rep		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		rep		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		rep		$12,y       ; zpy -> l*
		assume	addr:long
		rep		bakbyt,y    ; zpy -> l*
		assume	addr:long
		rep		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		rep		$12,y       ; zpy -> ab*
		assume	addr:absolute
		rep		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		rep		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		rep		$12,y       ; zpy -> zp*
		assume	addr:direct
		rep		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		rep		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; STA

 -
		; abi

		assume	addr:absolute
		sta		($1234)     ; abi -> ab*
		assume	addr:absolute
		sta		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		sta		(fwdwrd)    ; abi -> ab*

		; abxi

		assume	addr:long
		sta		($1234,x)   ; abxi -> l*
		assume	addr:long
		sta		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		sta		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		sta		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		sta		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		sta		(fwdwrd,x)  ; abxi -> ab*

		; aby

		assume	addr:long
		sta		$1234,y     ; aby -> l*
		assume	addr:long
		sta		bakwrd,y    ; aby -> l*
		assume	addr:long
		sta		fwdwrd,y    ; aby -> l*
		assume	addr:direct
		sta		$1234,y     ; aby -> zp*
		assume	addr:direct
		sta		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		sta		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		sta		A           ; acc -> l*
		assume	addr:long
		sta		a           ; acc -> l*
		assume	addr:absolute
		sta		A           ; acc -> ab*
		assume	addr:absolute
		sta		a           ; acc -> ab*
		assume	addr:direct
		sta		A           ; acc -> zp*
		assume	addr:direct
		sta		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		sta		            ; acc_i -> l*
		assume	addr:absolute
		sta		            ; acc_i -> ab*
		assume	addr:direct
		sta		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		sta		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		sta		bak24, bak24b ; bmv -> l*
		assume	addr:long
		sta		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		sta		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		sta		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		sta		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		sta		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		sta		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		sta		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		sta		#$12        ; imm -> l*
		assume	addr:long
		sta		#$1234      ; imm -> l*
		assume	addr:long
		sta		#bakbyt     ; imm -> l*
		assume	addr:long
		sta		#bakwrd     ; imm -> l*
		assume	addr:long
		sta		#fwdbyt     ; imm -> l*
		assume	addr:long
		sta		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		sta		#$12        ; imm -> ab*
		assume	addr:absolute
		sta		#$1234      ; imm -> ab*
		assume	addr:absolute
		sta		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		sta		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		sta		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		sta		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		sta		#$12        ; imm -> zp*
		assume	addr:direct
		sta		#$1234      ; imm -> zp*
		assume	addr:direct
		sta		#bakbyt     ; imm -> zp*
		assume	addr:direct
		sta		#bakwrd     ; imm -> zp*
		assume	addr:direct
		sta		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		sta		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		sta		            ; imp -> l*
		assume	addr:absolute
		sta		            ; imp -> ab*
		assume	addr:direct
		sta		            ; imp -> zp*

		; labi

		assume	addr:absolute
		sta		($1234)     ; labi -> ab*
		assume	addr:absolute
		sta		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		sta		(fwdwrd)    ; labi -> ab*

		; lzpi

		assume	addr:absolute
		sta		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		sta		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		sta		[fwdbyt]    ; lzpi -> ab*

		; lzpiy

		assume	addr:absolute
		sta		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		sta		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		sta		[fwdbyt],y  ; lzpiy -> ab*

		; sr

		assume	addr:long
		sta		$12,s       ; sr -> l*
		assume	addr:long
		sta		bakbyt,s    ; sr -> l*
		assume	addr:long
		sta		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		sta		$12,s       ; sr -> ab*
		assume	addr:absolute
		sta		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		sta		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		sta		$12,s       ; sr -> zp*
		assume	addr:direct
		sta		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		sta		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		sta		($12,s),y   ; sriy -> l*
		assume	addr:long
		sta		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		sta		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		sta		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		sta		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		sta		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		sta		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		sta		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		sta		(fwdbyt,s),y ; sriy -> zp*

		; zpi

		assume	addr:absolute
		sta		($12)       ; zpi -> ab*
		assume	addr:absolute
		sta		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		sta		(fwdbyt)    ; zpi -> ab*

		; zpiy

		assume	addr:absolute
		sta		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		sta		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		sta		(fwdbyt),y  ; zpiy -> ab*

		; zpxi

		assume	addr:long
		sta		($12,x)     ; zpxi -> l*
		assume	addr:long
		sta		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		sta		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		sta		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		sta		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		sta		(fwdbyt,x)  ; zpxi -> ab*

		; zpy

		assume	addr:long
		sta		$12,y       ; zpy -> l*
		assume	addr:long
		sta		bakbyt,y    ; zpy -> l*
		assume	addr:long
		sta		fwdbyt,y    ; zpy -> l*
		assume	addr:direct
		sta		$12,y       ; zpy -> zp*
		assume	addr:direct
		sta		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		sta		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; STX

 -
		; ab

		assume	addr:long
		stx		$1234       ; ab -> l*
		assume	addr:long
		stx		bakwrd      ; ab -> l*
		assume	addr:long
		stx		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		stx		($1234)     ; abi -> l*
		assume	addr:long
		stx		(bakwrd)    ; abi -> l*
		assume	addr:long
		stx		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		stx		($1234)     ; abi -> ab*
		assume	addr:absolute
		stx		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		stx		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		stx		($1234)     ; abi -> zp*
		assume	addr:direct
		stx		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		stx		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		stx		$1234,x     ; abx -> l*
		assume	addr:long
		stx		bakwrd,x    ; abx -> l*
		assume	addr:long
		stx		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		stx		$1234,x     ; abx -> ab*
		assume	addr:absolute
		stx		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		stx		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		stx		$1234,x     ; abx -> zp*
		assume	addr:direct
		stx		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		stx		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		stx		($1234,x)   ; abxi -> l*
		assume	addr:long
		stx		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		stx		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		stx		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		stx		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		stx		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		stx		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		stx		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		stx		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		stx		$1234,y     ; aby -> l*
		assume	addr:long
		stx		bakwrd,y    ; aby -> l*
		assume	addr:long
		stx		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		stx		$1234,y     ; aby -> ab*
		assume	addr:absolute
		stx		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		stx		fwdwrd,y    ; aby -> ab*

		; acc

		assume	addr:long
		stx		A           ; acc -> l*
		assume	addr:long
		stx		a           ; acc -> l*
		assume	addr:absolute
		stx		A           ; acc -> ab*
		assume	addr:absolute
		stx		a           ; acc -> ab*
		assume	addr:direct
		stx		A           ; acc -> zp*
		assume	addr:direct
		stx		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		stx		            ; acc_i -> l*
		assume	addr:absolute
		stx		            ; acc_i -> ab*
		assume	addr:direct
		stx		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		stx		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		stx		bak24, bak24b ; bmv -> l*
		assume	addr:long
		stx		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		stx		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		stx		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		stx		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		stx		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		stx		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		stx		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		stx		#$12        ; imm -> l*
		assume	addr:long
		stx		#$1234      ; imm -> l*
		assume	addr:long
		stx		#bakbyt     ; imm -> l*
		assume	addr:long
		stx		#bakwrd     ; imm -> l*
		assume	addr:long
		stx		#fwdbyt     ; imm -> l*
		assume	addr:long
		stx		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		stx		#$12        ; imm -> ab*
		assume	addr:absolute
		stx		#$1234      ; imm -> ab*
		assume	addr:absolute
		stx		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		stx		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		stx		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		stx		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		stx		#$12        ; imm -> zp*
		assume	addr:direct
		stx		#$1234      ; imm -> zp*
		assume	addr:direct
		stx		#bakbyt     ; imm -> zp*
		assume	addr:direct
		stx		#bakwrd     ; imm -> zp*
		assume	addr:direct
		stx		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		stx		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		stx		            ; imp -> l*
		assume	addr:absolute
		stx		            ; imp -> ab*
		assume	addr:direct
		stx		            ; imp -> zp*

		; lab

		assume	addr:long
		stx		$123456     ; lab -> l*
		assume	addr:long
		stx		bak24       ; lab -> l*
		assume	addr:long
		stx		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		stx		($1234)     ; labi -> l*
		assume	addr:long
		stx		(bakwrd)    ; labi -> l*
		assume	addr:long
		stx		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		stx		($1234)     ; labi -> ab*
		assume	addr:absolute
		stx		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		stx		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		stx		($1234)     ; labi -> zp*
		assume	addr:direct
		stx		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		stx		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		stx		$123456,x   ; labx -> l*
		assume	addr:long
		stx		bak24,x     ; labx -> l*
		assume	addr:long
		stx		fwd24,x     ; labx -> l*
		assume	addr:absolute
		stx		$123456,x   ; labx -> ab*
		assume	addr:absolute
		stx		bak24,x     ; labx -> ab*
		assume	addr:absolute
		stx		fwd24,x     ; labx -> ab*
		assume	addr:direct
		stx		$123456,x   ; labx -> zp*
		assume	addr:direct
		stx		bak24,x     ; labx -> zp*
		assume	addr:direct
		stx		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		stx		+           ; lpcr -> l*
		assume	addr:long
		stx		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		stx		[$12]       ; lzpi -> l*
		assume	addr:long
		stx		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		stx		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		stx		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		stx		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		stx		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		stx		[$12]       ; lzpi -> zp*
		assume	addr:direct
		stx		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		stx		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		stx		[$12],y     ; lzpiy -> l*
		assume	addr:long
		stx		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		stx		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		stx		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		stx		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		stx		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		stx		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		stx		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		stx		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		stx		+           ; pcr -> l*
		assume	addr:long
		stx		-           ; pcr -> l*

		; sr

		assume	addr:long
		stx		$12,s       ; sr -> l*
		assume	addr:long
		stx		bakbyt,s    ; sr -> l*
		assume	addr:long
		stx		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		stx		$12,s       ; sr -> ab*
		assume	addr:absolute
		stx		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		stx		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		stx		$12,s       ; sr -> zp*
		assume	addr:direct
		stx		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		stx		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		stx		($12,s),y   ; sriy -> l*
		assume	addr:long
		stx		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		stx		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		stx		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		stx		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		stx		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		stx		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		stx		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		stx		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		stx		$12         ; zp -> l*
		assume	addr:long
		stx		bakbyt      ; zp -> l*
		assume	addr:long
		stx		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		stx		($12)       ; zpi -> l*
		assume	addr:long
		stx		(bakbyt)    ; zpi -> l*
		assume	addr:long
		stx		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		stx		($12)       ; zpi -> ab*
		assume	addr:absolute
		stx		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		stx		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		stx		($12)       ; zpi -> zp*
		assume	addr:direct
		stx		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		stx		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		stx		($12),y     ; zpiy -> l*
		assume	addr:long
		stx		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		stx		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		stx		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		stx		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		stx		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		stx		($12),y     ; zpiy -> zp*
		assume	addr:direct
		stx		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		stx		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		stx		$12,x       ; zpx -> l*
		assume	addr:long
		stx		bakbyt,x    ; zpx -> l*
		assume	addr:long
		stx		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		stx		$12,x       ; zpx -> ab*
		assume	addr:absolute
		stx		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		stx		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		stx		$12,x       ; zpx -> zp*
		assume	addr:direct
		stx		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		stx		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		stx		($12,x)     ; zpxi -> l*
		assume	addr:long
		stx		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		stx		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		stx		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		stx		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		stx		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		stx		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		stx		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		stx		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		stx		$12,y       ; zpy -> l*
		assume	addr:long
		stx		bakbyt,y    ; zpy -> l*
		assume	addr:long
		stx		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		stx		$12,y       ; zpy -> ab*
		assume	addr:absolute
		stx		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		stx		fwdbyt,y    ; zpy -> ab*

 +

		; check:
		; STY

 -
		; ab

		assume	addr:long
		sty		$1234       ; ab -> l*
		assume	addr:long
		sty		bakwrd      ; ab -> l*
		assume	addr:long
		sty		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		sty		($1234)     ; abi -> l*
		assume	addr:long
		sty		(bakwrd)    ; abi -> l*
		assume	addr:long
		sty		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		sty		($1234)     ; abi -> ab*
		assume	addr:absolute
		sty		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		sty		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		sty		($1234)     ; abi -> zp*
		assume	addr:direct
		sty		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		sty		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		sty		$1234,x     ; abx -> l*
		assume	addr:long
		sty		bakwrd,x    ; abx -> l*
		assume	addr:long
		sty		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		sty		$1234,x     ; abx -> ab*
		assume	addr:absolute
		sty		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		sty		fwdwrd,x    ; abx -> ab*

		; abxi

		assume	addr:long
		sty		($1234,x)   ; abxi -> l*
		assume	addr:long
		sty		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		sty		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		sty		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		sty		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		sty		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		sty		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		sty		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		sty		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		sty		$1234,y     ; aby -> l*
		assume	addr:long
		sty		bakwrd,y    ; aby -> l*
		assume	addr:long
		sty		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		sty		$1234,y     ; aby -> ab*
		assume	addr:absolute
		sty		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		sty		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		sty		$1234,y     ; aby -> zp*
		assume	addr:direct
		sty		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		sty		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		sty		A           ; acc -> l*
		assume	addr:long
		sty		a           ; acc -> l*
		assume	addr:absolute
		sty		A           ; acc -> ab*
		assume	addr:absolute
		sty		a           ; acc -> ab*
		assume	addr:direct
		sty		A           ; acc -> zp*
		assume	addr:direct
		sty		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		sty		            ; acc_i -> l*
		assume	addr:absolute
		sty		            ; acc_i -> ab*
		assume	addr:direct
		sty		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		sty		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		sty		bak24, bak24b ; bmv -> l*
		assume	addr:long
		sty		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		sty		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		sty		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		sty		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		sty		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		sty		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		sty		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		sty		#$12        ; imm -> l*
		assume	addr:long
		sty		#$1234      ; imm -> l*
		assume	addr:long
		sty		#bakbyt     ; imm -> l*
		assume	addr:long
		sty		#bakwrd     ; imm -> l*
		assume	addr:long
		sty		#fwdbyt     ; imm -> l*
		assume	addr:long
		sty		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		sty		#$12        ; imm -> ab*
		assume	addr:absolute
		sty		#$1234      ; imm -> ab*
		assume	addr:absolute
		sty		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		sty		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		sty		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		sty		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		sty		#$12        ; imm -> zp*
		assume	addr:direct
		sty		#$1234      ; imm -> zp*
		assume	addr:direct
		sty		#bakbyt     ; imm -> zp*
		assume	addr:direct
		sty		#bakwrd     ; imm -> zp*
		assume	addr:direct
		sty		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		sty		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		sty		            ; imp -> l*
		assume	addr:absolute
		sty		            ; imp -> ab*
		assume	addr:direct
		sty		            ; imp -> zp*

		; lab

		assume	addr:long
		sty		$123456     ; lab -> l*
		assume	addr:long
		sty		bak24       ; lab -> l*
		assume	addr:long
		sty		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		sty		($1234)     ; labi -> l*
		assume	addr:long
		sty		(bakwrd)    ; labi -> l*
		assume	addr:long
		sty		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		sty		($1234)     ; labi -> ab*
		assume	addr:absolute
		sty		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		sty		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		sty		($1234)     ; labi -> zp*
		assume	addr:direct
		sty		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		sty		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		sty		$123456,x   ; labx -> l*
		assume	addr:long
		sty		bak24,x     ; labx -> l*
		assume	addr:long
		sty		fwd24,x     ; labx -> l*
		assume	addr:absolute
		sty		$123456,x   ; labx -> ab*
		assume	addr:absolute
		sty		bak24,x     ; labx -> ab*
		assume	addr:absolute
		sty		fwd24,x     ; labx -> ab*

		; lpcr

		assume	addr:long
		sty		+           ; lpcr -> l*
		assume	addr:long
		sty		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		sty		[$12]       ; lzpi -> l*
		assume	addr:long
		sty		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		sty		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		sty		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		sty		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		sty		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		sty		[$12]       ; lzpi -> zp*
		assume	addr:direct
		sty		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		sty		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		sty		[$12],y     ; lzpiy -> l*
		assume	addr:long
		sty		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		sty		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		sty		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		sty		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		sty		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		sty		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		sty		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		sty		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		sty		+           ; pcr -> l*
		assume	addr:long
		sty		-           ; pcr -> l*

		; sr

		assume	addr:long
		sty		$12,s       ; sr -> l*
		assume	addr:long
		sty		bakbyt,s    ; sr -> l*
		assume	addr:long
		sty		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		sty		$12,s       ; sr -> ab*
		assume	addr:absolute
		sty		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		sty		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		sty		$12,s       ; sr -> zp*
		assume	addr:direct
		sty		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		sty		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		sty		($12,s),y   ; sriy -> l*
		assume	addr:long
		sty		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		sty		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		sty		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		sty		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		sty		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		sty		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		sty		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		sty		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		sty		$12         ; zp -> l*
		assume	addr:long
		sty		bakbyt      ; zp -> l*
		assume	addr:long
		sty		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		sty		($12)       ; zpi -> l*
		assume	addr:long
		sty		(bakbyt)    ; zpi -> l*
		assume	addr:long
		sty		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		sty		($12)       ; zpi -> ab*
		assume	addr:absolute
		sty		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		sty		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		sty		($12)       ; zpi -> zp*
		assume	addr:direct
		sty		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		sty		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		sty		($12),y     ; zpiy -> l*
		assume	addr:long
		sty		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		sty		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		sty		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		sty		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		sty		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		sty		($12),y     ; zpiy -> zp*
		assume	addr:direct
		sty		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		sty		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		sty		$12,x       ; zpx -> l*
		assume	addr:long
		sty		bakbyt,x    ; zpx -> l*
		assume	addr:long
		sty		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		sty		$12,x       ; zpx -> ab*
		assume	addr:absolute
		sty		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		sty		fwdbyt,x    ; zpx -> ab*

		; zpxi

		assume	addr:long
		sty		($12,x)     ; zpxi -> l*
		assume	addr:long
		sty		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		sty		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		sty		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		sty		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		sty		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		sty		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		sty		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		sty		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		sty		$12,y       ; zpy -> l*
		assume	addr:long
		sty		bakbyt,y    ; zpy -> l*
		assume	addr:long
		sty		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		sty		$12,y       ; zpy -> ab*
		assume	addr:absolute
		sty		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		sty		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		sty		$12,y       ; zpy -> zp*
		assume	addr:direct
		sty		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		sty		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; STZ

 -
		; ab

		assume	addr:long
		stz		$1234       ; ab -> l*
		assume	addr:long
		stz		bakwrd      ; ab -> l*
		assume	addr:long
		stz		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		stz		($1234)     ; abi -> l*
		assume	addr:long
		stz		(bakwrd)    ; abi -> l*
		assume	addr:long
		stz		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		stz		($1234)     ; abi -> ab*
		assume	addr:absolute
		stz		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		stz		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		stz		($1234)     ; abi -> zp*
		assume	addr:direct
		stz		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		stz		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		stz		$1234,x     ; abx -> l*
		assume	addr:long
		stz		bakwrd,x    ; abx -> l*
		assume	addr:long
		stz		fwdwrd,x    ; abx -> l*

		; abxi

		assume	addr:long
		stz		($1234,x)   ; abxi -> l*
		assume	addr:long
		stz		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		stz		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		stz		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		stz		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		stz		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		stz		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		stz		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		stz		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		stz		$1234,y     ; aby -> l*
		assume	addr:long
		stz		bakwrd,y    ; aby -> l*
		assume	addr:long
		stz		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		stz		$1234,y     ; aby -> ab*
		assume	addr:absolute
		stz		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		stz		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		stz		$1234,y     ; aby -> zp*
		assume	addr:direct
		stz		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		stz		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		stz		A           ; acc -> l*
		assume	addr:long
		stz		a           ; acc -> l*
		assume	addr:absolute
		stz		A           ; acc -> ab*
		assume	addr:absolute
		stz		a           ; acc -> ab*
		assume	addr:direct
		stz		A           ; acc -> zp*
		assume	addr:direct
		stz		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		stz		            ; acc_i -> l*
		assume	addr:absolute
		stz		            ; acc_i -> ab*
		assume	addr:direct
		stz		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		stz		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		stz		bak24, bak24b ; bmv -> l*
		assume	addr:long
		stz		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		stz		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		stz		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		stz		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		stz		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		stz		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		stz		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		stz		#$12        ; imm -> l*
		assume	addr:long
		stz		#$1234      ; imm -> l*
		assume	addr:long
		stz		#bakbyt     ; imm -> l*
		assume	addr:long
		stz		#bakwrd     ; imm -> l*
		assume	addr:long
		stz		#fwdbyt     ; imm -> l*
		assume	addr:long
		stz		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		stz		#$12        ; imm -> ab*
		assume	addr:absolute
		stz		#$1234      ; imm -> ab*
		assume	addr:absolute
		stz		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		stz		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		stz		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		stz		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		stz		#$12        ; imm -> zp*
		assume	addr:direct
		stz		#$1234      ; imm -> zp*
		assume	addr:direct
		stz		#bakbyt     ; imm -> zp*
		assume	addr:direct
		stz		#bakwrd     ; imm -> zp*
		assume	addr:direct
		stz		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		stz		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		stz		            ; imp -> l*
		assume	addr:absolute
		stz		            ; imp -> ab*
		assume	addr:direct
		stz		            ; imp -> zp*

		; lab

		assume	addr:long
		stz		$123456     ; lab -> l*
		assume	addr:long
		stz		bak24       ; lab -> l*
		assume	addr:long
		stz		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		stz		($1234)     ; labi -> l*
		assume	addr:long
		stz		(bakwrd)    ; labi -> l*
		assume	addr:long
		stz		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		stz		($1234)     ; labi -> ab*
		assume	addr:absolute
		stz		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		stz		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		stz		($1234)     ; labi -> zp*
		assume	addr:direct
		stz		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		stz		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		stz		$123456,x   ; labx -> l*
		assume	addr:long
		stz		bak24,x     ; labx -> l*
		assume	addr:long
		stz		fwd24,x     ; labx -> l*

		; lpcr

		assume	addr:long
		stz		+           ; lpcr -> l*
		assume	addr:long
		stz		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		stz		[$12]       ; lzpi -> l*
		assume	addr:long
		stz		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		stz		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		stz		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		stz		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		stz		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		stz		[$12]       ; lzpi -> zp*
		assume	addr:direct
		stz		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		stz		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		stz		[$12],y     ; lzpiy -> l*
		assume	addr:long
		stz		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		stz		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		stz		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		stz		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		stz		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		stz		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		stz		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		stz		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		stz		+           ; pcr -> l*
		assume	addr:long
		stz		-           ; pcr -> l*

		; sr

		assume	addr:long
		stz		$12,s       ; sr -> l*
		assume	addr:long
		stz		bakbyt,s    ; sr -> l*
		assume	addr:long
		stz		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		stz		$12,s       ; sr -> ab*
		assume	addr:absolute
		stz		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		stz		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		stz		$12,s       ; sr -> zp*
		assume	addr:direct
		stz		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		stz		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		stz		($12,s),y   ; sriy -> l*
		assume	addr:long
		stz		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		stz		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		stz		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		stz		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		stz		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		stz		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		stz		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		stz		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		stz		$12         ; zp -> l*
		assume	addr:long
		stz		bakbyt      ; zp -> l*
		assume	addr:long
		stz		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		stz		($12)       ; zpi -> l*
		assume	addr:long
		stz		(bakbyt)    ; zpi -> l*
		assume	addr:long
		stz		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		stz		($12)       ; zpi -> ab*
		assume	addr:absolute
		stz		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		stz		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		stz		($12)       ; zpi -> zp*
		assume	addr:direct
		stz		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		stz		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		stz		($12),y     ; zpiy -> l*
		assume	addr:long
		stz		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		stz		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		stz		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		stz		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		stz		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		stz		($12),y     ; zpiy -> zp*
		assume	addr:direct
		stz		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		stz		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		stz		$12,x       ; zpx -> l*
		assume	addr:long
		stz		bakbyt,x    ; zpx -> l*
		assume	addr:long
		stz		fwdbyt,x    ; zpx -> l*

		; zpxi

		assume	addr:long
		stz		($12,x)     ; zpxi -> l*
		assume	addr:long
		stz		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		stz		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		stz		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		stz		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		stz		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		stz		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		stz		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		stz		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		stz		$12,y       ; zpy -> l*
		assume	addr:long
		stz		bakbyt,y    ; zpy -> l*
		assume	addr:long
		stz		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		stz		$12,y       ; zpy -> ab*
		assume	addr:absolute
		stz		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		stz		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		stz		$12,y       ; zpy -> zp*
		assume	addr:direct
		stz		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		stz		fwdbyt,y    ; zpy -> zp*

 +

		; check:
		; TRB
		; TSB

 -
		; ab

		assume	addr:long
		trb		$1234       ; ab -> l*
		assume	addr:long
		trb		bakwrd      ; ab -> l*
		assume	addr:long
		trb		fwdwrd      ; ab -> l*

		; abi

		assume	addr:long
		trb		($1234)     ; abi -> l*
		assume	addr:long
		trb		(bakwrd)    ; abi -> l*
		assume	addr:long
		trb		(fwdwrd)    ; abi -> l*
		assume	addr:absolute
		trb		($1234)     ; abi -> ab*
		assume	addr:absolute
		trb		(bakwrd)    ; abi -> ab*
		assume	addr:absolute
		trb		(fwdwrd)    ; abi -> ab*
		assume	addr:direct
		trb		($1234)     ; abi -> zp*
		assume	addr:direct
		trb		(bakwrd)    ; abi -> zp*
		assume	addr:direct
		trb		(fwdwrd)    ; abi -> zp*

		; abx

		assume	addr:long
		trb		$1234,x     ; abx -> l*
		assume	addr:long
		trb		bakwrd,x    ; abx -> l*
		assume	addr:long
		trb		fwdwrd,x    ; abx -> l*
		assume	addr:absolute
		trb		$1234,x     ; abx -> ab*
		assume	addr:absolute
		trb		bakwrd,x    ; abx -> ab*
		assume	addr:absolute
		trb		fwdwrd,x    ; abx -> ab*
		assume	addr:direct
		trb		$1234,x     ; abx -> zp*
		assume	addr:direct
		trb		bakwrd,x    ; abx -> zp*
		assume	addr:direct
		trb		fwdwrd,x    ; abx -> zp*

		; abxi

		assume	addr:long
		trb		($1234,x)   ; abxi -> l*
		assume	addr:long
		trb		(bakwrd,x)  ; abxi -> l*
		assume	addr:long
		trb		(fwdwrd,x)  ; abxi -> l*
		assume	addr:absolute
		trb		($1234,x)   ; abxi -> ab*
		assume	addr:absolute
		trb		(bakwrd,x)  ; abxi -> ab*
		assume	addr:absolute
		trb		(fwdwrd,x)  ; abxi -> ab*
		assume	addr:direct
		trb		($1234,x)   ; abxi -> zp*
		assume	addr:direct
		trb		(bakwrd,x)  ; abxi -> zp*
		assume	addr:direct
		trb		(fwdwrd,x)  ; abxi -> zp*

		; aby

		assume	addr:long
		trb		$1234,y     ; aby -> l*
		assume	addr:long
		trb		bakwrd,y    ; aby -> l*
		assume	addr:long
		trb		fwdwrd,y    ; aby -> l*
		assume	addr:absolute
		trb		$1234,y     ; aby -> ab*
		assume	addr:absolute
		trb		bakwrd,y    ; aby -> ab*
		assume	addr:absolute
		trb		fwdwrd,y    ; aby -> ab*
		assume	addr:direct
		trb		$1234,y     ; aby -> zp*
		assume	addr:direct
		trb		bakwrd,y    ; aby -> zp*
		assume	addr:direct
		trb		fwdwrd,y    ; aby -> zp*

		; acc

		assume	addr:long
		trb		A           ; acc -> l*
		assume	addr:long
		trb		a           ; acc -> l*
		assume	addr:absolute
		trb		A           ; acc -> ab*
		assume	addr:absolute
		trb		a           ; acc -> ab*
		assume	addr:direct
		trb		A           ; acc -> zp*
		assume	addr:direct
		trb		a           ; acc -> zp*

		; acc_i

		assume	addr:long
		trb		            ; acc_i -> l*
		assume	addr:absolute
		trb		            ; acc_i -> ab*
		assume	addr:direct
		trb		            ; acc_i -> zp*

		; bmv

		assume	addr:long
		trb		$123456, $789ABC ; bmv -> l*
		assume	addr:long
		trb		bak24, bak24b ; bmv -> l*
		assume	addr:long
		trb		fwd24, fwd24b ; bmv -> l*
		assume	addr:absolute
		trb		$123456, $789ABC ; bmv -> ab*
		assume	addr:absolute
		trb		bak24, bak24b ; bmv -> ab*
		assume	addr:absolute
		trb		fwd24, fwd24b ; bmv -> ab*
		assume	addr:direct
		trb		$123456, $789ABC ; bmv -> zp*
		assume	addr:direct
		trb		bak24, bak24b ; bmv -> zp*
		assume	addr:direct
		trb		fwd24, fwd24b ; bmv -> zp*

		; imm

		assume	addr:long
		trb		#$12        ; imm -> l*
		assume	addr:long
		trb		#$1234      ; imm -> l*
		assume	addr:long
		trb		#bakbyt     ; imm -> l*
		assume	addr:long
		trb		#bakwrd     ; imm -> l*
		assume	addr:long
		trb		#fwdbyt     ; imm -> l*
		assume	addr:long
		trb		#fwdwrd     ; imm -> l*
		assume	addr:absolute
		trb		#$12        ; imm -> ab*
		assume	addr:absolute
		trb		#$1234      ; imm -> ab*
		assume	addr:absolute
		trb		#bakbyt     ; imm -> ab*
		assume	addr:absolute
		trb		#bakwrd     ; imm -> ab*
		assume	addr:absolute
		trb		#fwdbyt     ; imm -> ab*
		assume	addr:absolute
		trb		#fwdwrd     ; imm -> ab*
		assume	addr:direct
		trb		#$12        ; imm -> zp*
		assume	addr:direct
		trb		#$1234      ; imm -> zp*
		assume	addr:direct
		trb		#bakbyt     ; imm -> zp*
		assume	addr:direct
		trb		#bakwrd     ; imm -> zp*
		assume	addr:direct
		trb		#fwdbyt     ; imm -> zp*
		assume	addr:direct
		trb		#fwdwrd     ; imm -> zp*

		; imp

		assume	addr:long
		trb		            ; imp -> l*
		assume	addr:absolute
		trb		            ; imp -> ab*
		assume	addr:direct
		trb		            ; imp -> zp*

		; lab

		assume	addr:long
		trb		$123456     ; lab -> l*
		assume	addr:long
		trb		bak24       ; lab -> l*
		assume	addr:long
		trb		fwd24       ; lab -> l*

		; labi

		assume	addr:long
		trb		($1234)     ; labi -> l*
		assume	addr:long
		trb		(bakwrd)    ; labi -> l*
		assume	addr:long
		trb		(fwdwrd)    ; labi -> l*
		assume	addr:absolute
		trb		($1234)     ; labi -> ab*
		assume	addr:absolute
		trb		(bakwrd)    ; labi -> ab*
		assume	addr:absolute
		trb		(fwdwrd)    ; labi -> ab*
		assume	addr:direct
		trb		($1234)     ; labi -> zp*
		assume	addr:direct
		trb		(bakwrd)    ; labi -> zp*
		assume	addr:direct
		trb		(fwdwrd)    ; labi -> zp*

		; labx

		assume	addr:long
		trb		$123456,x   ; labx -> l*
		assume	addr:long
		trb		bak24,x     ; labx -> l*
		assume	addr:long
		trb		fwd24,x     ; labx -> l*
		assume	addr:absolute
		trb		$123456,x   ; labx -> ab*
		assume	addr:absolute
		trb		bak24,x     ; labx -> ab*
		assume	addr:absolute
		trb		fwd24,x     ; labx -> ab*
		assume	addr:direct
		trb		$123456,x   ; labx -> zp*
		assume	addr:direct
		trb		bak24,x     ; labx -> zp*
		assume	addr:direct
		trb		fwd24,x     ; labx -> zp*

		; lpcr

		assume	addr:long
		trb		+           ; lpcr -> l*
		assume	addr:long
		trb		-           ; lpcr -> l*

		; lzpi

		assume	addr:long
		trb		[$12]       ; lzpi -> l*
		assume	addr:long
		trb		[bakbyt]    ; lzpi -> l*
		assume	addr:long
		trb		[fwdbyt]    ; lzpi -> l*
		assume	addr:absolute
		trb		[$12]       ; lzpi -> ab*
		assume	addr:absolute
		trb		[bakbyt]    ; lzpi -> ab*
		assume	addr:absolute
		trb		[fwdbyt]    ; lzpi -> ab*
		assume	addr:direct
		trb		[$12]       ; lzpi -> zp*
		assume	addr:direct
		trb		[bakbyt]    ; lzpi -> zp*
		assume	addr:direct
		trb		[fwdbyt]    ; lzpi -> zp*

		; lzpiy

		assume	addr:long
		trb		[$12],y     ; lzpiy -> l*
		assume	addr:long
		trb		[bakbyt],y  ; lzpiy -> l*
		assume	addr:long
		trb		[fwdbyt],y  ; lzpiy -> l*
		assume	addr:absolute
		trb		[$12],y     ; lzpiy -> ab*
		assume	addr:absolute
		trb		[bakbyt],y  ; lzpiy -> ab*
		assume	addr:absolute
		trb		[fwdbyt],y  ; lzpiy -> ab*
		assume	addr:direct
		trb		[$12],y     ; lzpiy -> zp*
		assume	addr:direct
		trb		[bakbyt],y  ; lzpiy -> zp*
		assume	addr:direct
		trb		[fwdbyt],y  ; lzpiy -> zp*

		; pcr

		assume	addr:long
		trb		+           ; pcr -> l*
		assume	addr:long
		trb		-           ; pcr -> l*

		; sr

		assume	addr:long
		trb		$12,s       ; sr -> l*
		assume	addr:long
		trb		bakbyt,s    ; sr -> l*
		assume	addr:long
		trb		fwdbyt,s    ; sr -> l*
		assume	addr:absolute
		trb		$12,s       ; sr -> ab*
		assume	addr:absolute
		trb		bakbyt,s    ; sr -> ab*
		assume	addr:absolute
		trb		fwdbyt,s    ; sr -> ab*
		assume	addr:direct
		trb		$12,s       ; sr -> zp*
		assume	addr:direct
		trb		bakbyt,s    ; sr -> zp*
		assume	addr:direct
		trb		fwdbyt,s    ; sr -> zp*

		; sriy

		assume	addr:long
		trb		($12,s),y   ; sriy -> l*
		assume	addr:long
		trb		(bakbyt,s),y ; sriy -> l*
		assume	addr:long
		trb		(fwdbyt,s),y ; sriy -> l*
		assume	addr:absolute
		trb		($12,s),y   ; sriy -> ab*
		assume	addr:absolute
		trb		(bakbyt,s),y ; sriy -> ab*
		assume	addr:absolute
		trb		(fwdbyt,s),y ; sriy -> ab*
		assume	addr:direct
		trb		($12,s),y   ; sriy -> zp*
		assume	addr:direct
		trb		(bakbyt,s),y ; sriy -> zp*
		assume	addr:direct
		trb		(fwdbyt,s),y ; sriy -> zp*

		; zp

		assume	addr:long
		trb		$12         ; zp -> l*
		assume	addr:long
		trb		bakbyt      ; zp -> l*
		assume	addr:long
		trb		fwdbyt      ; zp -> l*

		; zpi

		assume	addr:long
		trb		($12)       ; zpi -> l*
		assume	addr:long
		trb		(bakbyt)    ; zpi -> l*
		assume	addr:long
		trb		(fwdbyt)    ; zpi -> l*
		assume	addr:absolute
		trb		($12)       ; zpi -> ab*
		assume	addr:absolute
		trb		(bakbyt)    ; zpi -> ab*
		assume	addr:absolute
		trb		(fwdbyt)    ; zpi -> ab*
		assume	addr:direct
		trb		($12)       ; zpi -> zp*
		assume	addr:direct
		trb		(bakbyt)    ; zpi -> zp*
		assume	addr:direct
		trb		(fwdbyt)    ; zpi -> zp*

		; zpiy

		assume	addr:long
		trb		($12),y     ; zpiy -> l*
		assume	addr:long
		trb		(bakbyt),y  ; zpiy -> l*
		assume	addr:long
		trb		(fwdbyt),y  ; zpiy -> l*
		assume	addr:absolute
		trb		($12),y     ; zpiy -> ab*
		assume	addr:absolute
		trb		(bakbyt),y  ; zpiy -> ab*
		assume	addr:absolute
		trb		(fwdbyt),y  ; zpiy -> ab*
		assume	addr:direct
		trb		($12),y     ; zpiy -> zp*
		assume	addr:direct
		trb		(bakbyt),y  ; zpiy -> zp*
		assume	addr:direct
		trb		(fwdbyt),y  ; zpiy -> zp*

		; zpx

		assume	addr:long
		trb		$12,x       ; zpx -> l*
		assume	addr:long
		trb		bakbyt,x    ; zpx -> l*
		assume	addr:long
		trb		fwdbyt,x    ; zpx -> l*
		assume	addr:absolute
		trb		$12,x       ; zpx -> ab*
		assume	addr:absolute
		trb		bakbyt,x    ; zpx -> ab*
		assume	addr:absolute
		trb		fwdbyt,x    ; zpx -> ab*
		assume	addr:direct
		trb		$12,x       ; zpx -> zp*
		assume	addr:direct
		trb		bakbyt,x    ; zpx -> zp*
		assume	addr:direct
		trb		fwdbyt,x    ; zpx -> zp*

		; zpxi

		assume	addr:long
		trb		($12,x)     ; zpxi -> l*
		assume	addr:long
		trb		(bakbyt,x)  ; zpxi -> l*
		assume	addr:long
		trb		(fwdbyt,x)  ; zpxi -> l*
		assume	addr:absolute
		trb		($12,x)     ; zpxi -> ab*
		assume	addr:absolute
		trb		(bakbyt,x)  ; zpxi -> ab*
		assume	addr:absolute
		trb		(fwdbyt,x)  ; zpxi -> ab*
		assume	addr:direct
		trb		($12,x)     ; zpxi -> zp*
		assume	addr:direct
		trb		(bakbyt,x)  ; zpxi -> zp*
		assume	addr:direct
		trb		(fwdbyt,x)  ; zpxi -> zp*

		; zpy

		assume	addr:long
		trb		$12,y       ; zpy -> l*
		assume	addr:long
		trb		bakbyt,y    ; zpy -> l*
		assume	addr:long
		trb		fwdbyt,y    ; zpy -> l*
		assume	addr:absolute
		trb		$12,y       ; zpy -> ab*
		assume	addr:absolute
		trb		bakbyt,y    ; zpy -> ab*
		assume	addr:absolute
		trb		fwdbyt,y    ; zpy -> ab*
		assume	addr:direct
		trb		$12,y       ; zpy -> zp*
		assume	addr:direct
		trb		bakbyt,y    ; zpy -> zp*
		assume	addr:direct
		trb		fwdbyt,y    ; zpy -> zp*

 +

; errs = 4195

; forward reference

fwdbyt	.equ	$12
fwdwrd	.equ	$1234
fwd24	.equ	$123456
fwd24b	.equ	$789ABC

; -------------------------------

		.end
