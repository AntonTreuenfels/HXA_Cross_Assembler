; Hobby Cross-Assembler Demo 104
; 6502\Utility Routines
; ok: developing a "smart" block copy

; by Anton Treuenfels

; first created: 08/13/04
; last revised:  08/14/13

; no errors to detect

        .listfile
        .errfile

; -------------------------------

        .cpu    "6502"      ; required psop

; -------------------------------

; we need to know three things to move a block:
; 1) where the block to move is
; 2) how big the block to move is
; 3) where to move the block to

; We always start either with this information directly or with other
; information we can derive it from.

; We can begin at the start or end of the blocks as we please, and
; it doesn't matter unless the source and destination overlap.
; If the blocks overlap then the destination is within the source block,
; and care must be taken that the data in that part of the source block
; is copied before it is overwritten.
; A general rule that always keeps us safe is to begin at the block ends
; if the destination is higher in memory than the source, otherwise
; begin at the block starts.
; This always works properly whether or not the blocks overlap.

; To start we'll set up some zero page locations to serve as pointers
; to our working addresses (no, we're not going to use self-modifying
; code - yech!).
; The exact addresses don't matter and can be adjusted to whatever
; works in a particular case.

        .org    $40     ; can be adjusted to whatever is needed

source  .ds     2       ; two bytes per pointer
dest    .ds     2

; We also need a size to copy, so we'll set up a pair of bytes to
; hold that.

size     .ds    2       ; two bytes for up to 64K size

; Note the high byte of the size is also the number of whole pages
; to copy, and the low byte is the number of bytes to copy on the
; last page.
; This is handy enough that we'll alias those locations with names:

partpg  .equ    size
fullpg  .equ    size+1

; We'll assume our caller fills in these values before calling our
; routine (the exact method doesn't matter).

; We need one routine to copy a block from start to end and one to
; copy from end to start.
; We developed such routines in DEMO104.A (start to end) and DEMO104B.A
; (end to start), and can use any of them we like.
; All now we need is a way to determine which routine to use:

; --------------------
; Attempt #1
; --------------------

; using straightforward copy routines:

        .org    $1000

SmartCopy1:
        lda     source          ; compare source and destination
        cmp     dest
        lda     source+1
        sbc     dest+1
        bcc     CopyFromEnd1    ; b: destination is above source

CopyFromStart1:
        ldy     #$00        ; point to first byte of a page
        ldx     fullpg      ; any full pages ?
        beq     :+          ; b: no
 -      lda     (source),y  ; copy a byte
        sta     (dest),y
        iny                 ; next byte
        bne     :-          ; b: page not done
        inc     source+1    ; point to next pages
        inc     dest+1
        dex                 ; another full page ?
        bne     :-          ; b: yes
 +      ldx     partpg      ; any partial page ?
        beq     :+          ; b: no
 -      lda     (source),y  ; copy a byte
        sta     (dest),y
        iny                 ; next byte
        dex                 ; another byte ?
        bne     :-          ; b: yes
 +      rts

; note that carry is always clear if the only entry is from SmartCopy1

CopyFromEnd1:
        ldx     fullpg      ; whole pages
        beq     +           ; b: none
        clc                 ; necessary ?
        txa
        adc     source+1
        sta     source+1    ; now points to last page
;       clc                 ; if carry is set we have problem anyway...
        txa
        adc     dest+1
        sta     dest+1      ; now points to last page

 +      inx                 ; account for any partial page
        ldy     partpg      ; partial page byte count
        beq     +           ; b: none

        ; main loop

 -      dey                 ; Y = 255, 254, ..., 0
        lda     (source),y  ; copy a byte
        sta     (dest),y
        tya                 ; page done ?
        bne     -           ; b: no

 +      dec     source+1    ; next page
        dec     dest+1
        dex                 ; is there another page ?
        bne     -           ; b: yes
        rts

; --------------------
; Attempt #2
; --------------------

; using single loops unrolled once:

        .org    $1000

SmartCopy2:
        lda     source          ; compare source and destination
        cmp     dest
        lda     source+1
        sbc     dest+1
        bcc     CopyFromEnd2    ; b: destination is above source

CopyFromStart2:
        ldx     fullpg      ; whole pages
        inx                 ; account for partial page
        ldy     partpg      ; partial page byte count
        beq     @page       ; b: none

        clc                 ; adjust source address
        tya
        adc     source
        sta     source
        bcs     +           ; don't bother to INC just to DEC right away
        dec     source+1
 +      clc                 ; adjust destination address
        tya
        adc     dest
        sta     dest
        bcs     +           ; b: don't bother to INC just to DEC right away
        dec     dest+1

 +      tya
        eor     #$ff        ; one' complement
        tay
        iny                 ; two's complement

        lsr                 ; odd or even count ?
        bcc     +           ; b: odd (one's complement value here)

        ; main loop

 -      lda     (source),y  ; copy a byte
        sta     (dest),y    ; Y = 0, 2, ..., 254
        iny
 +      lda     (source),y  ; copy a byte
        sta     (dest),y    ; Y = 1, 3, ..., 255
        iny
        bne     -           ; b: page not done
        inc     source+1    ; next pages
        inc     dest+1

@page   dex                 ; another page ?
        bne     -           ; b: yes
        rts

; note that carry is always clear if the only entry is from SmartCopy2

CopyFromEnd2:
        ldx     fullpg      ; whole pages
        beq     +           ; b: none
        clc                 ; necessary ?
        txa
        adc     source+1
        sta     source+1    ; now points to last page
;       clc                 ; if carry is set we have problem anyway...
        txa
        adc     dest+1
        sta     dest+1      ; now points to last page

 +      inx                 ; account for any partial page
        ldy     partpg      ; partial page byte count
        beq     @nextpg     ; b: count = 0
        tya
        lsr
        bcc     @cp_0       ; b: count = 254, 252, ..., 2
        dey
        beq     +           ; b: count = 1 (a special case)

        ; fall through: count = 255, 253, ..., 3

        ; main loop

 -      lda     (source),y  ; Y = 254, 252, ..., 2
        sta     (dest),y
@cp_0   dey
        lda     (source),y  ; Y = 255, 253, ..., 1
        sta     (dest),y
        dey                 ; all non-zero offsets done ?
        bne     -           ; b: no
 +      lda     (source),y  ; Y = 0
        sta     (dest),y

@nextpg dec     source+1    ; next page
        dec     dest+1
        dex                 ; is there another page ?
        bne     @cp_0       ; b: yes
        rts

; -------------------------------

        .end
