; Hobby Cross-Assembler Error Demo 034e
; Macro Instruction Set\6502
; error: illegal address mode, detected first pass

; by Anton Treuenfels

; first created: 08/16/07
; last revised:  01/07/12

; warning(s): 139
; - token ignored

; error(s): 221
; - source fault (bad address mode)
; - macro argument ignored

; fatal:

; -------------------------------

		.listfile
		.errfile
        .maxwarn    1000    ; increase default count
        .maxerr     5000    ; increase default count

; -------------------------------

        ; one way to account for multiple possible assemblers

        .ifdef __HXA__      ; HXA assembler ?

        .echo "Detected __HXA__"

        .ifdef  __HXA65__   ; native instruction assembler ?

        .echo "Detected __HXA65__"

        .cpu    "6502"

        .else

        .ifdef  __HXA_T__   ; macro instruction assembler ?

        .echo "Detected __HXA_T__"
        
        .listoff    includes
        .liston     stats

        .include "i6502.a"

        .else

        .fatal "No HXA compatible assembler defined"

        .endif              ; __HXA_T__ branch

        .endif              ; __HXA65__ branch

        ; check for other assemblers or show an error message here

        .endif              ; __HXA__ branch

; -------------------------------

        .org    $1000       ; required psop

; -------------------------------

; backward reference

bakbyt	.equ	$12
bakwrd	.equ	$1234

		; check:
		; ADC
		; AND
		; CMP
		; EOR
		; LDA
		; ORA
		; SBC

 -
		ADC		$1234       ; ab
		ADC		bakwrd      ; ab
		ADC		fwdwrd      ; ab
		adc		($1234)     ; abi
		adc		(bakwrd)    ; abi
		adc		(fwdwrd)    ; abi
		ADC		$1234,x     ; abx
		ADC		bakwrd,x    ; abx
		ADC		fwdwrd,x    ; abx
		ADC		$1234,y     ; aby
		ADC		bakwrd,y    ; aby
		ADC		fwdwrd,y    ; aby
		adc		A           ; acc
		adc		a           ; acc
		adc		            ; acc_i
		ADC		#$12        ; imm
		ADC		#bakbyt     ; imm
		ADC		#fwdbyt     ; imm
		adc		            ; imp
		adc		+           ; pcr	(accepted as 'ab' mode)
		adc		-           ; pcr	(accepted as 'ab' mode)
		ADC		$12         ; zp
		ADC		bakbyt      ; zp
		ADC		fwdbyt      ; zp
		ADC		($12),y     ; zpiy
		ADC		(bakbyt),y  ; zpiy
		ADC		(fwdbyt),y  ; zpiy
		ADC		$12,x       ; zpx
		ADC		bakbyt,x    ; zpx
		ADC		fwdbyt,x    ; zpx
		ADC		($12,x)     ; zpxi
		ADC		(bakbyt,x)  ; zpxi
		ADC		(fwdbyt,x)  ; zpxi
		adc		$12,y       ; zpy	(accepted as 'aby' mode)
		adc		bakbyt,y    ; zpy	(accepted as 'aby' mode)
		adc		fwdbyt,y    ; zpy	(accepted as 'aby' mode)
 +

		; check:
		; ASL
		; LSR
		; ROL
		; ROR

 -
		ASL		$1234       ; ab
		ASL		bakwrd      ; ab
		ASL		fwdwrd      ; ab
		asl		($1234)     ; abi
		asl		(bakwrd)    ; abi
		asl		(fwdwrd)    ; abi
		ASL		$1234,x     ; abx
		ASL		bakwrd,x    ; abx
		ASL		fwdwrd,x    ; abx
		asl		$1234,y     ; aby
		asl		bakwrd,y    ; aby
		asl		fwdwrd,y    ; aby
		ASL		A           ; acc
		ASL		a           ; acc
		ASL		            ; acc_i
		asl		#$12        ; imm
		asl		#bakbyt     ; imm
		asl		#fwdbyt     ; imm
		asl		            ; imp	(accepted as 'acc_i' mode)
		asl		+           ; pcr	(accepted as 'ab' mode)
		asl		-           ; pcr	(accepted as 'ab' mode)
		ASL		$12         ; zp
		ASL		bakbyt      ; zp
		ASL		fwdbyt      ; zp
		asl		($12),y     ; zpiy
		asl		(bakbyt),y  ; zpiy
		asl		(fwdbyt),y  ; zpiy
		ASL		$12,x       ; zpx
		ASL		bakbyt,x    ; zpx
		ASL		fwdbyt,x    ; zpx
		asl		($12,x)     ; zpxi
		asl		(bakbyt,x)  ; zpxi
		asl		(fwdbyt,x)  ; zpxi
		asl		$12,y       ; zpy
		asl		bakbyt,y    ; zpy
		asl		fwdbyt,y    ; zpy
 +

		; check:
		; BCC
		; BCS
		; BEQ
		; BGE
		; BLT
		; BMI
		; BNE
		; BPL
		; BVC
		; BVS

 -
		bcc		$1234       ; ab	(accepted as 'pcr' mode)
		bcc		bakwrd      ; ab	(accepted as 'pcr' mode)
		bcc		fwdwrd      ; ab	(accepted as 'pcr' mode)
		bcc		($1234)     ; abi
		bcc		(bakwrd)    ; abi
		bcc		(fwdwrd)    ; abi
		bcc		$1234,x     ; abx
		bcc		bakwrd,x    ; abx
		bcc		fwdwrd,x    ; abx
		bcc		$1234,y     ; aby
		bcc		bakwrd,y    ; aby
		bcc		fwdwrd,y    ; aby
		bcc		A           ; acc
		bcc		a           ; acc
		bcc		            ; acc_i
		bcc		#$12        ; imm
		bcc		#bakbyt     ; imm
		bcc		#fwdbyt     ; imm
		bcc		            ; imp
		BCC		+           ; pcr
		BCC		-           ; pcr
		bcc		$12         ; zp	(accepted as 'pcr' mode)
		bcc		bakbyt      ; zp	(accepted as 'pcr' mode)
		bcc		fwdbyt      ; zp	(accepted as 'pcr' mode)
		bcc		($12),y     ; zpiy
		bcc		(bakbyt),y  ; zpiy
		bcc		(fwdbyt),y  ; zpiy
		bcc		$12,x       ; zpx
		bcc		bakbyt,x    ; zpx
		bcc		fwdbyt,x    ; zpx
		bcc		($12,x)     ; zpxi
		bcc		(bakbyt,x)  ; zpxi
		bcc		(fwdbyt,x)  ; zpxi
		bcc		$12,y       ; zpy
		bcc		bakbyt,y    ; zpy
		bcc		fwdbyt,y    ; zpy
 +

		; check:
		; BIT

 -
		BIT		$1234       ; ab
		BIT		bakwrd      ; ab
		BIT		fwdwrd      ; ab
		bit		($1234)     ; abi
		bit		(bakwrd)    ; abi
		bit		(fwdwrd)    ; abi
		bit		$1234,x     ; abx
		bit		bakwrd,x    ; abx
		bit		fwdwrd,x    ; abx
		bit		$1234,y     ; aby
		bit		bakwrd,y    ; aby
		bit		fwdwrd,y    ; aby
		bit		A           ; acc
		bit		a           ; acc
		bit		            ; acc_i
		bit		#$12        ; imm
		bit		#bakbyt     ; imm
		bit		#fwdbyt     ; imm
		bit		            ; imp
		bit		+           ; pcr	(accepted as 'ab' mode)
		bit		-           ; pcr	(accepted as 'ab' mode)
		BIT		$12         ; zp
		BIT		bakbyt      ; zp
		BIT		fwdbyt      ; zp
		bit		($12),y     ; zpiy
		bit		(bakbyt),y  ; zpiy
		bit		(fwdbyt),y  ; zpiy
		bit		$12,x       ; zpx
		bit		bakbyt,x    ; zpx
		bit		fwdbyt,x    ; zpx
		bit		($12,x)     ; zpxi
		bit		(bakbyt,x)  ; zpxi
		bit		(fwdbyt,x)  ; zpxi
		bit		$12,y       ; zpy
		bit		bakbyt,y    ; zpy
		bit		fwdbyt,y    ; zpy
 +

		; check:
		; BRK

 -
		brk		$1234       ; ab	(accepted as 'zp' mode)
		brk		bakwrd      ; ab	(accepted as 'zp' mode)
		brk		fwdwrd      ; ab	(accepted as 'zp' mode)
		brk		($1234)     ; abi
		brk		(bakwrd)    ; abi
		brk		(fwdwrd)    ; abi
		brk		$1234,x     ; abx
		brk		bakwrd,x    ; abx
		brk		fwdwrd,x    ; abx
		brk		$1234,y     ; aby
		brk		bakwrd,y    ; aby
		brk		fwdwrd,y    ; aby
		brk		A           ; acc
		brk		a           ; acc
		brk		            ; acc_i	(accepted as 'imp' mode)
		BRK		#$12        ; imm
		BRK		#bakbyt     ; imm
		BRK		#fwdbyt     ; imm
		BRK		            ; imp
		brk		+           ; pcr	(accepted as 'zp' mode)
		brk		-           ; pcr	(accepted as 'zp' mode)
		BRK		$12         ; zp
		BRK		bakbyt      ; zp
		BRK		fwdbyt      ; zp
		brk		($12),y     ; zpiy
		brk		(bakbyt),y  ; zpiy
		brk		(fwdbyt),y  ; zpiy
		brk		$12,x       ; zpx
		brk		bakbyt,x    ; zpx
		brk		fwdbyt,x    ; zpx
		brk		($12,x)     ; zpxi
		brk		(bakbyt,x)  ; zpxi
		brk		(fwdbyt,x)  ; zpxi
		brk		$12,y       ; zpy
		brk		bakbyt,y    ; zpy
		brk		fwdbyt,y    ; zpy
 +

		; check:
		; CLC
		; CLD
		; CLI
		; CLV
		; DEX
		; DEY
		; INX
		; INY
		; NOP
		; PHA
		; PHP
		; PLA
		; PLP
		; RTI
		; RTS
		; SEC
		; SED
		; SEI
		; TAX
		; TAY
		; TSX
		; TXA
		; TXS
		; TYA

 -
		clc		$1234       ; ab
		clc		bakwrd      ; ab
		clc		fwdwrd      ; ab
		clc		($1234)     ; abi
		clc		(bakwrd)    ; abi
		clc		(fwdwrd)    ; abi
		clc		$1234,x     ; abx
		clc		bakwrd,x    ; abx
		clc		fwdwrd,x    ; abx
		clc		$1234,y     ; aby
		clc		bakwrd,y    ; aby
		clc		fwdwrd,y    ; aby
		clc		A           ; acc
		clc		a           ; acc
		clc		            ; acc_i	(accepted as 'imp' mode)
		clc		#$12        ; imm
		clc		#bakbyt     ; imm
		clc		#fwdbyt     ; imm
		CLC		            ; imp
		clc		+           ; pcr
		clc		-           ; pcr
		clc		$12         ; zp
		clc		bakbyt      ; zp
		clc		fwdbyt      ; zp
		clc		($12),y     ; zpiy
		clc		(bakbyt),y  ; zpiy
		clc		(fwdbyt),y  ; zpiy
		clc		$12,x       ; zpx
		clc		bakbyt,x    ; zpx
		clc		fwdbyt,x    ; zpx
		clc		($12,x)     ; zpxi
		clc		(bakbyt,x)  ; zpxi
		clc		(fwdbyt,x)  ; zpxi
		clc		$12,y       ; zpy
		clc		bakbyt,y    ; zpy
		clc		fwdbyt,y    ; zpy
 +

		; check:
		; CPX
		; CPY

 -
		CPX		$1234       ; ab
		CPX		bakwrd      ; ab
		CPX		fwdwrd      ; ab
		cpx		($1234)     ; abi
		cpx		(bakwrd)    ; abi
		cpx		(fwdwrd)    ; abi
		cpx		$1234,x     ; abx
		cpx		bakwrd,x    ; abx
		cpx		fwdwrd,x    ; abx
		cpx		$1234,y     ; aby
		cpx		bakwrd,y    ; aby
		cpx		fwdwrd,y    ; aby
		cpx		A           ; acc
		cpx		a           ; acc
		cpx		            ; acc_i
		CPX		#$12        ; imm
		CPX		#bakbyt     ; imm
		CPX		#fwdbyt     ; imm
		cpx		            ; imp
		cpx		+           ; pcr	(accepted as 'ab' mode)
		cpx		-           ; pcr	(accepted as 'ab' mode)
		CPX		$12         ; zp
		CPX		bakbyt      ; zp
		CPX		fwdbyt      ; zp
		cpx		($12),y     ; zpiy
		cpx		(bakbyt),y  ; zpiy
		cpx		(fwdbyt),y  ; zpiy
		cpx		$12,x       ; zpx
		cpx		bakbyt,x    ; zpx
		cpx		fwdbyt,x    ; zpx
		cpx		($12,x)     ; zpxi
		cpx		(bakbyt,x)  ; zpxi
		cpx		(fwdbyt,x)  ; zpxi
		cpx		$12,y       ; zpy
		cpx		bakbyt,y    ; zpy
		cpx		fwdbyt,y    ; zpy
 +

		; check:
		; DEC
		; INC

 -
		DEC		$1234       ; ab
		DEC		bakwrd      ; ab
		DEC		fwdwrd      ; ab
		dec		($1234)     ; abi
		dec		(bakwrd)    ; abi
		dec		(fwdwrd)    ; abi
		DEC		$1234,x     ; abx
		DEC		bakwrd,x    ; abx
		DEC		fwdwrd,x    ; abx
		dec		$1234,y     ; aby
		dec		bakwrd,y    ; aby
		dec		fwdwrd,y    ; aby
		dec		A           ; acc
		dec		a           ; acc
		dec		            ; acc_i
		dec		#$12        ; imm
		dec		#bakbyt     ; imm
		dec		#fwdbyt     ; imm
		dec		            ; imp
		dec		+           ; pcr	(accepted as 'ab' mode)
		dec		-           ; pcr	(accepted as 'ab' mode)
		DEC		$12         ; zp
		DEC		bakbyt      ; zp
		DEC		fwdbyt      ; zp
		dec		($12),y     ; zpiy
		dec		(bakbyt),y  ; zpiy
		dec		(fwdbyt),y  ; zpiy
		DEC		$12,x       ; zpx
		DEC		bakbyt,x    ; zpx
		DEC		fwdbyt,x    ; zpx
		dec		($12,x)     ; zpxi
		dec		(bakbyt,x)  ; zpxi
		dec		(fwdbyt,x)  ; zpxi
		dec		$12,y       ; zpy
		dec		bakbyt,y    ; zpy
		dec		fwdbyt,y    ; zpy
 +

		; check:
		; JMP

 -
		JMP		$1234       ; ab
		JMP		bakwrd      ; ab
		JMP		fwdwrd      ; ab
		JMP		($1234)     ; abi
		JMP		(bakwrd)    ; abi
		JMP		(fwdwrd)    ; abi
		jmp		$1234,x     ; abx
		jmp		bakwrd,x    ; abx
		jmp		fwdwrd,x    ; abx
		jmp		$1234,y     ; aby
		jmp		bakwrd,y    ; aby
		jmp		fwdwrd,y    ; aby
		jmp		A           ; acc
		jmp		a           ; acc
		jmp		            ; acc_i
		jmp		#$12        ; imm
		jmp		#bakbyt     ; imm
		jmp		#fwdbyt     ; imm
		jmp		            ; imp
		jmp		+           ; pcr	(accepted as 'ab' mode)
		jmp		-           ; pcr	(accepted as 'ab' mode)
		jmp		$12         ; zp	(accepted as 'ab' mode)
		jmp		bakbyt      ; zp	(accepted as 'ab' mode)
		jmp		fwdbyt      ; zp	(accepted as 'ab' mode)
		jmp		($12),y     ; zpiy
		jmp		(bakbyt),y  ; zpiy
		jmp		(fwdbyt),y  ; zpiy
		jmp		$12,x       ; zpx
		jmp		bakbyt,x    ; zpx
		jmp		fwdbyt,x    ; zpx
		jmp		($12,x)     ; zpxi
		jmp		(bakbyt,x)  ; zpxi
		jmp		(fwdbyt,x)  ; zpxi
		jmp		$12,y       ; zpy
		jmp		bakbyt,y    ; zpy
		jmp		fwdbyt,y    ; zpy
 +

		; check:
		; JSR

 -
		JSR		$1234       ; ab
		JSR		bakwrd      ; ab
		JSR		fwdwrd      ; ab
		jsr		($1234)     ; abi
		jsr		(bakwrd)    ; abi
		jsr		(fwdwrd)    ; abi
		jsr		$1234,x     ; abx
		jsr		bakwrd,x    ; abx
		jsr		fwdwrd,x    ; abx
		jsr		$1234,y     ; aby
		jsr		bakwrd,y    ; aby
		jsr		fwdwrd,y    ; aby
		jsr		A           ; acc
		jsr		a           ; acc
		jsr		            ; acc_i
		jsr		#$12        ; imm
		jsr		#bakbyt     ; imm
		jsr		#fwdbyt     ; imm
		jsr		            ; imp
		jsr		+           ; pcr	(accepted as 'ab' mode)
		jsr		-           ; pcr	(accepted as 'ab' mode)
		jsr		$12         ; zp	(accepted as 'ab' mode)
		jsr		bakbyt      ; zp	(accepted as 'ab' mode)
		jsr		fwdbyt      ; zp	(accepted as 'ab' mode)
		jsr		($12),y     ; zpiy
		jsr		(bakbyt),y  ; zpiy
		jsr		(fwdbyt),y  ; zpiy
		jsr		$12,x       ; zpx
		jsr		bakbyt,x    ; zpx
		jsr		fwdbyt,x    ; zpx
		jsr		($12,x)     ; zpxi
		jsr		(bakbyt,x)  ; zpxi
		jsr		(fwdbyt,x)  ; zpxi
		jsr		$12,y       ; zpy
		jsr		bakbyt,y    ; zpy
		jsr		fwdbyt,y    ; zpy
 +

		; check:
		; LDX

 -
		LDX		$1234       ; ab
		LDX		bakwrd      ; ab
		LDX		fwdwrd      ; ab
		ldx		($1234)     ; abi
		ldx		(bakwrd)    ; abi
		ldx		(fwdwrd)    ; abi
		ldx		$1234,x     ; abx
		ldx		bakwrd,x    ; abx
		ldx		fwdwrd,x    ; abx
		LDX		$1234,y     ; aby
		LDX		bakwrd,y    ; aby
		LDX		fwdwrd,y    ; aby
		ldx		A           ; acc
		ldx		a           ; acc
		ldx		            ; acc_i
		LDX		#$12        ; imm
		LDX		#bakbyt     ; imm
		LDX		#fwdbyt     ; imm
		ldx		            ; imp
		ldx		+           ; pcr	(accepted as 'ab' mode)
		ldx		-           ; pcr	(accepted as 'ab' mode)
		LDX		$12         ; zp
		LDX		bakbyt      ; zp
		LDX		fwdbyt      ; zp
		ldx		($12),y     ; zpiy
		ldx		(bakbyt),y  ; zpiy
		ldx		(fwdbyt),y  ; zpiy
		ldx		$12,x       ; zpx
		ldx		bakbyt,x    ; zpx
		ldx		fwdbyt,x    ; zpx
		ldx		($12,x)     ; zpxi
		ldx		(bakbyt,x)  ; zpxi
		ldx		(fwdbyt,x)  ; zpxi
		LDX		$12,y       ; zpy
		LDX		bakbyt,y    ; zpy
		LDX		fwdbyt,y    ; zpy
 +

		; check:
		; LDY

 -
		LDY		$1234       ; ab
		LDY		bakwrd      ; ab
		LDY		fwdwrd      ; ab
		ldy		($1234)     ; abi
		ldy		(bakwrd)    ; abi
		ldy		(fwdwrd)    ; abi
		LDY		$1234,x     ; abx
		LDY		bakwrd,x    ; abx
		LDY		fwdwrd,x    ; abx
		ldy		$1234,y     ; aby
		ldy		bakwrd,y    ; aby
		ldy		fwdwrd,y    ; aby
		ldy		A           ; acc
		ldy		a           ; acc
		ldy		            ; acc_i
		LDY		#$12        ; imm
		LDY		#bakbyt     ; imm
		LDY		#fwdbyt     ; imm
		ldy		            ; imp
		ldy		+           ; pcr	(accepted as 'ab' mode)
		ldy		-           ; pcr	(accepted as 'ab' mode)
		LDY		$12         ; zp
		LDY		bakbyt      ; zp
		LDY		fwdbyt      ; zp
		ldy		($12),y     ; zpiy
		ldy		(bakbyt),y  ; zpiy
		ldy		(fwdbyt),y  ; zpiy
		LDY		$12,x       ; zpx
		LDY		bakbyt,x    ; zpx
		LDY		fwdbyt,x    ; zpx
		ldy		($12,x)     ; zpxi
		ldy		(bakbyt,x)  ; zpxi
		ldy		(fwdbyt,x)  ; zpxi
		ldy		$12,y       ; zpy
		ldy		bakbyt,y    ; zpy
		ldy		fwdbyt,y    ; zpy
 +

		; check:
		; STA

 -
		STA		$1234       ; ab
		STA		bakwrd      ; ab
		STA		fwdwrd      ; ab
		sta		($1234)     ; abi
		sta		(bakwrd)    ; abi
		sta		(fwdwrd)    ; abi
		STA		$1234,x     ; abx
		STA		bakwrd,x    ; abx
		STA		fwdwrd,x    ; abx
		STA		$1234,y     ; aby
		STA		bakwrd,y    ; aby
		STA		fwdwrd,y    ; aby
		sta		A           ; acc
		sta		a           ; acc
		sta		            ; acc_i
		sta		#$12        ; imm
		sta		#bakbyt     ; imm
		sta		#fwdbyt     ; imm
		sta		            ; imp
		sta		+           ; pcr	(accepted as 'ab' mode)
		sta		-           ; pcr	(accepted as 'ab' mode)
		STA		$12         ; zp
		STA		bakbyt      ; zp
		STA		fwdbyt      ; zp
		STA		($12),y     ; zpiy
		STA		(bakbyt),y  ; zpiy
		STA		(fwdbyt),y  ; zpiy
		STA		$12,x       ; zpx
		STA		bakbyt,x    ; zpx
		STA		fwdbyt,x    ; zpx
		STA		($12,x)     ; zpxi
		STA		(bakbyt,x)  ; zpxi
		STA		(fwdbyt,x)  ; zpxi
		sta		$12,y       ; zpy	(accepted as 'aby' mode)
		sta		bakbyt,y    ; zpy	(accepted as 'aby' mode)
		sta		fwdbyt,y    ; zpy	(accepted as 'aby' mode)
 +

		; check:
		; STX

 -
		STX		$1234       ; ab
		STX		bakwrd      ; ab
		STX		fwdwrd      ; ab
		stx		($1234)     ; abi
		stx		(bakwrd)    ; abi
		stx		(fwdwrd)    ; abi
		stx		$1234,x     ; abx
		stx		bakwrd,x    ; abx
		stx		fwdwrd,x    ; abx
		stx		$1234,y     ; aby	(accepted as 'zpy' mode)
		stx		bakwrd,y    ; aby	(accepted as 'zpy' mode)
		stx		fwdwrd,y    ; aby	(accepted as 'zpy' mode)
		stx		A           ; acc
		stx		a           ; acc
		stx		            ; acc_i
		stx		#$12        ; imm
		stx		#bakbyt     ; imm
		stx		#fwdbyt     ; imm
		stx		            ; imp
		stx		+           ; pcr	(accepted as 'ab' mode)
		stx		-           ; pcr	(accepted as 'ab' mode)
		STX		$12         ; zp
		STX		bakbyt      ; zp
		STX		fwdbyt      ; zp
		stx		($12),y     ; zpiy
		stx		(bakbyt),y  ; zpiy
		stx		(fwdbyt),y  ; zpiy
		stx		$12,x       ; zpx
		stx		bakbyt,x    ; zpx
		stx		fwdbyt,x    ; zpx
		stx		($12,x)     ; zpxi
		stx		(bakbyt,x)  ; zpxi
		stx		(fwdbyt,x)  ; zpxi
		STX		$12,y       ; zpy
		STX		bakbyt,y    ; zpy
		STX		fwdbyt,y    ; zpy
 +

		; check:
		; STY

 -
		STY		$1234       ; ab
		STY		bakwrd      ; ab
		STY		fwdwrd      ; ab
		sty		($1234)     ; abi
		sty		(bakwrd)    ; abi
		sty		(fwdwrd)    ; abi
		sty		$1234,x     ; abx	(accepted as 'zpx' mode)
		sty		bakwrd,x    ; abx	(accepted as 'zpx' mode)
		sty		fwdwrd,x    ; abx	(accepted as 'zpx' mode)
		sty		$1234,y     ; aby
		sty		bakwrd,y    ; aby
		sty		fwdwrd,y    ; aby
		sty		A           ; acc
		sty		a           ; acc
		sty		            ; acc_i
		sty		#$12        ; imm
		sty		#bakbyt     ; imm
		sty		#fwdbyt     ; imm
		sty		            ; imp
		sty		+           ; pcr	(accepted as 'ab' mode)
		sty		-           ; pcr	(accepted as 'ab' mode)
		STY		$12         ; zp
		STY		bakbyt      ; zp
		STY		fwdbyt      ; zp
		sty		($12),y     ; zpiy
		sty		(bakbyt),y  ; zpiy
		sty		(fwdbyt),y  ; zpiy
		STY		$12,x       ; zpx
		STY		bakbyt,x    ; zpx
		STY		fwdbyt,x    ; zpx
		sty		($12,x)     ; zpxi
		sty		(bakbyt,x)  ; zpxi
		sty		(fwdbyt,x)  ; zpxi
		sty		$12,y       ; zpy
		sty		bakbyt,y    ; zpy
		sty		fwdbyt,y    ; zpy
 +

; errs = 330

; forward reference

fwdbyt	.equ	$12
fwdwrd	.equ	$1234

; -------------------------------

		.end
