# a script to generate the current master HXA test list

# for Thompson AWK 4.0

# by Anton Treuenfels

# first created: 02/17/04
# last revision: 09/10/13

# - the outputs of this script are intended as input to a
# markup language translator

# ------------------

# output filename

local outFile

# master topic

local masterTopic

# ------------------

# print a line to output file

local function out(this) { print this > outFile }

# print a blank line to output file

local function blank() { print "" > outFile }

# print a comment line to output file

local function comment(this) { out( "# " this ) }

# print a divider to output file

local function divider() {

    comment( "------------------------" )
    blank()
}

# print a topic line to output file

local function topic(this) {

    out( "!topic " masterTopic "\\" this )
    blank()
}

# print a table of contents line to output file

local function toc(level) {

    out( "!toc " level )
    blank()
}

# clean a line for use

local function clean(line, field) {

    local str

    str = substr( line, index(line, field) )
    if ( match(str, /[ \t]+$/) )
        str = substr( str, 1, RSTART - 1 )
    return( str )
}

# ------------------

# collect the file info

local function collectinfo(namepat) {

    local fname, cat, desc, ndx
    local assem
    local info

    # get the file names and descriptions

    fname = findfirst( namepat )
    while ( fname != "" ) {
        fopen( fname, "r" )
        getline() < fname   # discard first line
        getline() < fname   # category line (contains a "\" char if has one)
        cat = clean( $0, $2 )
        if ( index(cat, "\\") ) {
            getline() < fname   # description line
            desc = clean( $0, $2 )

            # we organize by filename so the order of filenames is preserved
            # - we have to introduce a "dummy" name so sorting works "right"
            # on the first file in a series (has no letter suffix)

            if ( match(fname, /[0-9]\.a$/i) )
                ndx = tolower( substr(fname, 1, RSTART) "a.a" )
            else
                ndx = tolower( fname )

            info[ ndx ][ "CAT" ] = cat
            info[ ndx ][ "DESC" ] = desc

            # now look for a cpu pseudo op
            # - there may not be one !

            assem = "Any"

            while ( !feof(fname) ) {
                getline() < fname
                if ( $1 ~ /cpu/ ) {
                    if ( $2 ~ /T_/i )
                        assem = "HXA_T"
                    else if ( $2 ~ /65C?/ )
                        assem = "HXA65"
                    else
                        assem = "???"
                    break
                }
            }

            info[ ndx ][ "ASSEM" ] = "Assembler: " assem
        }

        close( fname )
        fname = findnext()
    }

    return( info )
}

# add tests to document

local function add_doc(namepat, dir) {

    local name, cat, test
    local list, entry, contents

    # adjust relative directory path
    # - known in advance "outside" this program, of course

    dir = "../" dir "/"

    # collect test information

    list = collectinfo( namepat )

    # topic of this addition

    blank()
    divider()

    # table of contents here

    toc( 2 )

    # detailed lists

    cat = "none"
    for ( name in list ) {
        split( list[name]["CAT"], entry, "\\" )
        if ( entry[1] != cat ) {
            cat = entry[ 1 ]
            blank()
            divider()
            topic( cat )
            test = "none"
        }
        if ( entry[2] != test ) {
            test = entry[ 2 ]
            blank()
            divider()
            topic( cat "\\" test )
            out( list[name]["ASSEM"] )
            out( "!list" )
        }

        if ( match(name, /a\.a$/) )
            out( "- X<" dir substr( name, 1, RSTART-1 ) ".a>" )
        else
            out( "- X<" dir name ">" )
        out( "- " list[name]["DESC"] )
    }
}

# make a document

local function make_doc(basetopic, dir, fname) {

    local namepat

    outFile = fname

    namepat = dir substr( "????????.a", length(dir) + 1 )

    # generate the header

    comment( "Hobby Cross Assembler Master " basetopic " List" )
    blank()
    comment( "Auto-generated by \"testlist.awk\"" )
    blank()
    comment( "Last generation: " ctime() )
    blank()
    divider()

    # document name

    out( "%Copyright%" )
    blank()
    divider()

    # path to document

#    out( "!path .\\" dir )
#    blank()

    # master topic and table of contents

    masterTopic = basetopic
    out( "!topic " basetopic )
    blank()

    # add matching tests

    add_doc( namepat, dir )

    # all done

    close( outFile )
}


# ------------------

# create the test and demo list files

BEGIN {

    make_doc( "General Tests", "test", "hxa_test.doc" )
    make_doc( "General Demos", "demo0", "hxa_demo.doc" )
    make_doc( "6502 Processor Family Tests", "proc", "hxa_p65x.doc" )
    make_doc( "6502 Processor Family Demos", "demo1", "hxa_d65x.doc" )
    make_doc( "\"Hello, World!\" Demos", "hello", "hxa_helo.doc" )
}

