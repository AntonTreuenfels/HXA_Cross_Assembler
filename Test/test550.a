; Hobby Cross-Assembler Test 550
; Functions\Function Evaluation
; ok: function evaluation

; by Anton Treuenfels

; first created: 03/11/10
; last revised:  08/01/13

; no errors to detect

        .listfile
        .errfile

; -------------------------------

        .cpu    "T_16_M"    ; required psop
        .org    $1000       ; required psop

; -------------------------------

; some useful strings

null$   .equ    ""
a$      .equ    "A"
la$     .equ    "a"
b$      .equ    "B"
lb$     .equ    "b"
d$      .equ    "D"
f$      .equ    "F"
cd$     .equ    "CD"
abc$    .equ    "ABC"
def$    .equ    "DEF"
abcabc$ .equ    "ABCABC"
abcdef$ .equ    "ABCDEF"

; some useful numbers

p3      .equ    3
n4      .equ    -4

; -------------------------------
; VER() and VER$()
; -------------------------------

        .word   ver()

        .if ver() < $0100
        .fatal  "Non-existent version number not supported"
        .endif

        .string ver$()

; -------------------------------
; LEN()
; -------------------------------

        .byte   len( "" )
        .byte   len( "A" )
        .byte   len( "A" "B" )

        .byte   len( null$ )
        .byte   len( a$ )
        .byte   len( a$ b$ )

; -------------------------------
; INDEX()
; -------------------------------

; string found

        .byte   index( "ABC", "A" )     ; 1
        .byte   index( "ABC", "B" )     ; 2

        .byte   index( abc$, a$ )       ; 1
        .byte   index( abc$, b$ )       ; 2

; string not found

        .byte   index( "ABC", "D" )     ; 0

        .byte   index( abc$, d$ )       ; 0

; string found

        .byte   index( "ABCABC", "A", 3 )  ; 4
        .byte   index( "ABCABC", "B", 3 )  ; 5

        .byte   index( abcabc$, a$, p3 )   ; 4
        .byte   index( abcabc$, b$, p3 )   ; 5

        .byte   index( "ABCABC", "A", -4 ) ; 4
        .byte   index( "ABCABC", "B", -4 ) ; 5

        .byte   index( abcabc$, a$, n4 )   ; 4
        .byte   index( abcabc$, b$, n4 )   ; 5

; string not found

        .byte   index( "ABCABC", "D", 2 )   ; 0
        .byte   index( "ABCABC", "D", 100 ) ; 0
        .byte   index( "ABCABC", "D", -1 )  ; 0

        .byte   index( abcabc$, d$, 2 )     ; 0
        .byte   index( abcabc$, d$, 100 )   ; 0
        .byte   index( abcabc$, d$, -1 )    ; 0

; null strings (never found)

        .byte   index( "ABC", "" )      ; 0
        .byte   index( "", "ABC" )      ; 0
        .byte   index( "", "" )         ; 0

        .byte   index( abc$, null$ )    ; 0
        .byte   index( null$, abc$ )    ; 0
        .byte   index( null$, null$ )   ; 0

; -------------------------------
; MID$()
; -------------------------------

        ; no third argument means take rest of string

        .byte   mid$( "abcdef", 4 ) == "def"

        .byte   mid$( abcdef$, 4 ) == def$

        ; third argument limits number of chars taken

        .byte   mid$( "abcdef", 1, 3 ) == "abc"

        .byte   mid$( abcdef$, 1, 3 ) == abc$

        ; negative start position offsets from end of string

        .byte   mid$( "abcdef", -1 ) == "f"

        .byte   mid$( abcdef$, -1 ) == f$

        .byte   mid$( "abcdef", -4, 2 ) == "cd"

        .byte   mid$( abcdef$, -4, 2 ) == cd$

        ; odd arguments

        .byte   mid$( "abcdef", 0 ) == ""

        .byte   mid$( abcdef$, 0 ) == null$

        .byte   mid$( "abcdef", 3, 0 ) == ""

        .byte   mid$( abcdef$, 3, 0 ) == null$

        .byte   mid$( "", 1 ) == ""

        .byte   mid$( null$, 1 ) == null$

; -------------------------------
; VAL()
; -------------------------------

; numeric literals

        .word   val( "0" )
        .word   val( "1" )
        .word   val( "2" )

; character literals

        .word   val( "'A'" )
        .word   val( "'B'" )
        .word   val( "'C'" )

; program counter

        .word   val( "*" )
        .word   val( "$" )

; unary operators

        .word   val( "+1" )
        .word   val( "-1" )
        .word   val( "~1" )
        .word   val( "!1" )

; binary operators (arithmetic results)

        .word   val("123 + 45") ;  168, $00A8
        .word   val("123 - 45") ;   78, $004E

; string binary operators (logical results)

        .word   val( "\"123\" == \"123\"" )
        .word   val( "\"123\" != \"123\"" )

; regular expression operators (logical results)

        .word   val( "\"123\" ~ /123/" )
        .word   val( "\"123\" !~ /123/" )

; ternary operator

        .word   val(  0  ? "1" : "2" )
        .word   val(  1  ? "1" : "2" )
        .word   val( ""  ? "1" : "2" )
        .word   val( "1" ? "1" : "2" )

; -------------------------------
; STR$()
; -------------------------------

; simpler expressions

        .str    str$( 1 )

        .str    str$(1+1)

        .str    str$( 3*1 )

        .str    str$( ((8)/(2)) )

        .str    str$( "ABC" != "ABC" )

        .str    str$( abc$ == abc$ )

g1lab   .str    str$( * )

        .str    str$( g1lab )       ; should be the same as previous

; -------------------------------
; INDEXR()
; -------------------------------

; string found

        .byte   indexr( "ABC", "A" )    ; 1
        .byte   indexr( "ABC", "B" )    ; 2

        .byte   indexr( abc$, a$ )      ; 1
        .byte   indexr( abc$, b$ )      ; 2

; string not found

        .byte   indexr( "ABC", "D" )    ; 0

        .byte   indexr( abc$, d$ )      ; 0

; string found

        .byte   indexr( "ABCABC", "A", 3 )  ; 1
        .byte   indexr( "ABCABC", "B", 3 )  ; 2

        .byte   indexr( abcabc$, a$, p3 )   ; 1
        .byte   indexr( abcabc$, b$, p3 )   ; 2

        .byte   indexr( "ABCABC", "A", -4 ) ; 1
        .byte   indexr( "ABCABC", "B", -4 ) ; 2

        .byte   indexr( abcabc$, a$, n4 )   ; 1
        .byte   indexr( abcabc$, b$, n4 )   ; 2

; string not found

        .byte   indexr( "ABCABC", "D", 2 )   ; 0
        .byte   indexr( "ABCABC", "D", 100 ) ; 0
        .byte   indexr( "ABCABC", "D", -1 )  ; 0

        .byte   indexr( abcabc$, d$, 2 )     ; 0
        .byte   indexr( abcabc$, d$, 100 )   ; 0
        .byte   indexr( abcabc$, d$, -1 )    ; 0

; null strings (never found)

        .byte   indexr( "ABC", "" )     ; 0
        .byte   indexr( "", "ABC" )     ; 0
        .byte   indexr( "", "" )        ; 0

        .byte   indexr( abc$, null$ )   ; 0
        .byte   indexr( null$, abc$ )   ; 0
        .byte   indexr( null$, null$ )   ; 0

; -------------------------------
; TOLOWER$() and TOUPPER$()
; -------------------------------

        .byte   tolower$( "A" "B" ) == "ab"

        .byte   "AB" == toupper$( "a" "b" )

        .byte   tolower$( a$ b$ ) == la$ lb$

        .byte   a$ b$ == toupper$( la$ lb$ )

; -------------------------------
; FORWARD()
; -------------------------------

        .byte   forward( "1" )
        .byte   forward( "1+1" )

        .byte   forward( "*" )
        .byte   forward( "1+$" )

        .byte   forward( "p3" )
        .byte   forward( "1 + n4" )

        .word   forward( "nonExistentLabel" )
        .word   1 + forward( "forwardLabel" )
        .word   forward( "forwardLabel" ) + forwardLabel

; -------------------------------
; CHR$() and ORD()
; -------------------------------

        ; special cases
        ; for chr$() - out-of-range; should be $FF
        ; for ord()  - null string;  should be $00

        .str chr$( -1 )
        .byte   ord( "" )

        ; for chr$() - in-range expressions ( <256 )
        ; for ord()  - single char string

]temp   =   0

        .repeat 32
]temp$  =   chr$( ]temp )
        .str    ]temp$
        .byte   ord( ]temp$ )
]temp   = ]temp + 1
        .endr

        ; for chr$() - in-range expressions; check other than first char
        ; for ord()  - multiple char strings; check other than first char
        ; - should have same result as first repeat loop above

]temp   = 0
]temp$  = ""

        .repeat 32
]temp$  = ]temp$ chr$( ]temp )
]temp   = ]temp + 1
        .str    mid$( ]temp$, ]temp, 1 )
        .byte   ord( ]temp$, ]temp )
        .endr

; -------------------------------
; MATCH$()
; -------------------------------

        .byte   match$( "abcdef", /def/ ) == "def"

        .byte   match$( "abcdef", /bc|de/, -4 ) == "de"

        .byte   match$( "abcdef", /bcd/, 100 ) == ""

        .byte   match$( "", /abc/ ) == ""

        .string match$( "abcdef", /abc/ )       ; "abc"

        .string match$( "abcdef", /bc|de/, -4 ) ; "de"

; -------------------------------
; SEGBEG(), SEGEND(), SEGLEN(), SEGOFF()
; -------------------------------

; not tested here because this test is monolithic (and these will fail)

; -------------------------------
; CPU$()
; -------------------------------

; is name set ?

        .if     cpu$() != "T_16_M"
        .fatal  "Unexpected CPU name!"
        .endif

; embed name in output file

        .string cpu$()

; -------------------------------
; TIME$()
; -------------------------------

; function value is a string
; format: "WeekDay Month Day Hr:Mn:Sc Year"
;     ex: "Sat Feb 05 18:30:45 2011"

        .str    time$()

; we can slice and splice the value

tm$     =   time$()

        .str    mid$( tm$, -4 )     ; year

; -------------------------------
; MESG$()
; -------------------------------

        ; a message index known to exist

c$      .equ    cpu$()
t$      .equ    time$()
m$      .equ    mesg$( "InsSet" )

        .str    "Assembled at " t$ " using " c$ m$

        .if m$ != mesg$( "Ins" "Set" )
        .fatal  "Equality test one failed"
        .endif

        ; message indices known not to exist

]temp$  .equ    c$

        .if mesg$( c$ ) != mesg$( ]temp$ )
        .fatal "Equality test two failed"
        .endif

; -------------------------------
; FILE$()
; -------------------------------

        .str    FILE$()

        .if FILE$() != "TEST550.A"
        .fatal  "String mis-match one"
        .endif

; -------------------------------

forwardLabel

; -------------------------------

        .end
