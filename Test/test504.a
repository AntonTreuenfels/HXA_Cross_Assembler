; Hobby Cross-Assembler Test 504
; Functions\INDEX()
; ok: substring position (from left)

; by Anton Treuenfels

; first created: 10/01/05
; last revised:  03/14/10

; no errors to detect

        .listfile
        .errfile

; -------------------------------

        .cpu    "T_16_M"    ; required psop
        .org    $1000       ; required psop

; -------------------------------

; some useful strings

null$   .equ    ""
a$      .equ    "A"
b$      .equ    "B"
d$      .equ    "D"
abc$    .equ    "ABC"
abcabc$ .equ    "ABCABC"

; some useful numbers

p3      .equ    3
n4      .equ    -4

; -------------------------------

; string found

        .byte   index( "ABC", "A" )        ; 1
        .byte   index( "ABC", "B" )        ; 2
        .byte   index( "ABC", "C" )        ; 3

        .byte   index( abc$, a$ )          ; 1
        .byte   index( abc$, b$ )          ; 2

        .byte   index( "ABC", "AB" )       ; 1
        .byte   index( "ABC", "BC" )       ; 2

; string not found

        .byte   index( "ABC", "D" )
        .byte   index( "AB", "ABCD" )

        .byte   index( abc$, d$ )

; string found

        .byte   index( "ABCABC", "A", 3 )  ; 4
        .byte   index( "ABCABC", "B", 3 )  ; 5
        .byte   index( "ABCABC", "C", 3 )  ; 3

        .byte   index( abcabc$, a$, p3 )   ; 4
        .byte   index( abcabc$, b$, p3 )   ; 5

        .byte   index( "ABCABC", "A", -4 ) ; 4
        .byte   index( "ABCABC", "B", -4 ) ; 5
        .byte   index( "ABCABC", "C", -4 ) ; 3

        .byte   index( abcabc$, a$, n4 )   ; 4
        .byte   index( abcabc$, b$, n4 )   ; 5

; string not found

        .byte   index( "ABCABC", "D", 2 )
        .byte   index( "ABCABC", "D", 100 )
        .byte   index( "ABCABC", "D", -1 )

        .byte   index( abcabc$, d$, 2 )
        .byte   index( abcabc$, d$, 100 )
        .byte   index( abcabc$, d$, -1 )

        .byte   index( "ABCABC", "D", 1 )
        .byte   index( "ABCABC", "D", 3 )
        .byte   index( "ABCABC", "D", 4 )

        .byte   index( "ABCABC", "1", 1 )
        .byte   index( "ABCABC", "1", 2 )
        .byte   index( "ABCABC", "1", 3 )
        .byte   index( "ABCABC", "1", 4 )

        .byte   index( "AB", "ABCD", 2 )
        .byte   index( "AB", "ABCD", 100 )
        .byte   index( "AB", "ABCD", -10 )

; null strings (never found)

        .byte   index( "ABC", "" )
        .byte   index( "", "ABC" )
        .byte   index( "", "" )

        .byte   index( abc$, null$ )
        .byte   index( null$, abc$ )
        .byte   index( null$, null$ )

; string found
; - or rather, string found if start search position is within string:
; - start relative to left end of string:   1 to len(str)
; - start relative to right end of string: -len(str) to -1

]STR$   = "ABCABC"
]SLEN    = len( ]STR$ )

;       .while
; ADJSTART    = what should be HXA's adjusted start position
;       .byte = specified start position ("Fx" is negative)
;       .byte = adjusted start position (taking into account sign)
;       .byte = is start position within string ?
;       .byte = search_result (should be zero if start not in string)
;       .long   test separator
;       .endw

]START  = -10

        .while  ]START < 10
]ADJSTART   = ]START < 0 ? ]START + ]SLEN + 1 : ]START
        .byte   ]START
        .byte   ]ADJSTART
        .byte   ]ADJSTART > 0 && ]ADJSTART <= ]SLEN
        .byte   index( ]STR$, "B", ]START )
        .long   $00
]START  = ]START + 1
        .endw

; -------------------------------

        .end
