; Hobby Cross-Assembler Test 090
; Expressions\Expression Evaluation
; ok: expression evaluation

; by Anton Treuenfels

; first created: 03/25/03
; last revised:  03/21/10

; no errors to detect

        .listfile
        .errfile

; -------------------------------

        .cpu    "T_16_L"    ; required psop
        .org    $1000       ; required psop

; -------------------------------

intMin  .equ    -2147483648     ; -2^31
intMax  .equ     2147483647     ; 2^31 -1

uintMin .equ     0
uintMax .equ     4294967295     ;  2^32 - 1

; -------------------------------
; Basic Expressions
; -------------------------------

; unary operators - minimum signed integer value

        .long   +intMin
        .long   -intMin
        .long   ~intMin
        .long   !intMin

        .long    >-2147483648
        .long    <-2147483648
        .long    ^-2147483648

; -------------------------------

; unary operators - maximum signed integer value

        .long   +intMax
        .long   -intMax
        .long   ~intMax
        .long   !intMax

        .long    >2147483647
        .long    <2147483647
        .long    ^2147483647

; -------------------------------

; unary operators - minimum unsigned integer value

        .long   +uintMin
        .long   -uintMin
        .long   ~uintMin
        .long   !uintMin

        .long   >0
        .long   <0
        .long   ^0

; -------------------------------

; unary operators - maximum unsigned integer value

        .long   +uintMax
;        .long   -uintMax       ; out of range
        .long   ~uintMax
        .long   !uintMax

        .long    >4294967295
        .long    <4294967295
        .long    ^4294967295

; -------------------------------

; unary operators

        .word   +1
        .word   -1
        .word   ~1
        .word   !1

        .word   >1
        .word   <1
        .word   ^1

; -------------------------------

; unary operators - string operands (numeric results)

        .byte   +"", +(""), (+"")

        .byte   -"", -(""), (-"")

        .byte   ~"", ~(""), (~"")

        .byte   !"", !(""), (!"")

        .byte   +"a", +("a"), (+"a")

        .byte   -"a", -("a"), (-"a")

        .byte   ~"a", ~("a"), (~"a")

        .byte   !"a", !("a"), (!"a")

; -------------------------------

; binary operators (arithmetic results)

        .word   0 + 1
        .word   0 - 1
        .word   0 * 1
        .word   0 / 1
        .word   0 % 1

        .word   123 + 45        ;  168, $00A8
        .word   123 - 45        ;   78, $004E
        .word   123 * 45        ; 5535, $159F
        .word   123 / 45        ;    2, $0002
        .word   123 % 45        ;   33, $0021

        .long   intMin + 1      ; -2^31+1   $80000001
;        .long   intMin - 1      ; -2^31-1  out of range

        .long   intMax + 1      ; 2^31      $80000000
        .long   intMax - 1      ; 2^31-2    $7ffffffe

        .long   uintMin + 1     ; 1         $00000001
        .long   uintMin - 1     ; -1        $ffffffff

;        .long   uintMax + 1     ; 2^32     out of range
        .long   uintMax - 1     ; 2^32-2    $fffffffe

; -------------------------------

; binary operators (bitwise results)

        .word   $00 & $01
        .word   $00 ^ $01
        .word   $00 | $01

        .word   $01 << 1
        .word   $80 >> 1
        
        .word   $a55a & $5555
        .word   $a55a ^ $5555
        .word   $a55a | $5555

        .word   $0001 << 15
        .word   $8000 >> 15

        .long   1 << 07
        .long   1 << 15
        .long   1 << 23
        .long   1 << 31

        ; accepted as signed integer and sign-extended during shift

        .long   $80000000 >> 07
        .long   $80000000 >> 15
        .long   $80000000 >> 23
        .long   $80000000 >> 31

        .long   intMax & intMin
        .long   intMax ^ intMin
        .long   intMax | intMin

        .long   intMin >> 1
        .long   intMin << 1

        .long   intMax >> 1
        .long   intMax << 1

        .long   uintMax >> 1
        .long   uintMax << 1

; -------------------------------

; binary operators (logical results)

        .byte   0 < 1
        .byte   0 > 1
        .byte   0 <= 1
        .byte   0 >= 1
        .byte   0 == 1
        .byte   0 != 1
        .byte   0 && 1
        .byte   0 || 1

        .byte   123 < 45
        .byte   123 > 45
        .byte   123 <= 45
        .byte   123 >= 45
        .byte   123 == 45
        .byte   123 != 45
        .byte   123 && 45
        .byte   123 || 45

; -------------------------------

; string binary operators (logical results)

        .byte   "123" == "123"
        .byte   "123" != "123"
        .byte   "123" == "abc"
        .byte   "123" != "abc"

        .byte   "123" < "123"
        .byte   ( "123" ) > ( "123" )
        .byte   ( ( "123" ) ) == ( ( "123" ) )
        .byte   "123" < "abc"
        .byte   ( "123" )  > ( "abc" )
        .byte   ( ( "123" ) ) != ( ( "abc" ) )

        .byte   "123" <= "123"
        .byte   "123" >= "123"
        .byte   "123" <= "abc"
        .byte   "123" >= "abc"

        .byte   "String with blanks" == "String with blanks"
        .byte   " String with blanks " != " String with blanks "

; -------------------------------

; regular expression operators (logical results)

        .byte   "123" ~ /123/
        .byte   "123" !~ /123/
        .byte   "123" ~ /abc/
        .byte   "123" !~ /abc/

        .byte   "abc" ~ /abc/
        .byte   "abc" ~ /ABC/
        .byte   "ABC" ~ /abc/
        .byte   "ABC" ~ /ABC/

        .byte   "abc" ~ /abc/i
        .byte   "abc" ~ /ABC/i
        .byte   "ABC" ~ /abc/i
        .byte   "ABC" ~ /ABC/i

        .byte   "abc" ~ /a/
        .byte   "abc" ~ /b/i
        .byte   "abc" ~ /c/
        .byte   "abc" ~ /d/i

        .byte   "abc" ~ /[ac]/
        .byte   ( "abc" ) !~ /[ac]/
        .byte   "abc" ~ ( /[ac]/i )
        .byte   ( "abc" ) !~ ( /[ac]/i )

        .byte   "\$80" ~ /\$80/
        .byte   "\80H" ~ /\80h/
        .byte   "/" ~ /\//i
        .byte   "\t" ~ /\t/i

        .long   "hello\n" ~ /HELLO\n/i

        .long   "Embedded spaces\shere" ~ /embedded\sspaces here/i

; -------------------------------

; string concatenation (string context)

        .string "a"         ; "a"

        .string "a" "b"     ; "ab"

        .string "a""b""c""d"    ; "abcd"

        .string "a" ""      ; "a"

        .string "" "a"      ; "a"

        .string "a" "" "b"  ; "ab"

; -------------------------------

; string concatenation (numeric context)

        .byte   "ab" == "ab"

        .byte   "a" "b" == "ab"

        .byte   "ab" == "a" "b"

        .byte   "ab" == "ab" + 1

        .byte   "a" "b" == "a" "b" + 1

        .byte   "a" "" == "" "a"

        .byte   "a" "" "" == "" "" "a"

; -------------------------------

; concatenation with string labels

strA$   .equ    "a"
strB$   .equ    "b"
strC$   .equ    "c"

        .string strA$

        .string strA$ "b"

        .string strA$ strB$ "c"

        .string strA$ strB$ strC$ "d"

; -------------------------------

; logical short circuit (backward reference)

bak0    .equ    0
bak1    .equ    1

        .byte   bak0 && bak0              ; 0
        .byte   bak0 && bak1              ; 0
        .byte   bak1 && bak0              ; 0
        .byte   bak1 && bak1              ; 1

        .byte   bak0 || bak0              ; 0
        .byte   bak0 || bak1              ; 1
        .byte   bak1 || bak0              ; 1
        .byte   bak1 || bak1              ; 1

bak0$   .equ    ""
bak1$   .equ    "1"

        .byte   bak0$ && bak0$        ; 0
        .byte   bak0$ && bak1$        ; 0
        .byte   bak1$ && bak0$        ; 0
        .byte   bak1$ && bak1$        ; 1

        .byte   bak0$ || bak0$        ; 0
        .byte   bak0$ || bak1$        ; 1
        .byte   bak1$ || bak0$        ; 1
        .byte   bak1$ || bak1$        ; 1

; -------------------------------

; logical short circuit (forward reference)

        .byte   fwd0 && fwd0              ; 0
        .byte   fwd0 && fwd1              ; 0
        .byte   fwd1 && fwd0              ; 0
        .byte   fwd1 && fwd1              ; 1

        .byte   fwd0 || fwd0              ; 0
        .byte   fwd0 || fwd1              ; 1
        .byte   fwd1 || fwd0              ; 1
        .byte   fwd1 || fwd1              ; 1

fwd0    .equ    0
fwd1    .equ    1

        .byte   fwd0$ && fwd0$            ; 0
        .byte   fwd0$ && fwd1$            ; 0
        .byte   fwd1$ && fwd0$            ; 0
        .byte   fwd1$ && fwd1$            ; 1

        .byte   fwd0$ || fwd0$            ; 0
        .byte   fwd0$ || fwd1$            ; 1
        .byte   fwd1$ || fwd0$            ; 1
        .byte   fwd1$ || fwd1$            ; 1

fwd0$   .equ    ""
fwd1$   .equ    "1"

; -------------------------------

; logical short circuit (non-existent reference)

        ; - short-circuit implies unnecessary reference
        ; - "unKnown" will not appear in the symbol table listing !

        .byte   0 && unKnown        ; 0
        .byte   1 || unKnown        ; 1

        .byte   0 && unKnown && 0   ; 0
        .byte   0 && unKnown && 1   ; 0

        .byte   0 && unKnown || 0   ; 0
        .byte   0 && unKnown || 1   ; 1

        .byte   "" && unKnown$         ; 0
        .byte   "1" || unKnown$        ; 1

        .byte   "" && unKnown$ && ""   ; 0
        .byte   "" && unKnown$ && "1"  ; 0

        .byte   "" && unKnown$ || ""   ; 0
        .byte   "" && unKnown$ || "1"  ; 1

        ; these next few are interesting because even though "&&" has a
        ; higher precedence, and thus would presumably try to evaluate
        ; "unKnown" before the "||" (and fail on the first pass and report
        ; an error on the second pass), it actually never gets evaluated
        ; once the left side of "||" is determined to be true !

        .byte   1 || unKnown && 0   ; 1
        .byte   1 || unKnown && 1   ; 1

        .byte   1 || unKnown || 0   ; 1
        .byte   1 || unKnown || 1   ; 1

        .byte   "1" || unKnown$ && ""  ; 1
        .byte   "1" || unKnown$ && "1" ; 1

        .byte   "1" || unKnown$ || ""  ; 1
        .byte   "1" || unKnown$ || "1" ; 1

; -------------------------------

; numeric ternary conditional

b0      .equ    0
b1      .equ    1
b2      .equ    2

        ; literals

        .byte   0 ? 1 : 2
        .byte   1 ? 1 : 2

        ; backward reference

        .byte   b0 ? b1 : b2
        .byte   b1 ? b1 : b2

        ; forward reference

        .byte   f0 ? f1 : f2
        .byte   f1 ? f1 : f2

f2      .equ    2
f1      .equ    1
f0      .equ    0

; -------------------------------

; string ternary conditionals

b0$     .equ    ""
b1$     .equ    "1"
b2$     .equ    "2"

        ; literals

        .str    ""  ? "1" : "2"
        .str    "1" ? "1" : "2"

        ; backward reference

        .str    b0$ ? b1$ : b2$
        .str    b1$ ? b1$ : b2$

; -------------------------------
; Complex Expressions
; -------------------------------

; consecutive unary operators of same precedence
; - note they execute in right-to-left order

        .word   ++1
        .word   +-1
        .word   -+1
        .word   --1

        .word   !!1
        .word   -!1
        .word   !-1

        .word   +++1
        .word   ---1

        .word   >-1         ; negate, then extract
        .word   <-1
        .word   ^-1

; for the record, following are how to extract particular bytes
; -ie., copy them to bits 0->7 and set bits 8->31 to zero

        .long   <intMax     ; bits  0 -> 7
        .long   >intMax     ; bits  8 -> 15
        .long   <^intMax    ; bits 16 -> 23
        .long   >^intMax    ; bits 24 -> 31

extractVal  = $12345678

        .long   <extractVal  ; bits  0 -> 7
        .long   >extractVal  ; bits  8 -> 15
        .long   <^extractVal ; bits 16 -> 23
        .long   >^extractVal ; bits 24 -> 31

; -------------------------------

; labels - backward reference

label1  .equ    $4000
label2  .equ    $8000

        .word   label1/256
        .word   label1%256

        .word   (label1&$ff00) >> 8
        .word   label1&$00ff

        .word   !(label2||label1)
        .word   label2 > label1
        .word   label1 < $1000

        .word   label1 - 1
        .word   (label1-1)
        .word   <label1 - 1
        .word   <(label1-1)
        .word   >label1 - 1
        .word   >(label1-1)
        .word   ^label1 - 1
        .word   ^(label1-1)

        .word   label2 - label1
        .word   (label2-label1)
        .word   <label2 - label1
        .word   <(label2-label1)
        .word   >label2 - label1
        .word   >(label2-label1)
        .word   ^label2 - label1
        .word   ^(label2-label1)

        .word   label2 - label1 / 256
        .word   label2 - label1 % 256
        .word   (label2 - label1) / 256
        .word   (label2 - label1) % 256

; -------------------------------

; labels - forward reference
; - also re-testing that leading "." really is optional !

        word    label3 / 256
        word    label3 % 256

        word    (label3 & $ff00)>>8
        word    label3 & $00ff

        word    ! (label4 || label3)
        word    label4>label3
        word    label3<$1000

        word    label3-1
        word    (label3 - 1)
        word    <label3-1
        word    <(label3 - 1)
        word    >label3-1
        word    >(label3 - 1)
        word    ^label3-1
        word    ^(label3 - 1)

        word    label4-label3
        word    (label4 - label3)
        word    <label4-label3
        word    <(label4 - label3)
        word    >label4-label3
        word    >(label4 - label3)
        word    ^label4-label3
        word    ^(label4 - label3)

        word   label4 - label3 / 256
        word   label4 - label3 % 256
        word   (label4 - label3) / 256
        word   (label4 - label3) % 256

label3  .equ    $2000
label4  .equ    $6000

; -------------------------------

; branch target referencess in expressions
; - note a reference operand cannot be directly followed by an operator
; which matches the name of the reference. There must be an intervening
; character, or else the operator will be interpreted as part of the operand
; - it is always safe to surround the reference with parentheses

 -                                          ; backward branch

        .word   -
        .word   :- - 4, (:-)-2, :-, :-+2, :- + 4
        .word   +
        .word   :+ - 4, :+-2, :+, (:+)+2, :+ + 4

 +                                          ; forward branch

; alternatively the operands may be re-arranged so the reference comes last

 -                                          ; backward branch
        .word   (:-)-2, -2+:-
        .word   (:+)+2,  2+:+
 +                                          ; forward branch      

; -------------------------------

; use of parentheses to alter evaluation precedence

        .word   2 * 6 - 1 * 3               ; 09, $0009
        .word   (2) * (6) - (1) * (3)       ; 09, $0009
        .word   (2 * 6 - 1) * 3             ; 33, $0021
        .word   2 + 2 * 6 - 1 + 2 * 3       ; 19, $0013
        .word   (2 + 2) * 6 - (1 + 2) * 3   ; 15, $000F
        .word   ((2 + 2) * 6 - 1) + 2 * 3   ; 29, $001D

        .word   'A', '0', 10, 2
        .word   'A' - '0'
        .word   'A'-'0'-10
        .word   'A' - '0' * 2
        .word   ('A' - '0') * 2

; -------------------------------

; program counter

        .word   * + 3
        .word   *-2
        .word   * < $1000 || * > $2000

        .word   $+$100
        .word   $ - $10
        .word   $ > $1000 && $ < $2000

; -------------------------------

        .word   6 + "123" ~ /6+/i
        .word   "123" ~ /6+/i + 6

; -------------------------------

        .word   "123" == "abc" == "345" == "efg"
        .word   "123" != "abc" != "345" != "efg"
        .word   "123" < "abc" < "345" < "efg"
        .word   "123" > "abc" > "345" > "efg"
        .word   "123" <= "abc" <= "345" <= "efg"
        .word   "123" >= "abc" >= "345" >= "efg"

; -------------------------------

; perturbing edge values

;                ---!---!---!---!---!---!---!---!

        .long   %10000000000000000000000000000001-1
        .long   -2147483647-1
        .long   $80000001-1

        .long   %10000000000000000000000000000000+1
        .long   -2147483648+1
        .long   $80000000+1

        .long   %01111111111111111111111111111111-1
        .long   2147483647-1
        .long   $7fffffff-1

        .long   %01111111111111111111111111111110+1
        .long   2147483646+1
        .long   $7ffffffe+1

        .long   %10000000000000000000000000000001-1
        .long   2147483649-1
        .long   $80000001-1

        .long   %10000000000000000000000000000000+1
        .long   2147483648+1
        .long   $80000000+1

        .long   %11111111111111111111111111111111-1
        .long   4294967295-1
        .long   $ffffffff-1

        .long   %11111111111111111111111111111110+1
        .long   4294967294+1
        .long   $fffffffe+1

; -------------------------------

        .end
