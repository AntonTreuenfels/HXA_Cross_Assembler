; Hobby Cross-Assembler Test 516
; Functions\FORWARD()
; ok: check expression for forward reference

; by Anton Treuenfels

; first created: 07/03/06
; last revised:  10/13/12

; no errors to detect

        .listfile
        .errfile

; -------------------------------

        .cpu    "T_16_L"    ; required psop
        .org    $1000       ; required psop

; -------------------------------

        ; no forward reference

backRef
]backRef
@backRef
 -

        .byte   forward( "1" )
        .byte   forward( "1+1" )

        .byte   forward( "backRef" )
        .byte   forward( "backRef+1" )

        .byte   forward( "]backRef" )
        .byte   forward( "1+]backRef" )

        .byte   forward( "@backRef" )
        .byte   forward( "@backRef+1" )

        .byte   forward( "-" )
        .byte   forward( ":-+1" )

        .byte   forward( "*" )
        .byte   forward( "1+$" )

]tmp$   .equ    "1+backRef+]backRef-@backRef"

        .byte   forward( ]tmp$ )
        .byte   1 + forward( ]tmp$ )

; -------------------------------

        ; forward reference
        ; - oddly enough we don't actually have to provide the labels
        ; being referred to, because the function value is resolved
        ; as soon as it is encountered

        .byte   forward( "fwdRef" )
        .byte   forward( "fwdRef+1" )

        ; these next two would cause HXA to emit a warning when
        ; it can't find them, so we comment them out

;        .byte   forward( "]fwdRef" )
;        .byte   forward( "]fwdRef+1" )

        .byte   forward( "@fwdRef" )
        .byte   forward( "@fwdRef+1" )

        .byte   forward( "+" )
        .byte   forward( ":+ +1" )

]tmp$   .equ    "1+fwdRef+@fwdRef"

        .byte   forward( ]tmp$ )
        .byte   1 + forward( ]tmp$ )

        ; but if there is another forward reference in an expression
        ; which includes the forward() function, then we do need to
        ; provide that reference so the entire expression can be
        ; resolved properly on the second pass

        .word   forward( "fwdRef" ) + fwdLabel
        .word   fwdLabel + forward( "@fwdRef" )

; -------------------------------

        ; this section repeats part of the above, but this time the
        ; emphasis is on the use of forward() to determine whether or
        ; not a label is in the symbol table

        ; these symbols are:

        .byte   forward("backRef")
        .byte   forward("]backRef")
        .byte   forward("@backRef")
        .byte   forward("-")

        ; these symbols are NOT:

        .byte   forward("fwdRef")
;        .byte   forward("]fwdRef")
        .byte   forward("@fwdRef")
        .byte   forward("+")

; -------------------------------

; the label to resolve the forward reference when it is used in an expression

fwdLabel    .word   *

; -------------------------------

        .end
